#!/bin/sh

# This script is really just for people who are working on the code. If there are classfiles in
# the project's build directory, it uses those, since those would be the most up-to-date version.
# An end user who is not in the code can perfectly well use the launch script in the ../bootstrap
# directory. Or, more generally speaking, he can just launch the executable .jar file directly,
# as in:
#
#    java -jar javacc.jar <args>
#

BASE_DIR="$(dirname $0)/.."

# If there is no build directory, then just use the bootstrap jarfile

if [ ! -f "$BASE_DIR/build/javacc/Main.class" ]; then
    java -jar "$BASE_DIR/bootstrap/javacc.jar" "$@"
    exit $?
fi

#Now some rigmarole to set up the classpath on Windoze as well as *Nix

SEP=":"

# Let's go the extra 9 yards to get this working on Cygwin and such.
# I hope people appreciate the effort!
case "$(uname -s)" in
    CYGWIN*)
      SEP=';'
      BASE_DIR=$(cygpath -w $BASE_DIR)
    ;;
    MINGW*)
      SEP=';'
      BASE_DIR=$(cygpath -w $BASE_DIR)
    ;;
    MSYS*)
      SEP=';'
      BASE_DIR=$(cygpath -w $BASE_DIR)
    ;;
esac

# If there are classfiles in the build directory, use those. Otherwise, use the javacc.jar in the bootstrap
# directory.

java -classpath "$BASE_DIR/build$SEP$BASE_DIR/bootstrap/javacc.jar$SEP$BASE_DIR/bootstrap/freemarker.jar" javacc.Main "$@"


