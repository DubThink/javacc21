/* Generated by: JavaCC 21 Parser Generator. JavaCCParser.java */
package com.javacc.parser;

import java.util.*;
import java.util.logging.*;

import com.javacc.*;
import com.javacc.lexgen.*;
import com.javacc.parsegen.*;
import com.javacc.parser.tree.*;

import java.io.*;
@SuppressWarnings("unused")
public class JavaCCParser implements JavaCCConstants {
    Grammar grammar;
    public JavaCCParser(Grammar grammar,java.io.Reader reader) {
        this(reader);
        this.grammar=grammar;
    }

    /**
   * This int variable is incremented while parsing local lookaheads.
   * Hence it keeps track of *syntactic* lookahead nesting.
   * This is used to provide warnings when actions and nested lookaheads
   * are used in syntactic lookahead productions.  This is to prevent
   * typos such as leaving out the comma in LOOKAHEAD( foo(), {check()} ).
   */
    int inLocalLA;
    /*
    * Returns true if the next token is not in the FOLLOW list of "expansion".
    * It is used to decide when the end of an "expansion" has been reached.
    */
    private boolean notTailOfExpansionUnit() {
        Token t=getToken(1);
        int type=t.getId();
        return type!=BIT_OR&&type!=COMMA&&type!=RPAREN&&type!=RBRACE&&type!=RBRACKET;
    }

    private char character_descriptor_assign(Token t,String s) {
        if (s.length()!=1) {
            grammar.addParseError(t,"String in character list may contain only one character.");
            return' ';
        }
        else {
            return s.charAt(0);
        }
    }

    private char character_descriptor_assign(Token t,String s,String left) {
        if (s.length()!=1) {
            grammar.addParseError(t,"String in character list may contain only one character.");
            return' ';
        }
        else if ((int)(left.charAt(0))>(int)(s.charAt(0))) {
            grammar.addParseError(t,"Right end of character range \'"+s+"\' has a lower ordinal value than the left end of character range \'"+left+"\'.");
            return left.charAt(0);
        }
        else {
            return s.charAt(0);
        }
    }

    private String removeEscapesAndQuotes(Token t) {
        String retval="";
        String str=t.image;
        int index=1;
        char ch,ch1;
        int ordinal;
        while (index<str.length()-1) {
            if (str.charAt(index)!='\\') {
                retval+=str.charAt(index);
                index++;
                continue;
            }
            index++;
            ch=str.charAt(index);
            if (ch=='b') {
                retval+='\b';
                index++;
                continue;
            }
            if (ch=='t') {
                retval+='\t';
                index++;
                continue;
            }
            if (ch=='n') {
                retval+='\n';
                index++;
                continue;
            }
            if (ch=='f') {
                retval+='\f';
                index++;
                continue;
            }
            if (ch=='r') {
                retval+='\r';
                index++;
                continue;
            }
            if (ch=='"') {
                retval+='\"';
                index++;
                continue;
            }
            if (ch=='\'') {
                retval+='\'';
                index++;
                continue;
            }
            if (ch=='\\') {
                retval+='\\';
                index++;
                continue;
            }
            if (ch>='0'&&ch<='7') {
                ordinal=((int) ch)-((int)'0');
                index++;
                ch1=str.charAt(index);
                if (ch1>='0'&&ch1<='7') {
                    ordinal=ordinal*8+((int) ch1)-((int)'0');
                    index++;
                    ch1=str.charAt(index);
                    if (ch<='3'&&ch1>='0'&&ch1<='7') {
                        ordinal=ordinal*8+((int) ch1)-((int)'0');
                        index++;
                    }
                }
                retval+=(char) ordinal;
                continue;
            }
            if (ch=='u') {
                index++;
                ch=str.charAt(index);
                if (hexchar(ch)) {
                    ordinal=hexval(ch);
                    index++;
                    ch=str.charAt(index);
                    if (hexchar(ch)) {
                        ordinal=ordinal*16+hexval(ch);
                        index++;
                        ch=str.charAt(index);
                        if (hexchar(ch)) {
                            ordinal=ordinal*16+hexval(ch);
                            index++;
                            ch=str.charAt(index);
                            if (hexchar(ch)) {
                                ordinal=ordinal*16+hexval(ch);
                                index++;
                                continue;
                            }
                        }
                    }
                }
                grammar.addParseError(t,"Encountered non-hex character '"+ch+"' at position "+index+" of string "+"- Unicode escape must have 4 hex digits after it.");
                return retval;
            }
            grammar.addParseError(t,"Illegal escape sequence '\\"+ch+"' at position "+index+" of string.");
            return retval;
        }
        return retval;
    }

    private static boolean hexchar(char ch) {
        return(ch>='0'&&ch<='9')||(ch>='A'&&ch<='F')||(ch>='a'&&ch<='f');
    }

    static private int hexval(char ch) {
        if (ch>='0'&&ch<='9') return((int) ch)-((int)'0');
        if (ch>='A'&&ch<='F') return((int) ch)-((int)'A')+10;
        return((int) ch)-((int)'a')+10;
    }

    static public CompilationUnit parseJavaFile(java.io.Reader input,String inputSource) throws ParseException {
        JavaCCParser parser=new JavaCCParser(input);
        parser.setInputSource(inputSource);
        parser.token_source.inJavaCode=true;
        return parser.CompilationUnit();
    }

    public Grammar getGrammar() {
        return grammar;
    }

    public void openNodeScopeHook(Node n) {
        n.setGrammar(grammar);
    }

    static final java.util.logging.Logger LOGGER=Logger.getLogger("JavaCCParser");
    static public void setLogLevel(Level level) {
        LOGGER.setLevel(level);
        Logger.getGlobal().getParent().getHandlers()[0].setLevel(level);
    }

    private final boolean tolerantParsing=false;
    public boolean isParserTolerant() {
        return tolerantParsing;
    }

    public void setParserTolerant(boolean tolerantParsing) {
        if (tolerantParsing) {
            throw new UnsupportedOperationException("This parser was not built with that feature!");
        }
    }

    /** Generated Lexer. */
    public JavaCCLexer token_source;
    public void setInputSource(String inputSource) {
        token_source.setInputSource(inputSource);
    }

    String getInputSource() {
        return token_source.getInputSource();
    }

    private boolean buildTree=true;
    private boolean tokensAreNodes=true;
    private boolean specialTokensAreNodes=false;
    NodeScope currentNodeScope=new NodeScope();
    /** 
	 * Returns the root node of the AST.  It only makes sense to call
	 * this after a successful parse. 
	 */
    public Node rootNode() {
        return currentNodeScope.rootNode();
    }

    /**
     * push a node onto the top of the node stack
     */
    public void pushNode(Node n) {
        currentNodeScope.add(n);
    }

    /** 
     * Returns the node on the top of the stack, and remove it from the
     * stack.  
     */
    public Node popNode() {
        return currentNodeScope.pop();
    }

    /** 
     * Returns the node currently on the top of the stack. 
     */
    public Node peekNode() {
        return currentNodeScope.peek();
    }

    /**
     * Puts the node on the top of the stack. However, unlike pushNode()
     * it replaces the node that is currently on the top of the stack.
     * This is effectively equivalent to popNode() followed by pushNode(n)
     */
    public void pokeNode(Node n) {
        currentNodeScope.poke(n);
    }

    /** Returns the number of children on the stack in the current node
	 * scope. 
	 */
    public int nodeArity() {
        return currentNodeScope.size();
    }

    public void clearNodeScope() {
        currentNodeScope.clear();
    }

    public void openNodeScope(Node n) {
        new NodeScope();
        n.open();
        if (trace_enabled) LOGGER.info("Opened node scope for node of type: "+n.getClass().getName());
        if (trace_enabled) LOGGER.info("Scope nesting level is "+currentNodeScope.nestingLevel());
    }

    /* A definite node is constructed from a specified number of
	 * children.  That number of nodes are popped from the stack and
	 * made the children of the definite node.  Then the definite node
	 * is pushed on to the stack.
	 */
    public void closeNodeScope(Node n,int num) {
        if (trace_enabled) LOGGER.info("Closing node scope for node of type: "+n.getClass().getName()+", popping "+num+" nodes off the stack.");
        currentNodeScope.close();
        ArrayList<Node>nodes=new ArrayList<Node>();
        for (int i=0; i<num; i++) {
            nodes.add(popNode());
        }
        Collections.reverse(nodes);
        for (Node child : nodes) {
            if (specialTokensAreNodes&&(child instanceof Token)) {
                Token token=(Token) child;
                Token specialToken=token;
                while (specialToken!=null) {
                    specialToken=specialToken.specialToken;
                }
                while (specialToken!=null&&specialToken!=token) {
                    n.addChild(specialToken);
                    specialToken=specialToken.next;
                }
            }
            n.addChild(child);
        }
        n.close();
        pushNode(n);
    }

    /**
	 * A conditional node is constructed if the condition is true.  All
	 * the nodes that have been pushed since the node was opened are
	 * made children of the conditional node, which is then pushed
	 * on to the stack.  If the condition is false the node is not
	 * constructed and they are left on the stack. 
	 */
    public void closeNodeScope(Node n,boolean condition) {
        if (condition) {
            if (trace_enabled) LOGGER.finer("Closing node scope for node of type: "+n.getClass().getName()+", popping "+nodeArity()+" nodes off the stack.");
            int a=nodeArity();
            currentNodeScope.close();
            ArrayList<Node>nodes=new ArrayList<Node>();
            while (a-->0) {
                nodes.add(popNode());
            }
            Collections.reverse(nodes);
            for (Node child : nodes) {
                if (specialTokensAreNodes&&(child instanceof Token)) {
                    Token token=(Token) child;
                    Token specialToken=token;
                    while (specialToken.specialToken!=null) {
                        specialToken=specialToken.specialToken;
                    }
                    while (specialToken!=null&&specialToken!=token) {
                        n.addChild(specialToken);
                        specialToken=specialToken.next;
                    }
                }
                n.addChild(child);
            }
            n.close();
            if (trace_enabled) {
                LOGGER.info("Closing node scope for node of type: "+n.getClass().getName()+", leaving "+nodeArity()+" nodes on the stack.");
                LOGGER.info("Nesting level is : "+currentNodeScope.nestingLevel());
            }
            pushNode(n);
            if (trace_enabled) {
                LOGGER.info("Closed node scope for node of type: "+n.getClass().getName()+", there are now "+nodeArity()+" nodes on the stack.");
                LOGGER.info("Nesting level is : "+currentNodeScope.nestingLevel());
            }
        }
        else {
            currentNodeScope.close();
            if (trace_enabled) {
                LOGGER.info("Closed node scope for node of type: "+n.getClass().getName()+", leaving "+nodeArity()+" nodes on the stack.");
                LOGGER.info("Nesting level is : "+currentNodeScope.nestingLevel());
            }
        }
    }

    public boolean getBuildTree() {
        return buildTree;
    }

    public void setBuildTree(boolean buildTree) {
        this.buildTree=buildTree;
    }

    /**
     * Just a kludge so that existing jjtree-based code that uses
     * parser.jjtree.foo can work without change.
     */
    JavaCCParser jjtree=this;
    @SuppressWarnings("serial")
    class NodeScope extends ArrayList<Node> {
        NodeScope parentScope;
        NodeScope() {
            this.parentScope=JavaCCParser.this.currentNodeScope;
            JavaCCParser.this.currentNodeScope=this;
        }

        boolean isRootScope() {
            return parentScope==null;
        }

        Node rootNode() {
            NodeScope ns=this;
            while (ns.parentScope!=null) {
                ns=ns.parentScope;
            }
            return ns.isEmpty()?null:
            ns.get(0);
        }

        Node peek() {
            return isEmpty()?parentScope.peek():
            get(size()-1);
        }

        Node pop() {
            return isEmpty()?parentScope.pop():
            remove(size()-1);
        }

        void poke(Node n) {
            if (isEmpty()) {
                parentScope.poke(n);
            }
            else {
                set(size()-1,n);
            }
        }

        void close() {
            parentScope.addAll(this);
            JavaCCParser.this.currentNodeScope=parentScope;
        }

        int nestingLevel() {
            int result=0;
            NodeScope parent=this;
            while (parent.parentScope!=null) {
                result++;
                parent=parent.parentScope;
            }
            return result;
        }

    }
    static private final int INFINITY=Integer.MAX_VALUE;
    //=================================
    // Start of methods for BNF Productions
    //=================================
    // Java.javacc, line 331
    final public CompilationUnit CompilationUnit() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 331 of Java.javacc");
        // Code for expansion specified on line 334 of Java.javacc
        boolean CompilationUnit1forced=false;
        CompilationUnit CompilationUnit1=null;
        if (buildTree) {
            CompilationUnit1=new CompilationUnit();
            Token start=getToken(1);
            CompilationUnit1.setBeginLine(start.beginLine);
            CompilationUnit1.setBeginColumn(start.beginColumn);
            CompilationUnit1.setInputSource(this.getInputSource());
            openNodeScope(CompilationUnit1);
            openNodeScopeHook(CompilationUnit1);
        }
        ParseException parseException1=null;
        try {
            // Code for expansion specified on line 334 of Java.javacc
            if (phase2_1(INFINITY)&&(2+2==4)) {
                // Code for expansion specified on line 334 of Java.javacc
                // Code for PackageDeclaration specified on line 334 of Java.javacc
                PackageDeclaration();
            }
            // Code for expansion specified on line 335 of Java.javacc
            label_2:
            while (true) {
                int int1=nextTokenKind();
                if (!(int1==49)) {
                    break label_2;
                }
                // Code for expansion specified on line 335 of Java.javacc
                // Code for ImportDeclaration specified on line 335 of Java.javacc
                ImportDeclaration();
            }
            // Code for expansion specified on line 337 of Java.javacc
            switch(nextTokenKind()) {
                case 24:
                case 32:
                case 39:
                case 42:
                case 52:
                case 54:
                case 58:
                case 59:
                case 60:
                case 63:
                case 64:
                case 67:
                case 71:
                case 75:
                case 97:
                case 138:
                // Code for expansion specified on line 337 of Java.javacc
                // Code for expansion specified on line 337 of Java.javacc
                label_3:
                while (true) {
                    // Code for expansion specified on line 337 of Java.javacc
                    // Code for TypeDeclaration specified on line 337 of Java.javacc
                    TypeDeclaration();
                    int int2=nextTokenKind();
                    if (!(int2==24||int2==32||int2==39||int2==42||int2==52||int2==54||int2==58||int2==59||int2==60||int2==63||int2==64||int2==67||int2==71||int2==75||int2==97||int2==138)) {
                        break label_3;
                    }
                }
                break;
                case 0:
                // Code for expansion specified on line 339 of Java.javacc
                // Code for expansion specified on line 339 of Java.javacc
                consumeToken(0);
                break;
                default:
                consumeToken(-1);
                throw new ParseException();
            }
            // Code for expansion specified on line 341 of Java.javacc
            return CompilationUnit1;
        }
        catch(ParseException e) {
            parseException1=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException1!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException1.getMessage());
                    clearNodeScope();
                }
                else {
                    CompilationUnit1.setEndLine(current_token.getEndLine());
                    CompilationUnit1.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(CompilationUnit1,true);
                }
            }
        }
    }

    // Java.javacc, line 388
    final public PackageDeclaration PackageDeclaration() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 388 of Java.javacc");
        // Code for expansion specified on line 392 of Java.javacc
        boolean PackageDeclaration2forced=false;
        PackageDeclaration PackageDeclaration2=null;
        if (buildTree) {
            PackageDeclaration2=new PackageDeclaration();
            Token start=getToken(1);
            PackageDeclaration2.setBeginLine(start.beginLine);
            PackageDeclaration2.setBeginColumn(start.beginColumn);
            PackageDeclaration2.setInputSource(this.getInputSource());
            openNodeScope(PackageDeclaration2);
            openNodeScopeHook(PackageDeclaration2);
        }
        ParseException parseException2=null;
        try {
            // Code for expansion specified on line 392 of Java.javacc
            consumeToken(57);
            // Code for Name specified on line 392 of Java.javacc
            Name();
            // Code for expansion specified on line 392 of Java.javacc
            consumeToken(97);
            // Code for expansion specified on line 393 of Java.javacc
            return PackageDeclaration2;
        }
        catch(ParseException e) {
            parseException2=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException2!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException2.getMessage());
                    clearNodeScope();
                }
                else {
                    PackageDeclaration2.setEndLine(current_token.getEndLine());
                    PackageDeclaration2.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(PackageDeclaration2,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 415
    final public ImportDeclaration ImportDeclaration() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 415 of Java.javacc");
        // Code for expansion specified on line 418 of Java.javacc
        boolean ImportDeclaration3forced=false;
        ImportDeclaration ImportDeclaration3=null;
        if (buildTree) {
            ImportDeclaration3=new ImportDeclaration();
            Token start=getToken(1);
            ImportDeclaration3.setBeginLine(start.beginLine);
            ImportDeclaration3.setBeginColumn(start.beginColumn);
            ImportDeclaration3.setInputSource(this.getInputSource());
            openNodeScope(ImportDeclaration3);
            openNodeScopeHook(ImportDeclaration3);
        }
        ParseException parseException3=null;
        try {
            // Code for expansion specified on line 418 of Java.javacc
            consumeToken(49);
            // Code for expansion specified on line 418 of Java.javacc
            int int3=nextTokenKind();
            if (int3==63) {
                // Code for expansion specified on line 418 of Java.javacc
                // Code for expansion specified on line 418 of Java.javacc
                consumeToken(63);
            }
            // Code for Name specified on line 418 of Java.javacc
            Name();
            // Code for expansion specified on line 418 of Java.javacc
            int int4=nextTokenKind();
            if (int4==99) {
                // Code for expansion specified on line 418 of Java.javacc
                // Code for expansion specified on line 418 of Java.javacc
                consumeToken(99);
                // Code for expansion specified on line 418 of Java.javacc
                consumeToken(117);
            }
            // Code for expansion specified on line 418 of Java.javacc
            consumeToken(97);
            // Code for expansion specified on line 419 of Java.javacc
            return ImportDeclaration3;
        }
        catch(ParseException e) {
            parseException3=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException3!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException3.getMessage());
                    clearNodeScope();
                }
                else {
                    ImportDeclaration3.setEndLine(current_token.getEndLine());
                    ImportDeclaration3.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(ImportDeclaration3,nodeArity()>1);
                }
            }
        }
    }

    /*
 * Modifiers. We match all modifiers in a single rule to reduce the chances of
 * syntax errors for simple modifier mistakes. It will also enable us to give
 * better error messages.
 */
    // Java.javacc, line 466
    final public void Modifiers() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 466 of Java.javacc");
        // Code for expansion specified on line 469 of Java.javacc
        // Code for expansion specified on line 496 of Java.javacc
        label_6:
        while (true) {
            if (!(phase2_2(2))) {
                break label_6;
            }
            // Code for expansion specified on line 470 of Java.javacc
            // Code for expansion specified on line 472 of Java.javacc
            switch(nextTokenKind()) {
                case 60:
                // Code for expansion specified on line 472 of Java.javacc
                // Code for expansion specified on line 472 of Java.javacc
                consumeToken(60);
                break;
                case 63:
                // Code for expansion specified on line 474 of Java.javacc
                // Code for expansion specified on line 474 of Java.javacc
                consumeToken(63);
                break;
                case 59:
                // Code for expansion specified on line 476 of Java.javacc
                // Code for expansion specified on line 476 of Java.javacc
                consumeToken(59);
                break;
                case 58:
                // Code for expansion specified on line 478 of Java.javacc
                // Code for expansion specified on line 478 of Java.javacc
                consumeToken(58);
                break;
                case 42:
                // Code for expansion specified on line 480 of Java.javacc
                // Code for expansion specified on line 480 of Java.javacc
                consumeToken(42);
                break;
                case 24:
                // Code for expansion specified on line 482 of Java.javacc
                // Code for expansion specified on line 482 of Java.javacc
                consumeToken(24);
                break;
                case 67:
                // Code for expansion specified on line 484 of Java.javacc
                // Code for expansion specified on line 484 of Java.javacc
                consumeToken(67);
                break;
                case 54:
                // Code for expansion specified on line 486 of Java.javacc
                // Code for expansion specified on line 486 of Java.javacc
                consumeToken(54);
                break;
                case 71:
                // Code for expansion specified on line 488 of Java.javacc
                // Code for expansion specified on line 488 of Java.javacc
                consumeToken(71);
                break;
                case 75:
                // Code for expansion specified on line 490 of Java.javacc
                // Code for expansion specified on line 490 of Java.javacc
                consumeToken(75);
                break;
                case 64:
                // Code for expansion specified on line 492 of Java.javacc
                // Code for expansion specified on line 492 of Java.javacc
                consumeToken(64);
                break;
                case 138:
                // Code for expansion specified on line 494 of Java.javacc
                // Code for Annotation specified on line 494 of Java.javacc
                Annotation();
                break;
                default:
                consumeToken(-1);
                throw new ParseException();
            }
        }
        if (trace_enabled) LOGGER.info("Exiting normally from Modifiers");
    }

    // Java.javacc, line 500
    final public void Modifiers2() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 500 of Java.javacc");
        // Code for expansion specified on line 503 of Java.javacc
        // Code for expansion specified on line 532 of Java.javacc
        label_7:
        while (true) {
            if (!(phase2_3(2))) {
                break label_7;
            }
            // Code for expansion specified on line 504 of Java.javacc
            // Code for expansion specified on line 506 of Java.javacc
            switch(nextTokenKind()) {
                case 60:
                // Code for expansion specified on line 506 of Java.javacc
                // Code for expansion specified on line 506 of Java.javacc
                consumeToken(60);
                break;
                case 63:
                // Code for expansion specified on line 508 of Java.javacc
                // Code for expansion specified on line 508 of Java.javacc
                consumeToken(63);
                break;
                case 59:
                // Code for expansion specified on line 510 of Java.javacc
                // Code for expansion specified on line 510 of Java.javacc
                consumeToken(59);
                break;
                case 58:
                // Code for expansion specified on line 512 of Java.javacc
                // Code for expansion specified on line 512 of Java.javacc
                consumeToken(58);
                break;
                case 42:
                // Code for expansion specified on line 514 of Java.javacc
                // Code for expansion specified on line 514 of Java.javacc
                consumeToken(42);
                break;
                case 24:
                // Code for expansion specified on line 516 of Java.javacc
                // Code for expansion specified on line 516 of Java.javacc
                consumeToken(24);
                break;
                case 67:
                // Code for expansion specified on line 518 of Java.javacc
                // Code for expansion specified on line 518 of Java.javacc
                consumeToken(67);
                break;
                case 54:
                // Code for expansion specified on line 520 of Java.javacc
                // Code for expansion specified on line 520 of Java.javacc
                consumeToken(54);
                break;
                case 71:
                // Code for expansion specified on line 522 of Java.javacc
                // Code for expansion specified on line 522 of Java.javacc
                consumeToken(71);
                break;
                case 75:
                // Code for expansion specified on line 524 of Java.javacc
                // Code for expansion specified on line 524 of Java.javacc
                consumeToken(75);
                break;
                case 64:
                // Code for expansion specified on line 526 of Java.javacc
                // Code for expansion specified on line 526 of Java.javacc
                consumeToken(64);
                break;
                case 35:
                // Code for expansion specified on line 528 of Java.javacc
                // Code for expansion specified on line 528 of Java.javacc
                consumeToken(35);
                break;
                case 138:
                // Code for expansion specified on line 530 of Java.javacc
                // Code for Annotation specified on line 530 of Java.javacc
                Annotation();
                break;
                default:
                consumeToken(-1);
                throw new ParseException();
            }
        }
        if (trace_enabled) LOGGER.info("Exiting normally from Modifiers2");
    }

    /*
 * Declaration syntax follows.
 */
    // Java.javacc, line 538
    final public TypeDeclaration TypeDeclaration() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 538 of Java.javacc");
        // Code for expansion specified on line 541 of Java.javacc
        boolean TypeDeclaration4forced=false;
        TypeDeclaration TypeDeclaration4=null;
        if (buildTree) {
            TypeDeclaration4=new TypeDeclaration();
            Token start=getToken(1);
            TypeDeclaration4.setBeginLine(start.beginLine);
            TypeDeclaration4.setBeginColumn(start.beginColumn);
            TypeDeclaration4.setInputSource(this.getInputSource());
            openNodeScope(TypeDeclaration4);
            openNodeScopeHook(TypeDeclaration4);
        }
        ParseException parseException4=null;
        try {
            // Code for expansion specified on line 542 of Java.javacc
            switch(nextTokenKind()) {
                case 97:
                // Code for expansion specified on line 542 of Java.javacc
                // Code for expansion specified on line 542 of Java.javacc
                consumeToken(97);
                break;
                case 24:
                case 32:
                case 39:
                case 42:
                case 52:
                case 54:
                case 58:
                case 59:
                case 60:
                case 63:
                case 64:
                case 67:
                case 71:
                case 75:
                case 138:
                // Code for expansion specified on line 544 of Java.javacc
                // Code for Modifiers specified on line 544 of Java.javacc
                Modifiers();
                // Code for expansion specified on line 546 of Java.javacc
                switch(nextTokenKind()) {
                    case 32:
                    // Code for expansion specified on line 546 of Java.javacc
                    // Code for ClassDeclaration specified on line 546 of Java.javacc
                    ClassDeclaration();
                    break;
                    case 52:
                    // Code for expansion specified on line 548 of Java.javacc
                    // Code for InterfaceDeclaration specified on line 548 of Java.javacc
                    InterfaceDeclaration();
                    break;
                    case 39:
                    // Code for expansion specified on line 550 of Java.javacc
                    // Code for EnumDeclaration specified on line 550 of Java.javacc
                    EnumDeclaration();
                    break;
                    case 138:
                    // Code for expansion specified on line 552 of Java.javacc
                    // Code for AnnotationTypeDeclaration specified on line 552 of Java.javacc
                    AnnotationTypeDeclaration();
                    break;
                    default:
                    consumeToken(-1);
                    throw new ParseException();
                }
                break;
                default:
                consumeToken(-1);
                throw new ParseException();
            }
            // Code for expansion specified on line 555 of Java.javacc
            return TypeDeclaration4;
        }
        catch(ParseException e) {
            parseException4=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException4!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException4.getMessage());
                    clearNodeScope();
                }
                else {
                    TypeDeclaration4.setEndLine(current_token.getEndLine());
                    TypeDeclaration4.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(TypeDeclaration4,true);
                }
            }
        }
    }

    // Java.javacc, line 722
    final public void ClassDeclaration() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 722 of Java.javacc");
        // Code for expansion specified on line 725 of Java.javacc
        // Code for expansion specified on line 725 of Java.javacc
        consumeToken(32);
        // Code for expansion specified on line 726 of Java.javacc
        consumeToken(IDENTIFIER);
        // Code for expansion specified on line 727 of Java.javacc
        int int5=nextTokenKind();
        if (int5==102) {
            // Code for expansion specified on line 727 of Java.javacc
            // Code for TypeParameters specified on line 727 of Java.javacc
            TypeParameters();
        }
        // Code for expansion specified on line 728 of Java.javacc
        int int6=nextTokenKind();
        if (int6==40) {
            // Code for expansion specified on line 728 of Java.javacc
            // Code for ExtendsList specified on line 728 of Java.javacc
            ExtendsList(false);
        }
        // Code for expansion specified on line 729 of Java.javacc
        int int7=nextTokenKind();
        if (int7==48) {
            // Code for expansion specified on line 729 of Java.javacc
            // Code for ImplementsList specified on line 729 of Java.javacc
            ImplementsList(false);
        }
        // Code for ClassOrInterfaceBody specified on line 730 of Java.javacc
        ClassOrInterfaceBody(false);
        if (trace_enabled) LOGGER.info("Exiting normally from ClassDeclaration");
    }

    // Java.javacc, line 733
    final public void InterfaceDeclaration() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 733 of Java.javacc");
        // Code for expansion specified on line 736 of Java.javacc
        // Code for expansion specified on line 736 of Java.javacc
        consumeToken(52);
        // Code for expansion specified on line 737 of Java.javacc
        consumeToken(IDENTIFIER);
        // Code for expansion specified on line 738 of Java.javacc
        int int8=nextTokenKind();
        if (int8==102) {
            // Code for expansion specified on line 738 of Java.javacc
            // Code for TypeParameters specified on line 738 of Java.javacc
            TypeParameters();
        }
        // Code for expansion specified on line 739 of Java.javacc
        int int9=nextTokenKind();
        if (int9==40) {
            // Code for expansion specified on line 739 of Java.javacc
            // Code for ExtendsList specified on line 739 of Java.javacc
            ExtendsList(true);
        }
        // Code for ClassOrInterfaceBody specified on line 740 of Java.javacc
        ClassOrInterfaceBody(true);
        if (trace_enabled) LOGGER.info("Exiting normally from InterfaceDeclaration");
    }

    // Java.javacc, line 743
    final public ExtendsList ExtendsList(boolean isInterface) throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 743 of Java.javacc");
        boolean extendsMoreThanOne=false;
        // Code for expansion specified on line 748 of Java.javacc
        boolean ExtendsList5forced=false;
        ExtendsList ExtendsList5=null;
        if (buildTree) {
            ExtendsList5=new ExtendsList();
            Token start=getToken(1);
            ExtendsList5.setBeginLine(start.beginLine);
            ExtendsList5.setBeginColumn(start.beginColumn);
            ExtendsList5.setInputSource(this.getInputSource());
            openNodeScope(ExtendsList5);
            openNodeScopeHook(ExtendsList5);
        }
        ParseException parseException5=null;
        try {
            // Code for expansion specified on line 748 of Java.javacc
            consumeToken(40);
            // Code for ClassOrInterfaceType specified on line 748 of Java.javacc
            ClassOrInterfaceType();
            // Code for expansion specified on line 749 of Java.javacc
            label_13:
            while (true) {
                int int10=nextTokenKind();
                if (!(int10==98)) {
                    break label_13;
                }
                // Code for expansion specified on line 749 of Java.javacc
                // Code for expansion specified on line 749 of Java.javacc
                consumeToken(98);
                // Code for ClassOrInterfaceType specified on line 749 of Java.javacc
                ClassOrInterfaceType();
                // Code for expansion specified on line 749 of Java.javacc
                extendsMoreThanOne=true;
            }
            // Code for expansion specified on line 750 of Java.javacc
            if (extendsMoreThanOne&&!isInterface) throw new ParseException("A class cannot extend more than one other class");
            return ExtendsList5;
        }
        catch(ParseException e) {
            parseException5=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException5!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException5.getMessage());
                    clearNodeScope();
                }
                else {
                    ExtendsList5.setEndLine(current_token.getEndLine());
                    ExtendsList5.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(ExtendsList5,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 787
    final public ImplementsList ImplementsList(boolean isInterface) throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 787 of Java.javacc");
        // Code for expansion specified on line 790 of Java.javacc
        boolean ImplementsList6forced=false;
        ImplementsList ImplementsList6=null;
        if (buildTree) {
            ImplementsList6=new ImplementsList();
            Token start=getToken(1);
            ImplementsList6.setBeginLine(start.beginLine);
            ImplementsList6.setBeginColumn(start.beginColumn);
            ImplementsList6.setInputSource(this.getInputSource());
            openNodeScope(ImplementsList6);
            openNodeScopeHook(ImplementsList6);
        }
        ParseException parseException6=null;
        try {
            // Code for expansion specified on line 790 of Java.javacc
            consumeToken(48);
            // Code for ClassOrInterfaceType specified on line 790 of Java.javacc
            ClassOrInterfaceType();
            // Code for expansion specified on line 791 of Java.javacc
            label_14:
            while (true) {
                int int11=nextTokenKind();
                if (!(int11==98)) {
                    break label_14;
                }
                // Code for expansion specified on line 791 of Java.javacc
                // Code for expansion specified on line 791 of Java.javacc
                consumeToken(98);
                // Code for ClassOrInterfaceType specified on line 791 of Java.javacc
                ClassOrInterfaceType();
            }
            // Code for expansion specified on line 792 of Java.javacc
            if (isInterface) {
                throw new ParseException("An interface cannot implement other interfaces");
            }
            return ImplementsList6;
        }
        catch(ParseException e) {
            parseException6=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException6!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException6.getMessage());
                    clearNodeScope();
                }
                else {
                    ImplementsList6.setEndLine(current_token.getEndLine());
                    ImplementsList6.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(ImplementsList6,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 827
    final public void EnumDeclaration() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 827 of Java.javacc");
        // Code for expansion specified on line 830 of Java.javacc
        boolean EnumDeclaration7forced=false;
        EnumDeclaration EnumDeclaration7=null;
        if (buildTree) {
            EnumDeclaration7=new EnumDeclaration();
            Token start=getToken(1);
            EnumDeclaration7.setBeginLine(start.beginLine);
            EnumDeclaration7.setBeginColumn(start.beginColumn);
            EnumDeclaration7.setInputSource(this.getInputSource());
            openNodeScope(EnumDeclaration7);
            openNodeScopeHook(EnumDeclaration7);
        }
        ParseException parseException7=null;
        try {
            // Code for expansion specified on line 830 of Java.javacc
            consumeToken(39);
            // Code for expansion specified on line 830 of Java.javacc
            consumeToken(IDENTIFIER);
            // Code for expansion specified on line 831 of Java.javacc
            int int12=nextTokenKind();
            if (int12==48) {
                // Code for expansion specified on line 831 of Java.javacc
                // Code for ImplementsList specified on line 831 of Java.javacc
                ImplementsList(false);
            }
            // Code for EnumBody specified on line 832 of Java.javacc
            EnumBody();
            if (trace_enabled) LOGGER.info("Exiting normally from EnumDeclaration");
        }
        catch(ParseException e) {
            parseException7=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException7!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException7.getMessage());
                    clearNodeScope();
                }
                else {
                    EnumDeclaration7.setEndLine(current_token.getEndLine());
                    EnumDeclaration7.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(EnumDeclaration7,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 835
    final public void EnumBody() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 835 of Java.javacc");
        // Code for expansion specified on line 838 of Java.javacc
        boolean EnumBody8forced=false;
        EnumBody EnumBody8=null;
        if (buildTree) {
            EnumBody8=new EnumBody();
            Token start=getToken(1);
            EnumBody8.setBeginLine(start.beginLine);
            EnumBody8.setBeginColumn(start.beginColumn);
            EnumBody8.setInputSource(this.getInputSource());
            openNodeScope(EnumBody8);
            openNodeScopeHook(EnumBody8);
        }
        ParseException parseException8=null;
        try {
            // Code for expansion specified on line 838 of Java.javacc
            consumeToken(93);
            // Code for expansion specified on line 839 of Java.javacc
            int int13=nextTokenKind();
            if (int13==24||int13==42||int13==54||int13==58||int13==59||int13==60||int13==63||int13==64||int13==67||int13==71||int13==75||int13==138||int13==IDENTIFIER) {
                // Code for expansion specified on line 839 of Java.javacc
                // Code for EnumConstant specified on line 839 of Java.javacc
                EnumConstant();
                // Code for expansion specified on line 839 of Java.javacc
                label_17:
                while (true) {
                    if (!(phase2_4(2))) {
                        break label_17;
                    }
                    // Code for expansion specified on line 839 of Java.javacc
                    // Code for expansion specified on line 839 of Java.javacc
                    consumeToken(98);
                    // Code for EnumConstant specified on line 839 of Java.javacc
                    EnumConstant();
                }
            }
            // Code for expansion specified on line 840 of Java.javacc
            int int14=nextTokenKind();
            if (int14==98) {
                // Code for expansion specified on line 840 of Java.javacc
                // Code for expansion specified on line 840 of Java.javacc
                consumeToken(98);
            }
            // Code for expansion specified on line 841 of Java.javacc
            int int16=nextTokenKind();
            if (int16==97) {
                // Code for expansion specified on line 841 of Java.javacc
                // Code for expansion specified on line 841 of Java.javacc
                consumeToken(97);
                // Code for expansion specified on line 841 of Java.javacc
                label_20:
                while (true) {
                    int int15=nextTokenKind();
                    if (!(int15==24||int15==26||int15==28||int15==31||int15==32||int15==35||int15==37||int15==39||int15==42||int15==44||int15==51||int15==52||int15==53||int15==54||int15==58||int15==59||int15==60||int15==62||int15==63||int15==64||int15==67||int15==71||int15==74||int15==75||int15==93||int15==97||int15==102||int15==138||int15==IDENTIFIER)) {
                        break label_20;
                    }
                    // Code for expansion specified on line 841 of Java.javacc
                    // Code for ClassOrInterfaceBodyDeclaration specified on line 841 of Java.javacc
                    ClassOrInterfaceBodyDeclaration(false);
                }
            }
            // Code for expansion specified on line 842 of Java.javacc
            consumeToken(94);
            if (trace_enabled) LOGGER.info("Exiting normally from EnumBody");
        }
        catch(ParseException e) {
            parseException8=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException8!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException8.getMessage());
                    clearNodeScope();
                }
                else {
                    EnumBody8.setEndLine(current_token.getEndLine());
                    EnumBody8.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(EnumBody8,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 845
    final public void EnumConstant() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 845 of Java.javacc");
        // Code for expansion specified on line 848 of Java.javacc
        boolean EnumConstant9forced=false;
        EnumConstant EnumConstant9=null;
        if (buildTree) {
            EnumConstant9=new EnumConstant();
            Token start=getToken(1);
            EnumConstant9.setBeginLine(start.beginLine);
            EnumConstant9.setBeginColumn(start.beginColumn);
            EnumConstant9.setInputSource(this.getInputSource());
            openNodeScope(EnumConstant9);
            openNodeScopeHook(EnumConstant9);
        }
        ParseException parseException9=null;
        try {
            // Code for Modifiers specified on line 848 of Java.javacc
            Modifiers();
            // Code for expansion specified on line 848 of Java.javacc
            consumeToken(IDENTIFIER);
            // Code for expansion specified on line 848 of Java.javacc
            int int17=nextTokenKind();
            if (int17==91) {
                // Code for expansion specified on line 848 of Java.javacc
                // Code for Arguments specified on line 848 of Java.javacc
                Arguments();
            }
            // Code for expansion specified on line 848 of Java.javacc
            int int18=nextTokenKind();
            if (int18==93) {
                // Code for expansion specified on line 848 of Java.javacc
                // Code for ClassOrInterfaceBody specified on line 848 of Java.javacc
                ClassOrInterfaceBody(false);
            }
            if (trace_enabled) LOGGER.info("Exiting normally from EnumConstant");
        }
        catch(ParseException e) {
            parseException9=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException9!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException9.getMessage());
                    clearNodeScope();
                }
                else {
                    EnumConstant9.setEndLine(current_token.getEndLine());
                    EnumConstant9.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(EnumConstant9,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 851
    final public TypeParameterList TypeParameters() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 851 of Java.javacc");
        // Code for expansion specified on line 854 of Java.javacc
        boolean TypeParameters10forced=false;
        TypeParameterList TypeParameters10=null;
        if (buildTree) {
            TypeParameters10=new TypeParameterList();
            Token start=getToken(1);
            TypeParameters10.setBeginLine(start.beginLine);
            TypeParameters10.setBeginColumn(start.beginColumn);
            TypeParameters10.setInputSource(this.getInputSource());
            openNodeScope(TypeParameters10);
            openNodeScopeHook(TypeParameters10);
        }
        ParseException parseException10=null;
        try {
            // Code for expansion specified on line 854 of Java.javacc
            consumeToken(102);
            // Code for TypeParameter specified on line 855 of Java.javacc
            TypeParameter();
            // Code for expansion specified on line 855 of Java.javacc
            label_23:
            while (true) {
                int int19=nextTokenKind();
                if (!(int19==98)) {
                    break label_23;
                }
                // Code for expansion specified on line 855 of Java.javacc
                // Code for expansion specified on line 855 of Java.javacc
                consumeToken(98);
                // Code for TypeParameter specified on line 855 of Java.javacc
                TypeParameter();
            }
            // Code for expansion specified on line 856 of Java.javacc
            consumeToken(101);
            // Code for expansion specified on line 857 of Java.javacc
            return TypeParameters10;
        }
        catch(ParseException e) {
            parseException10=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException10!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException10.getMessage());
                    clearNodeScope();
                }
                else {
                    TypeParameters10.setEndLine(current_token.getEndLine());
                    TypeParameters10.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(TypeParameters10,true);
                }
            }
        }
    }

    // Java.javacc, line 891
    final public void TypeParameter() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 891 of Java.javacc");
        // Code for expansion specified on line 894 of Java.javacc
        boolean TypeParameter11forced=false;
        TypeParameter TypeParameter11=null;
        if (buildTree) {
            TypeParameter11=new TypeParameter();
            Token start=getToken(1);
            TypeParameter11.setBeginLine(start.beginLine);
            TypeParameter11.setBeginColumn(start.beginColumn);
            TypeParameter11.setInputSource(this.getInputSource());
            openNodeScope(TypeParameter11);
            openNodeScopeHook(TypeParameter11);
        }
        ParseException parseException11=null;
        try {
            // Code for expansion specified on line 894 of Java.javacc
            consumeToken(IDENTIFIER);
            // Code for expansion specified on line 894 of Java.javacc
            int int20=nextTokenKind();
            if (int20==40) {
                // Code for expansion specified on line 894 of Java.javacc
                // Code for TypeBound specified on line 894 of Java.javacc
                TypeBound();
            }
            if (trace_enabled) LOGGER.info("Exiting normally from TypeParameter");
        }
        catch(ParseException e) {
            parseException11=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException11!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException11.getMessage());
                    clearNodeScope();
                }
                else {
                    TypeParameter11.setEndLine(current_token.getEndLine());
                    TypeParameter11.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(TypeParameter11,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 897
    final public void TypeBound() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 897 of Java.javacc");
        // Code for expansion specified on line 900 of Java.javacc
        boolean TypeBound12forced=false;
        TypeBound TypeBound12=null;
        if (buildTree) {
            TypeBound12=new TypeBound();
            Token start=getToken(1);
            TypeBound12.setBeginLine(start.beginLine);
            TypeBound12.setBeginColumn(start.beginColumn);
            TypeBound12.setInputSource(this.getInputSource());
            openNodeScope(TypeBound12);
            openNodeScopeHook(TypeBound12);
        }
        ParseException parseException12=null;
        try {
            // Code for expansion specified on line 900 of Java.javacc
            consumeToken(40);
            // Code for ClassOrInterfaceType specified on line 900 of Java.javacc
            ClassOrInterfaceType();
            // Code for expansion specified on line 900 of Java.javacc
            label_25:
            while (true) {
                int int21=nextTokenKind();
                if (!(int21==119)) {
                    break label_25;
                }
                // Code for expansion specified on line 900 of Java.javacc
                // Code for expansion specified on line 900 of Java.javacc
                consumeToken(119);
                // Code for ClassOrInterfaceType specified on line 900 of Java.javacc
                ClassOrInterfaceType();
            }
            if (trace_enabled) LOGGER.info("Exiting normally from TypeBound");
        }
        catch(ParseException e) {
            parseException12=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException12!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException12.getMessage());
                    clearNodeScope();
                }
                else {
                    TypeBound12.setEndLine(current_token.getEndLine());
                    TypeBound12.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(TypeBound12,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 903
    final public ClassOrInterfaceBody ClassOrInterfaceBody(boolean isInterface) throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 903 of Java.javacc");
        // Code for expansion specified on line 906 of Java.javacc
        boolean ClassOrInterfaceBody13forced=false;
        ClassOrInterfaceBody ClassOrInterfaceBody13=null;
        if (buildTree) {
            ClassOrInterfaceBody13=new ClassOrInterfaceBody();
            Token start=getToken(1);
            ClassOrInterfaceBody13.setBeginLine(start.beginLine);
            ClassOrInterfaceBody13.setBeginColumn(start.beginColumn);
            ClassOrInterfaceBody13.setInputSource(this.getInputSource());
            openNodeScope(ClassOrInterfaceBody13);
            openNodeScopeHook(ClassOrInterfaceBody13);
        }
        ParseException parseException13=null;
        try {
            // Code for expansion specified on line 906 of Java.javacc
            consumeToken(93);
            // Code for expansion specified on line 909 of Java.javacc
            label_26:
            while (true) {
                int int22=nextTokenKind();
                if (!(int22==24||int22==26||int22==28||int22==31||int22==32||int22==35||int22==37||int22==39||int22==42||int22==44||int22==51||int22==52||int22==53||int22==54||int22==58||int22==59||int22==60||int22==62||int22==63||int22==64||int22==67||int22==71||int22==74||int22==75||int22==93||int22==97||int22==102||int22==138||int22==IDENTIFIER)) {
                    break label_26;
                }
                // Code for expansion specified on line 908 of Java.javacc
                // Code for ClassOrInterfaceBodyDeclaration specified on line 908 of Java.javacc
                ClassOrInterfaceBodyDeclaration(isInterface);
            }
            // Code for expansion specified on line 910 of Java.javacc
            consumeToken(94);
            // Code for expansion specified on line 911 of Java.javacc
            return ClassOrInterfaceBody13;
        }
        catch(ParseException e) {
            parseException13=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException13!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException13.getMessage());
                    clearNodeScope();
                }
                else {
                    ClassOrInterfaceBody13.setEndLine(current_token.getEndLine());
                    ClassOrInterfaceBody13.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(ClassOrInterfaceBody13,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 963
    final public void ClassOrInterfaceBodyDeclaration(boolean isInterface) throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 963 of Java.javacc");
        // Code for expansion specified on line 966 of Java.javacc
        boolean ClassOrInterfaceBodyDeclaration14forced=false;
        ClassOrInterfaceBodyDeclaration ClassOrInterfaceBodyDeclaration14=null;
        if (buildTree) {
            ClassOrInterfaceBodyDeclaration14=new ClassOrInterfaceBodyDeclaration();
            Token start=getToken(1);
            ClassOrInterfaceBodyDeclaration14.setBeginLine(start.beginLine);
            ClassOrInterfaceBodyDeclaration14.setBeginColumn(start.beginColumn);
            ClassOrInterfaceBodyDeclaration14.setInputSource(this.getInputSource());
            openNodeScope(ClassOrInterfaceBodyDeclaration14);
            openNodeScopeHook(ClassOrInterfaceBodyDeclaration14);
        }
        ParseException parseException14=null;
        try {
            if (phase2_7(2)) {
                // Code for expansion specified on line 966 of Java.javacc
                // Code for Initializer specified on line 967 of Java.javacc
                Initializer();
                // Code for expansion specified on line 968 of Java.javacc
                if (isInterface) throw new ParseException("An interface cannot have initializers");
            }
            else {
                switch(nextTokenKind()) {
                    case 24:
                    case 26:
                    case 28:
                    case 31:
                    case 32:
                    case 35:
                    case 37:
                    case 39:
                    case 42:
                    case 44:
                    case 51:
                    case 52:
                    case 53:
                    case 54:
                    case 58:
                    case 59:
                    case 60:
                    case 62:
                    case 63:
                    case 64:
                    case 67:
                    case 71:
                    case 74:
                    case 75:
                    case 102:
                    case 138:
                    case IDENTIFIER:
                    // Code for expansion specified on line 973 of Java.javacc
                    // Code for Modifiers2 specified on line 973 of Java.javacc
                    Modifiers2();
                    // Code for expansion specified on line 976 of Java.javacc
                    switch(nextTokenKind()) {
                        case 32:
                        // Code for expansion specified on line 976 of Java.javacc
                        // Code for ClassDeclaration specified on line 976 of Java.javacc
                        ClassDeclaration();
                        break;
                        case 52:
                        // Code for expansion specified on line 978 of Java.javacc
                        // Code for InterfaceDeclaration specified on line 978 of Java.javacc
                        InterfaceDeclaration();
                        break;
                        case 138:
                        // Code for expansion specified on line 980 of Java.javacc
                        // Code for AnnotationTypeDeclaration specified on line 980 of Java.javacc
                        AnnotationTypeDeclaration();
                        break;
                        case 39:
                        // Code for expansion specified on line 982 of Java.javacc
                        // Code for EnumDeclaration specified on line 982 of Java.javacc
                        EnumDeclaration();
                        break;
                        default:
                        if (phase2_5(INFINITY)) {
                            // Code for expansion specified on line 984 of Java.javacc
                            // Code for ConstructorDeclaration specified on line 985 of Java.javacc
                            ConstructorDeclaration();
                        }
                        else if (phase2_6(INFINITY)) {
                            // Code for expansion specified on line 987 of Java.javacc
                            // Code for FieldDeclaration specified on line 988 of Java.javacc
                            FieldDeclaration();
                        }
                        else {
                            switch(nextTokenKind()) {
                                case 26:
                                case 28:
                                case 31:
                                case 37:
                                case 44:
                                case 51:
                                case 53:
                                case 62:
                                case 74:
                                case 102:
                                case IDENTIFIER:
                                // Code for expansion specified on line 990 of Java.javacc
                                // Code for MethodDeclaration specified on line 990 of Java.javacc
                                MethodDeclaration();
                                break;
                                default:
                                consumeToken(-1);
                                throw new ParseException();
                            }
                        }
                    }
                    break;
                    case 97:
                    // Code for expansion specified on line 993 of Java.javacc
                    // Code for expansion specified on line 993 of Java.javacc
                    consumeToken(97);
                    break;
                    default:
                    consumeToken(-1);
                    throw new ParseException();
                }
            }
            if (trace_enabled) LOGGER.info("Exiting normally from ClassOrInterfaceBodyDeclaration");
        }
        catch(ParseException e) {
            parseException14=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException14!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException14.getMessage());
                    clearNodeScope();
                }
                else {
                    ClassOrInterfaceBodyDeclaration14.setEndLine(current_token.getEndLine());
                    ClassOrInterfaceBodyDeclaration14.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(ClassOrInterfaceBodyDeclaration14,true);
                }
            }
        }
    }

    // Java.javacc, line 1008
    final public void FieldDeclaration() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1008 of Java.javacc");
        // Code for expansion specified on line 1012 of Java.javacc
        boolean FieldDeclaration15forced=false;
        FieldDeclaration FieldDeclaration15=null;
        if (buildTree) {
            FieldDeclaration15=new FieldDeclaration();
            Token start=getToken(1);
            FieldDeclaration15.setBeginLine(start.beginLine);
            FieldDeclaration15.setBeginColumn(start.beginColumn);
            FieldDeclaration15.setInputSource(this.getInputSource());
            openNodeScope(FieldDeclaration15);
            openNodeScopeHook(FieldDeclaration15);
        }
        ParseException parseException15=null;
        try {
            // Code for Type specified on line 1012 of Java.javacc
            Type();
            // Code for VariableDeclarator specified on line 1012 of Java.javacc
            VariableDeclarator();
            // Code for expansion specified on line 1012 of Java.javacc
            label_27:
            while (true) {
                int int23=nextTokenKind();
                if (!(int23==98)) {
                    break label_27;
                }
                // Code for expansion specified on line 1012 of Java.javacc
                // Code for expansion specified on line 1012 of Java.javacc
                consumeToken(98);
                // Code for VariableDeclarator specified on line 1012 of Java.javacc
                VariableDeclarator();
            }
            // Code for expansion specified on line 1012 of Java.javacc
            consumeToken(97);
            if (trace_enabled) LOGGER.info("Exiting normally from FieldDeclaration");
        }
        catch(ParseException e) {
            parseException15=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException15!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException15.getMessage());
                    clearNodeScope();
                }
                else {
                    FieldDeclaration15.setEndLine(current_token.getEndLine());
                    FieldDeclaration15.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(FieldDeclaration15,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 1015
    final public void VariableDeclarator() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1015 of Java.javacc");
        // Code for expansion specified on line 1018 of Java.javacc
        boolean VariableDeclarator16forced=false;
        VariableDeclarator VariableDeclarator16=null;
        if (buildTree) {
            VariableDeclarator16=new VariableDeclarator();
            Token start=getToken(1);
            VariableDeclarator16.setBeginLine(start.beginLine);
            VariableDeclarator16.setBeginColumn(start.beginColumn);
            VariableDeclarator16.setInputSource(this.getInputSource());
            openNodeScope(VariableDeclarator16);
            openNodeScopeHook(VariableDeclarator16);
        }
        ParseException parseException16=null;
        try {
            // Code for VariableDeclaratorId specified on line 1018 of Java.javacc
            VariableDeclaratorId();
            // Code for expansion specified on line 1018 of Java.javacc
            int int24=nextTokenKind();
            if (int24==100) {
                // Code for expansion specified on line 1018 of Java.javacc
                // Code for expansion specified on line 1018 of Java.javacc
                consumeToken(100);
                // Code for VariableInitializer specified on line 1018 of Java.javacc
                VariableInitializer();
            }
            if (trace_enabled) LOGGER.info("Exiting normally from VariableDeclarator");
        }
        catch(ParseException e) {
            parseException16=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException16!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException16.getMessage());
                    clearNodeScope();
                }
                else {
                    VariableDeclarator16.setEndLine(current_token.getEndLine());
                    VariableDeclarator16.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(VariableDeclarator16,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 1021
    final public void VariableDeclaratorId() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1021 of Java.javacc");
        // Code for expansion specified on line 1024 of Java.javacc
        boolean VariableDeclaratorId17forced=false;
        VariableDeclaratorId VariableDeclaratorId17=null;
        if (buildTree) {
            VariableDeclaratorId17=new VariableDeclaratorId();
            Token start=getToken(1);
            VariableDeclaratorId17.setBeginLine(start.beginLine);
            VariableDeclaratorId17.setBeginColumn(start.beginColumn);
            VariableDeclaratorId17.setInputSource(this.getInputSource());
            openNodeScope(VariableDeclaratorId17);
            openNodeScopeHook(VariableDeclaratorId17);
        }
        ParseException parseException17=null;
        try {
            // Code for expansion specified on line 1024 of Java.javacc
            consumeToken(IDENTIFIER);
            // Code for expansion specified on line 1024 of Java.javacc
            label_29:
            while (true) {
                int int25=nextTokenKind();
                if (!(int25==95)) {
                    break label_29;
                }
                // Code for expansion specified on line 1024 of Java.javacc
                // Code for expansion specified on line 1024 of Java.javacc
                consumeToken(95);
                // Code for expansion specified on line 1024 of Java.javacc
                consumeToken(96);
            }
            if (trace_enabled) LOGGER.info("Exiting normally from VariableDeclaratorId");
        }
        catch(ParseException e) {
            parseException17=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException17!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException17.getMessage());
                    clearNodeScope();
                }
                else {
                    VariableDeclaratorId17.setEndLine(current_token.getEndLine());
                    VariableDeclaratorId17.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(VariableDeclaratorId17,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 1027
    final public void VariableInitializer() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1027 of Java.javacc");
        // Code for expansion specified on line 1030 of Java.javacc
        boolean VariableInitializer18forced=false;
        VariableInitializer VariableInitializer18=null;
        if (buildTree) {
            VariableInitializer18=new VariableInitializer();
            Token start=getToken(1);
            VariableInitializer18.setBeginLine(start.beginLine);
            VariableInitializer18.setBeginColumn(start.beginColumn);
            VariableInitializer18.setInputSource(this.getInputSource());
            openNodeScope(VariableInitializer18);
            openNodeScopeHook(VariableInitializer18);
        }
        ParseException parseException18=null;
        try {
            switch(nextTokenKind()) {
                case 93:
                // Code for expansion specified on line 1030 of Java.javacc
                // Code for ArrayInitializer specified on line 1030 of Java.javacc
                ArrayInitializer();
                break;
                case 26:
                case 28:
                case 31:
                case 37:
                case 41:
                case 44:
                case 51:
                case 53:
                case 55:
                case 56:
                case 62:
                case 65:
                case 68:
                case 72:
                case 74:
                case LONG_LITERAL:
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case 91:
                case 103:
                case 104:
                case 113:
                case 114:
                case 115:
                case 116:
                case IDENTIFIER:
                // Code for expansion specified on line 1032 of Java.javacc
                // Code for Expression specified on line 1032 of Java.javacc
                Expression();
                break;
                default:
                consumeToken(-1);
                throw new ParseException();
            }
            if (trace_enabled) LOGGER.info("Exiting normally from VariableInitializer");
        }
        catch(ParseException e) {
            parseException18=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException18!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException18.getMessage());
                    clearNodeScope();
                }
                else {
                    VariableInitializer18.setEndLine(current_token.getEndLine());
                    VariableInitializer18.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(VariableInitializer18,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 1035
    final public void ArrayInitializer() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1035 of Java.javacc");
        // Code for expansion specified on line 1038 of Java.javacc
        boolean ArrayInitializer19forced=false;
        ArrayInitializer ArrayInitializer19=null;
        if (buildTree) {
            ArrayInitializer19=new ArrayInitializer();
            Token start=getToken(1);
            ArrayInitializer19.setBeginLine(start.beginLine);
            ArrayInitializer19.setBeginColumn(start.beginColumn);
            ArrayInitializer19.setInputSource(this.getInputSource());
            openNodeScope(ArrayInitializer19);
            openNodeScopeHook(ArrayInitializer19);
        }
        ParseException parseException19=null;
        try {
            // Code for expansion specified on line 1038 of Java.javacc
            consumeToken(93);
            // Code for expansion specified on line 1038 of Java.javacc
            int int26=nextTokenKind();
            if (int26==26||int26==28||int26==31||int26==37||int26==41||int26==44||int26==51||int26==53||int26==55||int26==56||int26==62||int26==65||int26==68||int26==72||int26==74||int26==LONG_LITERAL||int26==INTEGER_LITERAL||int26==FLOATING_POINT_LITERAL||int26==CHARACTER_LITERAL||int26==STRING_LITERAL||int26==91||int26==93||int26==103||int26==104||int26==113||int26==114||int26==115||int26==116||int26==IDENTIFIER) {
                // Code for expansion specified on line 1038 of Java.javacc
                // Code for VariableInitializer specified on line 1038 of Java.javacc
                VariableInitializer();
                // Code for expansion specified on line 1038 of Java.javacc
                label_31:
                while (true) {
                    if (!(phase2_8(2))) {
                        break label_31;
                    }
                    // Code for expansion specified on line 1038 of Java.javacc
                    // Code for expansion specified on line 1038 of Java.javacc
                    consumeToken(98);
                    // Code for VariableInitializer specified on line 1038 of Java.javacc
                    VariableInitializer();
                }
            }
            // Code for expansion specified on line 1038 of Java.javacc
            int int27=nextTokenKind();
            if (int27==98) {
                // Code for expansion specified on line 1038 of Java.javacc
                // Code for expansion specified on line 1038 of Java.javacc
                consumeToken(98);
            }
            // Code for expansion specified on line 1038 of Java.javacc
            consumeToken(94);
            if (trace_enabled) LOGGER.info("Exiting normally from ArrayInitializer");
        }
        catch(ParseException e) {
            parseException19=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException19!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException19.getMessage());
                    clearNodeScope();
                }
                else {
                    ArrayInitializer19.setEndLine(current_token.getEndLine());
                    ArrayInitializer19.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(ArrayInitializer19,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 1041
    final public void MethodDeclaration() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1041 of Java.javacc");
        // Code for expansion specified on line 1045 of Java.javacc
        boolean MethodDeclaration20forced=false;
        MethodDeclaration MethodDeclaration20=null;
        if (buildTree) {
            MethodDeclaration20=new MethodDeclaration();
            Token start=getToken(1);
            MethodDeclaration20.setBeginLine(start.beginLine);
            MethodDeclaration20.setBeginColumn(start.beginColumn);
            MethodDeclaration20.setInputSource(this.getInputSource());
            openNodeScope(MethodDeclaration20);
            openNodeScopeHook(MethodDeclaration20);
        }
        ParseException parseException20=null;
        try {
            // Code for expansion specified on line 1045 of Java.javacc
            int int28=nextTokenKind();
            if (int28==102) {
                // Code for expansion specified on line 1045 of Java.javacc
                // Code for TypeParameters specified on line 1045 of Java.javacc
                TypeParameters();
            }
            // Code for ReturnType specified on line 1046 of Java.javacc
            ReturnType();
            // Code for MethodDeclarator specified on line 1047 of Java.javacc
            MethodDeclarator();
            // Code for expansion specified on line 1047 of Java.javacc
            int int29=nextTokenKind();
            if (int29==70) {
                // Code for expansion specified on line 1047 of Java.javacc
                // Code for ThrowsList specified on line 1047 of Java.javacc
                ThrowsList();
            }
            // Code for expansion specified on line 1048 of Java.javacc
            switch(nextTokenKind()) {
                case 93:
                // Code for expansion specified on line 1048 of Java.javacc
                // Code for Block specified on line 1048 of Java.javacc
                Block();
                break;
                case 97:
                // Code for expansion specified on line 1048 of Java.javacc
                // Code for expansion specified on line 1048 of Java.javacc
                consumeToken(97);
                break;
                default:
                consumeToken(-1);
                throw new ParseException();
            }
            if (trace_enabled) LOGGER.info("Exiting normally from MethodDeclaration");
        }
        catch(ParseException e) {
            parseException20=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException20!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException20.getMessage());
                    clearNodeScope();
                }
                else {
                    MethodDeclaration20.setEndLine(current_token.getEndLine());
                    MethodDeclaration20.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(MethodDeclaration20,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 1071
    final public void MethodDeclarator() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1071 of Java.javacc");
        // Code for expansion specified on line 1074 of Java.javacc
        // Code for expansion specified on line 1074 of Java.javacc
        consumeToken(IDENTIFIER);
        // Code for FormalParameters specified on line 1074 of Java.javacc
        FormalParameters();
        // Code for expansion specified on line 1074 of Java.javacc
        label_35:
        while (true) {
            int int30=nextTokenKind();
            if (!(int30==95)) {
                break label_35;
            }
            // Code for expansion specified on line 1074 of Java.javacc
            // Code for expansion specified on line 1074 of Java.javacc
            consumeToken(95);
            // Code for expansion specified on line 1074 of Java.javacc
            consumeToken(96);
        }
        if (trace_enabled) LOGGER.info("Exiting normally from MethodDeclarator");
    }

    // Java.javacc, line 1077
    final public FormalParams FormalParameters() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1077 of Java.javacc");
        // Code for expansion specified on line 1080 of Java.javacc
        boolean FormalParameters21forced=false;
        FormalParams FormalParameters21=null;
        if (buildTree) {
            FormalParameters21=new FormalParams();
            Token start=getToken(1);
            FormalParameters21.setBeginLine(start.beginLine);
            FormalParameters21.setBeginColumn(start.beginColumn);
            FormalParameters21.setInputSource(this.getInputSource());
            openNodeScope(FormalParameters21);
            openNodeScopeHook(FormalParameters21);
        }
        ParseException parseException21=null;
        try {
            // Code for expansion specified on line 1080 of Java.javacc
            consumeToken(91);
            // Code for expansion specified on line 1081 of Java.javacc
            int int32=nextTokenKind();
            if (int32==24||int32==26||int32==28||int32==31||int32==37||int32==42||int32==44||int32==51||int32==53||int32==54||int32==58||int32==59||int32==60||int32==62||int32==63||int32==64||int32==67||int32==71||int32==75||int32==138||int32==IDENTIFIER) {
                // Code for expansion specified on line 1081 of Java.javacc
                // Code for FormalParameter specified on line 1081 of Java.javacc
                FormalParameter();
                // Code for expansion specified on line 1081 of Java.javacc
                label_37:
                while (true) {
                    int int31=nextTokenKind();
                    if (!(int31==98)) {
                        break label_37;
                    }
                    // Code for expansion specified on line 1081 of Java.javacc
                    // Code for expansion specified on line 1081 of Java.javacc
                    consumeToken(98);
                    // Code for FormalParameter specified on line 1081 of Java.javacc
                    FormalParameter();
                }
            }
            // Code for expansion specified on line 1082 of Java.javacc
            consumeToken(92);
            // Code for expansion specified on line 1083 of Java.javacc
            return FormalParameters21;
        }
        catch(ParseException e) {
            parseException21=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException21!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException21.getMessage());
                    clearNodeScope();
                }
                else {
                    FormalParameters21.setEndLine(current_token.getEndLine());
                    FormalParameters21.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(FormalParameters21,true);
                }
            }
        }
    }

    // Java.javacc, line 1121
    final public FormalParameter FormalParameter() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1121 of Java.javacc");
        // Code for expansion specified on line 1124 of Java.javacc
        boolean FormalParameter22forced=false;
        FormalParameter FormalParameter22=null;
        if (buildTree) {
            FormalParameter22=new FormalParameter();
            Token start=getToken(1);
            FormalParameter22.setBeginLine(start.beginLine);
            FormalParameter22.setBeginColumn(start.beginColumn);
            FormalParameter22.setInputSource(this.getInputSource());
            openNodeScope(FormalParameter22);
            openNodeScopeHook(FormalParameter22);
        }
        ParseException parseException22=null;
        try {
            // Code for Modifiers specified on line 1124 of Java.javacc
            Modifiers();
            // Code for Type specified on line 1124 of Java.javacc
            Type();
            // Code for expansion specified on line 1124 of Java.javacc
            int int33=nextTokenKind();
            if (int33==137) {
                // Code for expansion specified on line 1124 of Java.javacc
                // Code for expansion specified on line 1124 of Java.javacc
                consumeToken(137);
            }
            // Code for VariableDeclaratorId specified on line 1124 of Java.javacc
            VariableDeclaratorId();
            // Code for expansion specified on line 1125 of Java.javacc
            return FormalParameter22;
        }
        catch(ParseException e) {
            parseException22=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException22!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException22.getMessage());
                    clearNodeScope();
                }
                else {
                    FormalParameter22.setEndLine(current_token.getEndLine());
                    FormalParameter22.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(FormalParameter22,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 1130
    final public void ConstructorDeclaration() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1130 of Java.javacc");
        // Code for expansion specified on line 1133 of Java.javacc
        boolean ConstructorDeclaration23forced=false;
        ConstructorDeclaration ConstructorDeclaration23=null;
        if (buildTree) {
            ConstructorDeclaration23=new ConstructorDeclaration();
            Token start=getToken(1);
            ConstructorDeclaration23.setBeginLine(start.beginLine);
            ConstructorDeclaration23.setBeginColumn(start.beginColumn);
            ConstructorDeclaration23.setInputSource(this.getInputSource());
            openNodeScope(ConstructorDeclaration23);
            openNodeScopeHook(ConstructorDeclaration23);
        }
        ParseException parseException23=null;
        try {
            // Code for expansion specified on line 1133 of Java.javacc
            int int34=nextTokenKind();
            if (int34==102) {
                // Code for expansion specified on line 1133 of Java.javacc
                // Code for TypeParameters specified on line 1133 of Java.javacc
                TypeParameters();
            }
            // Code for expansion specified on line 1135 of Java.javacc
            consumeToken(IDENTIFIER);
            // Code for FormalParameters specified on line 1135 of Java.javacc
            FormalParameters();
            // Code for expansion specified on line 1135 of Java.javacc
            int int35=nextTokenKind();
            if (int35==70) {
                // Code for expansion specified on line 1135 of Java.javacc
                // Code for ThrowsList specified on line 1135 of Java.javacc
                ThrowsList();
            }
            // Code for expansion specified on line 1136 of Java.javacc
            consumeToken(93);
            // Code for expansion specified on line 1137 of Java.javacc
            if (phase2_9(INFINITY)) {
                // Code for expansion specified on line 1137 of Java.javacc
                // Code for ExplicitConstructorInvocation specified on line 1137 of Java.javacc
                ExplicitConstructorInvocation();
            }
            // Code for expansion specified on line 1138 of Java.javacc
            label_42:
            while (true) {
                int int36=nextTokenKind();
                if (!(int36==24||int36==25||int36==26||int36==27||int36==28||int36==31||int36==32||int36==34||int36==36||int36==37||int36==41||int36==42||int36==44||int36==45||int36==47||int36==51||int36==52||int36==53||int36==54||int36==55||int36==56||int36==58||int36==59||int36==60||int36==61||int36==62||int36==63||int36==64||int36==65||int36==66||int36==67||int36==68||int36==69||int36==71||int36==72||int36==73||int36==74||int36==75||int36==76||int36==LONG_LITERAL||int36==INTEGER_LITERAL||int36==FLOATING_POINT_LITERAL||int36==CHARACTER_LITERAL||int36==STRING_LITERAL||int36==91||int36==93||int36==97||int36==113||int36==114||int36==138||int36==IDENTIFIER)) {
                    break label_42;
                }
                // Code for expansion specified on line 1138 of Java.javacc
                // Code for BlockStatement specified on line 1138 of Java.javacc
                BlockStatement();
            }
            // Code for expansion specified on line 1139 of Java.javacc
            consumeToken(94);
            if (trace_enabled) LOGGER.info("Exiting normally from ConstructorDeclaration");
        }
        catch(ParseException e) {
            parseException23=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException23!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException23.getMessage());
                    clearNodeScope();
                }
                else {
                    ConstructorDeclaration23.setEndLine(current_token.getEndLine());
                    ConstructorDeclaration23.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(ConstructorDeclaration23,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 1142
    final public void ExplicitConstructorInvocation() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1142 of Java.javacc");
        // Code for expansion specified on line 1145 of Java.javacc
        boolean ExplicitConstructorInvocation24forced=false;
        ExplicitConstructorInvocation ExplicitConstructorInvocation24=null;
        if (buildTree) {
            ExplicitConstructorInvocation24=new ExplicitConstructorInvocation();
            Token start=getToken(1);
            ExplicitConstructorInvocation24.setBeginLine(start.beginLine);
            ExplicitConstructorInvocation24.setBeginColumn(start.beginColumn);
            ExplicitConstructorInvocation24.setInputSource(this.getInputSource());
            openNodeScope(ExplicitConstructorInvocation24);
            openNodeScopeHook(ExplicitConstructorInvocation24);
        }
        ParseException parseException24=null;
        try {
            if (phase2_11(INFINITY)) {
                // Code for expansion specified on line 1145 of Java.javacc
                // Code for expansion specified on line 1146 of Java.javacc
                consumeToken(68);
                // Code for Arguments specified on line 1146 of Java.javacc
                Arguments();
                // Code for expansion specified on line 1146 of Java.javacc
                consumeToken(97);
            }
            else {
                switch(nextTokenKind()) {
                    case 26:
                    case 28:
                    case 31:
                    case 37:
                    case 41:
                    case 44:
                    case 51:
                    case 53:
                    case 55:
                    case 56:
                    case 62:
                    case 65:
                    case 68:
                    case 72:
                    case 74:
                    case LONG_LITERAL:
                    case INTEGER_LITERAL:
                    case FLOATING_POINT_LITERAL:
                    case CHARACTER_LITERAL:
                    case STRING_LITERAL:
                    case 91:
                    case IDENTIFIER:
                    // Code for expansion specified on line 1148 of Java.javacc
                    // Code for expansion specified on line 1148 of Java.javacc
                    if (phase2_10(2)) {
                        // Code for expansion specified on line 1148 of Java.javacc
                        // Code for PrimaryExpression specified on line 1148 of Java.javacc
                        PrimaryExpression();
                        // Code for expansion specified on line 1148 of Java.javacc
                        consumeToken(99);
                    }
                    // Code for expansion specified on line 1148 of Java.javacc
                    consumeToken(65);
                    // Code for Arguments specified on line 1148 of Java.javacc
                    Arguments();
                    // Code for expansion specified on line 1148 of Java.javacc
                    consumeToken(97);
                    break;
                    default:
                    consumeToken(-1);
                    throw new ParseException();
                }
            }
            if (trace_enabled) LOGGER.info("Exiting normally from ExplicitConstructorInvocation");
        }
        catch(ParseException e) {
            parseException24=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException24!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException24.getMessage());
                    clearNodeScope();
                }
                else {
                    ExplicitConstructorInvocation24.setEndLine(current_token.getEndLine());
                    ExplicitConstructorInvocation24.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(ExplicitConstructorInvocation24,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 1152
    final public void Initializer() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1152 of Java.javacc");
        // Code for expansion specified on line 1155 of Java.javacc
        boolean Initializer25forced=false;
        Initializer Initializer25=null;
        if (buildTree) {
            Initializer25=new Initializer();
            Token start=getToken(1);
            Initializer25.setBeginLine(start.beginLine);
            Initializer25.setBeginColumn(start.beginColumn);
            Initializer25.setInputSource(this.getInputSource());
            openNodeScope(Initializer25);
            openNodeScopeHook(Initializer25);
        }
        ParseException parseException25=null;
        try {
            // Code for expansion specified on line 1155 of Java.javacc
            int int37=nextTokenKind();
            if (int37==63) {
                // Code for expansion specified on line 1155 of Java.javacc
                // Code for expansion specified on line 1155 of Java.javacc
                consumeToken(63);
            }
            // Code for Block specified on line 1155 of Java.javacc
            Block();
            if (trace_enabled) LOGGER.info("Exiting normally from Initializer");
        }
        catch(ParseException e) {
            parseException25=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException25!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException25.getMessage());
                    clearNodeScope();
                }
                else {
                    Initializer25.setEndLine(current_token.getEndLine());
                    Initializer25.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(Initializer25,nodeArity()>1);
                }
            }
        }
    }

    /*
 * Type, name and expression syntax follows.
 */
    // Java.javacc, line 1163
    final public void Type() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1163 of Java.javacc");
        // Code for expansion specified on line 1166 of Java.javacc
        boolean Type26forced=false;
        Type Type26=null;
        if (buildTree) {
            Type26=new Type();
            Token start=getToken(1);
            Type26.setBeginLine(start.beginLine);
            Type26.setBeginColumn(start.beginColumn);
            Type26.setInputSource(this.getInputSource());
            openNodeScope(Type26);
            openNodeScopeHook(Type26);
        }
        ParseException parseException26=null;
        try {
            if (phase2_12(2)) {
                // Code for expansion specified on line 1166 of Java.javacc
                // Code for ReferenceType specified on line 1166 of Java.javacc
                ReferenceType();
            }
            else {
                switch(nextTokenKind()) {
                    case 26:
                    case 28:
                    case 31:
                    case 37:
                    case 44:
                    case 51:
                    case 53:
                    case 62:
                    // Code for expansion specified on line 1168 of Java.javacc
                    // Code for PrimitiveType specified on line 1168 of Java.javacc
                    PrimitiveType();
                    break;
                    default:
                    consumeToken(-1);
                    throw new ParseException();
                }
            }
            if (trace_enabled) LOGGER.info("Exiting normally from Type");
        }
        catch(ParseException e) {
            parseException26=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException26!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException26.getMessage());
                    clearNodeScope();
                }
                else {
                    Type26.setEndLine(current_token.getEndLine());
                    Type26.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(Type26,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 1171
    final public void ReferenceType() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1171 of Java.javacc");
        // Code for expansion specified on line 1174 of Java.javacc
        boolean ReferenceType27forced=false;
        ReferenceType ReferenceType27=null;
        if (buildTree) {
            ReferenceType27=new ReferenceType();
            Token start=getToken(1);
            ReferenceType27.setBeginLine(start.beginLine);
            ReferenceType27.setBeginColumn(start.beginColumn);
            ReferenceType27.setInputSource(this.getInputSource());
            openNodeScope(ReferenceType27);
            openNodeScopeHook(ReferenceType27);
        }
        ParseException parseException27=null;
        try {
            switch(nextTokenKind()) {
                case 26:
                case 28:
                case 31:
                case 37:
                case 44:
                case 51:
                case 53:
                case 62:
                // Code for expansion specified on line 1174 of Java.javacc
                // Code for PrimitiveArrayType specified on line 1174 of Java.javacc
                PrimitiveArrayType();
                break;
                case IDENTIFIER:
                // Code for expansion specified on line 1176 of Java.javacc
                // Code for expansion specified on line 1176 of Java.javacc
                // Code for ClassOrInterfaceType specified on line 1176 of Java.javacc
                ClassOrInterfaceType();
                // Code for expansion specified on line 1176 of Java.javacc
                label_45:
                while (true) {
                    if (!(phase2_13(2))) {
                        break label_45;
                    }
                    // Code for expansion specified on line 1176 of Java.javacc
                    // Code for expansion specified on line 1176 of Java.javacc
                    consumeToken(95);
                    // Code for expansion specified on line 1176 of Java.javacc
                    consumeToken(96);
                }
                break;
                default:
                consumeToken(-1);
                throw new ParseException();
            }
            if (trace_enabled) LOGGER.info("Exiting normally from ReferenceType");
        }
        catch(ParseException e) {
            parseException27=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException27!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException27.getMessage());
                    clearNodeScope();
                }
                else {
                    ReferenceType27.setEndLine(current_token.getEndLine());
                    ReferenceType27.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(ReferenceType27,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 1179
    final public ObjectType ClassOrInterfaceType() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1179 of Java.javacc");
        // Code for expansion specified on line 1182 of Java.javacc
        boolean ClassOrInterfaceType28forced=false;
        ObjectType ClassOrInterfaceType28=null;
        if (buildTree) {
            ClassOrInterfaceType28=new ObjectType();
            Token start=getToken(1);
            ClassOrInterfaceType28.setBeginLine(start.beginLine);
            ClassOrInterfaceType28.setBeginColumn(start.beginColumn);
            ClassOrInterfaceType28.setInputSource(this.getInputSource());
            openNodeScope(ClassOrInterfaceType28);
            openNodeScopeHook(ClassOrInterfaceType28);
        }
        ParseException parseException28=null;
        try {
            // Code for expansion specified on line 1182 of Java.javacc
            consumeToken(IDENTIFIER);
            // Code for expansion specified on line 1183 of Java.javacc
            if (phase2_14(2)) {
                // Code for expansion specified on line 1183 of Java.javacc
                // Code for TypeArguments specified on line 1183 of Java.javacc
                TypeArguments();
            }
            // Code for expansion specified on line 1184 of Java.javacc
            label_47:
            while (true) {
                if (!(phase2_16(2))) {
                    break label_47;
                }
                // Code for expansion specified on line 1184 of Java.javacc
                // Code for expansion specified on line 1184 of Java.javacc
                consumeToken(99);
                // Code for expansion specified on line 1184 of Java.javacc
                consumeToken(IDENTIFIER);
                // Code for expansion specified on line 1184 of Java.javacc
                if (phase2_15(2)) {
                    // Code for expansion specified on line 1184 of Java.javacc
                    // Code for TypeArguments specified on line 1184 of Java.javacc
                    TypeArguments();
                }
            }
            // Code for expansion specified on line 1185 of Java.javacc
            return ClassOrInterfaceType28;
        }
        catch(ParseException e) {
            parseException28=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException28!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException28.getMessage());
                    clearNodeScope();
                }
                else {
                    ClassOrInterfaceType28.setEndLine(current_token.getEndLine());
                    ClassOrInterfaceType28.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(ClassOrInterfaceType28,true);
                }
            }
        }
    }

    // Java.javacc, line 1208
    final public void DiamondOperator() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1208 of Java.javacc");
        // Code for expansion specified on line 1211 of Java.javacc
        boolean DiamondOperator29forced=false;
        DiamondOperator DiamondOperator29=null;
        if (buildTree) {
            DiamondOperator29=new DiamondOperator();
            Token start=getToken(1);
            DiamondOperator29.setBeginLine(start.beginLine);
            DiamondOperator29.setBeginColumn(start.beginColumn);
            DiamondOperator29.setInputSource(this.getInputSource());
            openNodeScope(DiamondOperator29);
            openNodeScopeHook(DiamondOperator29);
        }
        ParseException parseException29=null;
        try {
            // Code for expansion specified on line 1211 of Java.javacc
            consumeToken(102);
            // Code for expansion specified on line 1212 of Java.javacc
            consumeToken(101);
            if (trace_enabled) LOGGER.info("Exiting normally from DiamondOperator");
        }
        catch(ParseException e) {
            parseException29=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException29!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException29.getMessage());
                    clearNodeScope();
                }
                else {
                    DiamondOperator29.setEndLine(current_token.getEndLine());
                    DiamondOperator29.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(DiamondOperator29,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 1215
    final public void PossiblyEmptyTypeArguments() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1215 of Java.javacc");
        // Code for expansion specified on line 1219 of Java.javacc
        if (phase2_17(2)) {
            // Code for expansion specified on line 1219 of Java.javacc
            // Code for DiamondOperator specified on line 1220 of Java.javacc
            DiamondOperator();
        }
        else {
            switch(nextTokenKind()) {
                case 102:
                // Code for expansion specified on line 1222 of Java.javacc
                // Code for TypeArguments specified on line 1222 of Java.javacc
                TypeArguments();
                break;
                default:
                consumeToken(-1);
                throw new ParseException();
            }
        }
        if (trace_enabled) LOGGER.info("Exiting normally from PossiblyEmptyTypeArguments");
    }

    // Java.javacc, line 1225
    final public void TypeArguments() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1225 of Java.javacc");
        // Code for expansion specified on line 1228 of Java.javacc
        boolean TypeArguments30forced=false;
        TypeArguments TypeArguments30=null;
        if (buildTree) {
            TypeArguments30=new TypeArguments();
            Token start=getToken(1);
            TypeArguments30.setBeginLine(start.beginLine);
            TypeArguments30.setBeginColumn(start.beginColumn);
            TypeArguments30.setInputSource(this.getInputSource());
            openNodeScope(TypeArguments30);
            openNodeScopeHook(TypeArguments30);
        }
        ParseException parseException30=null;
        try {
            // Code for expansion specified on line 1228 of Java.javacc
            consumeToken(102);
            // Code for TypeArgument specified on line 1229 of Java.javacc
            TypeArgument();
            // Code for expansion specified on line 1229 of Java.javacc
            label_49:
            while (true) {
                int int38=nextTokenKind();
                if (!(int38==98)) {
                    break label_49;
                }
                // Code for expansion specified on line 1229 of Java.javacc
                // Code for expansion specified on line 1229 of Java.javacc
                consumeToken(98);
                // Code for TypeArgument specified on line 1229 of Java.javacc
                TypeArgument();
            }
            // Code for expansion specified on line 1230 of Java.javacc
            consumeToken(101);
            if (trace_enabled) LOGGER.info("Exiting normally from TypeArguments");
        }
        catch(ParseException e) {
            parseException30=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException30!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException30.getMessage());
                    clearNodeScope();
                }
                else {
                    TypeArguments30.setEndLine(current_token.getEndLine());
                    TypeArguments30.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(TypeArguments30,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 1233
    final public void TypeArgument() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1233 of Java.javacc");
        // Code for expansion specified on line 1236 of Java.javacc
        boolean TypeArgument31forced=false;
        TypeArgument TypeArgument31=null;
        if (buildTree) {
            TypeArgument31=new TypeArgument();
            Token start=getToken(1);
            TypeArgument31.setBeginLine(start.beginLine);
            TypeArgument31.setBeginColumn(start.beginColumn);
            TypeArgument31.setInputSource(this.getInputSource());
            openNodeScope(TypeArgument31);
            openNodeScopeHook(TypeArgument31);
        }
        ParseException parseException31=null;
        try {
            switch(nextTokenKind()) {
                case 26:
                case 28:
                case 31:
                case 37:
                case 44:
                case 51:
                case 53:
                case 62:
                case IDENTIFIER:
                // Code for expansion specified on line 1236 of Java.javacc
                // Code for ReferenceType specified on line 1236 of Java.javacc
                ReferenceType();
                break;
                case 105:
                // Code for expansion specified on line 1238 of Java.javacc
                // Code for expansion specified on line 1238 of Java.javacc
                consumeToken(105);
                // Code for expansion specified on line 1238 of Java.javacc
                int int39=nextTokenKind();
                if (int39==40||int39==65) {
                    // Code for expansion specified on line 1238 of Java.javacc
                    // Code for WildcardBounds specified on line 1238 of Java.javacc
                    WildcardBounds();
                }
                break;
                default:
                consumeToken(-1);
                throw new ParseException();
            }
            if (trace_enabled) LOGGER.info("Exiting normally from TypeArgument");
        }
        catch(ParseException e) {
            parseException31=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException31!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException31.getMessage());
                    clearNodeScope();
                }
                else {
                    TypeArgument31.setEndLine(current_token.getEndLine());
                    TypeArgument31.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(TypeArgument31,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 1241
    final public void WildcardBounds() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1241 of Java.javacc");
        // Code for expansion specified on line 1244 of Java.javacc
        boolean WildcardBounds32forced=false;
        WildcardBounds WildcardBounds32=null;
        if (buildTree) {
            WildcardBounds32=new WildcardBounds();
            Token start=getToken(1);
            WildcardBounds32.setBeginLine(start.beginLine);
            WildcardBounds32.setBeginColumn(start.beginColumn);
            WildcardBounds32.setInputSource(this.getInputSource());
            openNodeScope(WildcardBounds32);
            openNodeScopeHook(WildcardBounds32);
        }
        ParseException parseException32=null;
        try {
            // Code for expansion specified on line 1244 of Java.javacc
            switch(nextTokenKind()) {
                case 40:
                // Code for expansion specified on line 1244 of Java.javacc
                // Code for expansion specified on line 1244 of Java.javacc
                consumeToken(40);
                break;
                case 65:
                // Code for expansion specified on line 1244 of Java.javacc
                // Code for expansion specified on line 1244 of Java.javacc
                consumeToken(65);
                break;
                default:
                consumeToken(-1);
                throw new ParseException();
            }
            // Code for ReferenceType specified on line 1244 of Java.javacc
            ReferenceType();
            if (trace_enabled) LOGGER.info("Exiting normally from WildcardBounds");
        }
        catch(ParseException e) {
            parseException32=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException32!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException32.getMessage());
                    clearNodeScope();
                }
                else {
                    WildcardBounds32.setEndLine(current_token.getEndLine());
                    WildcardBounds32.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(WildcardBounds32,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 1248
    final public void PrimitiveType() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1248 of Java.javacc");
        // Code for expansion specified on line 1251 of Java.javacc
        switch(nextTokenKind()) {
            case 26:
            // Code for expansion specified on line 1251 of Java.javacc
            // Code for expansion specified on line 1251 of Java.javacc
            consumeToken(26);
            break;
            case 31:
            // Code for expansion specified on line 1253 of Java.javacc
            // Code for expansion specified on line 1253 of Java.javacc
            consumeToken(31);
            break;
            case 28:
            // Code for expansion specified on line 1255 of Java.javacc
            // Code for expansion specified on line 1255 of Java.javacc
            consumeToken(28);
            break;
            case 62:
            // Code for expansion specified on line 1257 of Java.javacc
            // Code for expansion specified on line 1257 of Java.javacc
            consumeToken(62);
            break;
            case 51:
            // Code for expansion specified on line 1259 of Java.javacc
            // Code for expansion specified on line 1259 of Java.javacc
            consumeToken(51);
            break;
            case 53:
            // Code for expansion specified on line 1261 of Java.javacc
            // Code for expansion specified on line 1261 of Java.javacc
            consumeToken(53);
            break;
            case 44:
            // Code for expansion specified on line 1263 of Java.javacc
            // Code for expansion specified on line 1263 of Java.javacc
            consumeToken(44);
            break;
            case 37:
            // Code for expansion specified on line 1265 of Java.javacc
            // Code for expansion specified on line 1265 of Java.javacc
            consumeToken(37);
            break;
            default:
            consumeToken(-1);
            throw new ParseException();
        }
        if (trace_enabled) LOGGER.info("Exiting normally from PrimitiveType");
    }

    // Java.javacc, line 1268
    final public void PrimitiveArrayType() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1268 of Java.javacc");
        // Code for expansion specified on line 1271 of Java.javacc
        boolean PrimitiveArrayType33forced=false;
        PrimitiveArrayType PrimitiveArrayType33=null;
        if (buildTree) {
            PrimitiveArrayType33=new PrimitiveArrayType();
            Token start=getToken(1);
            PrimitiveArrayType33.setBeginLine(start.beginLine);
            PrimitiveArrayType33.setBeginColumn(start.beginColumn);
            PrimitiveArrayType33.setInputSource(this.getInputSource());
            openNodeScope(PrimitiveArrayType33);
            openNodeScopeHook(PrimitiveArrayType33);
        }
        ParseException parseException33=null;
        try {
            // Code for PrimitiveType specified on line 1271 of Java.javacc
            PrimitiveType();
            // Code for expansion specified on line 1271 of Java.javacc
            label_51:
            while (true) {
                // Code for expansion specified on line 1271 of Java.javacc
                // Code for expansion specified on line 1271 of Java.javacc
                consumeToken(95);
                // Code for expansion specified on line 1271 of Java.javacc
                consumeToken(96);
                if (!(phase2_18(2))) {
                    break label_51;
                }
            }
            if (trace_enabled) LOGGER.info("Exiting normally from PrimitiveArrayType");
        }
        catch(ParseException e) {
            parseException33=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException33!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException33.getMessage());
                    clearNodeScope();
                }
                else {
                    PrimitiveArrayType33.setEndLine(current_token.getEndLine());
                    PrimitiveArrayType33.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(PrimitiveArrayType33,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 1275
    final public ReturnType ReturnType() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1275 of Java.javacc");
        // Code for expansion specified on line 1278 of Java.javacc
        boolean ReturnType34forced=false;
        ReturnType ReturnType34=null;
        if (buildTree) {
            ReturnType34=new ReturnType();
            Token start=getToken(1);
            ReturnType34.setBeginLine(start.beginLine);
            ReturnType34.setBeginColumn(start.beginColumn);
            ReturnType34.setInputSource(this.getInputSource());
            openNodeScope(ReturnType34);
            openNodeScopeHook(ReturnType34);
        }
        ParseException parseException34=null;
        try {
            // Code for expansion specified on line 1279 of Java.javacc
            switch(nextTokenKind()) {
                case 74:
                // Code for expansion specified on line 1279 of Java.javacc
                // Code for expansion specified on line 1279 of Java.javacc
                consumeToken(74);
                break;
                case 26:
                case 28:
                case 31:
                case 37:
                case 44:
                case 51:
                case 53:
                case 62:
                case IDENTIFIER:
                // Code for expansion specified on line 1281 of Java.javacc
                // Code for Type specified on line 1281 of Java.javacc
                Type();
                break;
                default:
                consumeToken(-1);
                throw new ParseException();
            }
            // Code for expansion specified on line 1283 of Java.javacc
            return ReturnType34;
        }
        catch(ParseException e) {
            parseException34=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException34!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException34.getMessage());
                    clearNodeScope();
                }
                else {
                    ReturnType34.setEndLine(current_token.getEndLine());
                    ReturnType34.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(ReturnType34,true);
                }
            }
        }
    }

    // Java.javacc, line 1288
    final public Name Name() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1288 of Java.javacc");
        // Code for expansion specified on line 1295 of Java.javacc
        boolean Name35forced=false;
        Name Name35=null;
        if (buildTree) {
            Name35=new Name();
            Token start=getToken(1);
            Name35.setBeginLine(start.beginLine);
            Name35.setBeginColumn(start.beginColumn);
            Name35.setInputSource(this.getInputSource());
            openNodeScope(Name35);
            openNodeScopeHook(Name35);
        }
        ParseException parseException35=null;
        try {
            // Code for expansion specified on line 1295 of Java.javacc
            consumeToken(IDENTIFIER);
            // Code for expansion specified on line 1299 of Java.javacc
            label_52:
            while (true) {
                if (!(phase2_19(2))) {
                    break label_52;
                }
                // Code for expansion specified on line 1297 of Java.javacc
                // Code for expansion specified on line 1298 of Java.javacc
                consumeToken(99);
                // Code for expansion specified on line 1298 of Java.javacc
                consumeToken(IDENTIFIER);
            }
            // Code for expansion specified on line 1300 of Java.javacc
            return Name35;
        }
        catch(ParseException e) {
            parseException35=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException35!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException35.getMessage());
                    clearNodeScope();
                }
                else {
                    Name35.setEndLine(current_token.getEndLine());
                    Name35.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(Name35,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 1317
    final public ThrowsList ThrowsList() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1317 of Java.javacc");
        // Code for expansion specified on line 1320 of Java.javacc
        boolean ThrowsList36forced=false;
        ThrowsList ThrowsList36=null;
        if (buildTree) {
            ThrowsList36=new ThrowsList();
            Token start=getToken(1);
            ThrowsList36.setBeginLine(start.beginLine);
            ThrowsList36.setBeginColumn(start.beginColumn);
            ThrowsList36.setInputSource(this.getInputSource());
            openNodeScope(ThrowsList36);
            openNodeScopeHook(ThrowsList36);
        }
        ParseException parseException36=null;
        try {
            // Code for expansion specified on line 1320 of Java.javacc
            consumeToken(70);
            // Code for Name specified on line 1320 of Java.javacc
            Name();
            // Code for expansion specified on line 1320 of Java.javacc
            label_53:
            while (true) {
                int int40=nextTokenKind();
                if (!(int40==98)) {
                    break label_53;
                }
                // Code for expansion specified on line 1320 of Java.javacc
                // Code for expansion specified on line 1320 of Java.javacc
                consumeToken(98);
                // Code for Name specified on line 1320 of Java.javacc
                Name();
            }
            // Code for expansion specified on line 1321 of Java.javacc
            return ThrowsList36;
        }
        catch(ParseException e) {
            parseException36=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException36!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException36.getMessage());
                    clearNodeScope();
                }
                else {
                    ThrowsList36.setEndLine(current_token.getEndLine());
                    ThrowsList36.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(ThrowsList36,nodeArity()>1);
                }
            }
        }
    }

    /*
 * Expression syntax follows.
 */
    // Java.javacc, line 1349
    final public Expression Expression() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1349 of Java.javacc");
        // Code for expansion specified on line 1352 of Java.javacc
        boolean Expression37forced=false;
        Expression Expression37=null;
        if (buildTree) {
            Expression37=new Expression();
            Token start=getToken(1);
            Expression37.setBeginLine(start.beginLine);
            Expression37.setBeginColumn(start.beginColumn);
            Expression37.setInputSource(this.getInputSource());
            openNodeScope(Expression37);
            openNodeScopeHook(Expression37);
        }
        ParseException parseException37=null;
        try {
            // Code for AssignmentExpression specified on line 1352 of Java.javacc
            AssignmentExpression();
            // Code for expansion specified on line 1353 of Java.javacc
            return(Expression) peekNode();
        }
        catch(ParseException e) {
            parseException37=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException37!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException37.getMessage());
                    clearNodeScope();
                }
                else {
                    Expression37.setEndLine(current_token.getEndLine());
                    Expression37.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(Expression37,nodeArity()>1);
                }
            }
        }
    }

    /*
 * This expansion has been written this way instead of:
 *   Assignment() | TernaryExpression()
 * for performance reasons.
 * However, it is a weakening of the grammar for it allows the LHS of
 * assignments to be any conditional expression whereas it can only be
 * a primary expression.  Consider adding a semantic predicate to work
 * around this.
 */
    // Java.javacc, line 1388
    final public void AssignmentExpression() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1388 of Java.javacc");
        // Code for expansion specified on line 1392 of Java.javacc
        boolean AssignmentExpression38forced=false;
        AssignmentExpression AssignmentExpression38=null;
        if (buildTree) {
            AssignmentExpression38=new AssignmentExpression();
            Token start=getToken(1);
            AssignmentExpression38.setBeginLine(start.beginLine);
            AssignmentExpression38.setBeginColumn(start.beginColumn);
            AssignmentExpression38.setInputSource(this.getInputSource());
            openNodeScope(AssignmentExpression38);
            openNodeScopeHook(AssignmentExpression38);
        }
        ParseException parseException38=null;
        try {
            // Code for TernaryExpression specified on line 1392 of Java.javacc
            TernaryExpression();
            // Code for expansion specified on line 1393 of Java.javacc
            if (phase2_20(2)) {
                // Code for expansion specified on line 1394 of Java.javacc
                // Code for AssignmentOperator specified on line 1395 of Java.javacc
                AssignmentOperator();
                // Code for Expression specified on line 1395 of Java.javacc
                Expression();
            }
            if (trace_enabled) LOGGER.info("Exiting normally from AssignmentExpression");
        }
        catch(ParseException e) {
            parseException38=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException38!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException38.getMessage());
                    clearNodeScope();
                }
                else {
                    AssignmentExpression38.setEndLine(current_token.getEndLine());
                    AssignmentExpression38.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(AssignmentExpression38,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 1399
    final public void AssignmentOperator() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1399 of Java.javacc");
        // Code for expansion specified on line 1402 of Java.javacc
        switch(nextTokenKind()) {
            case 100:
            // Code for expansion specified on line 1402 of Java.javacc
            // Code for expansion specified on line 1402 of Java.javacc
            consumeToken(100);
            break;
            case 126:
            // Code for expansion specified on line 1402 of Java.javacc
            // Code for expansion specified on line 1402 of Java.javacc
            consumeToken(126);
            break;
            case 127:
            // Code for expansion specified on line 1402 of Java.javacc
            // Code for expansion specified on line 1402 of Java.javacc
            consumeToken(127);
            break;
            case 131:
            // Code for expansion specified on line 1402 of Java.javacc
            // Code for expansion specified on line 1402 of Java.javacc
            consumeToken(131);
            break;
            case 124:
            // Code for expansion specified on line 1402 of Java.javacc
            // Code for expansion specified on line 1402 of Java.javacc
            consumeToken(124);
            break;
            case 125:
            // Code for expansion specified on line 1402 of Java.javacc
            // Code for expansion specified on line 1402 of Java.javacc
            consumeToken(125);
            break;
            case 132:
            // Code for expansion specified on line 1402 of Java.javacc
            // Code for expansion specified on line 1402 of Java.javacc
            consumeToken(132);
            break;
            case 133:
            // Code for expansion specified on line 1402 of Java.javacc
            // Code for expansion specified on line 1402 of Java.javacc
            consumeToken(133);
            break;
            case 134:
            // Code for expansion specified on line 1402 of Java.javacc
            // Code for expansion specified on line 1402 of Java.javacc
            consumeToken(134);
            break;
            case 128:
            // Code for expansion specified on line 1402 of Java.javacc
            // Code for expansion specified on line 1402 of Java.javacc
            consumeToken(128);
            break;
            case 130:
            // Code for expansion specified on line 1402 of Java.javacc
            // Code for expansion specified on line 1402 of Java.javacc
            consumeToken(130);
            break;
            case 129:
            // Code for expansion specified on line 1402 of Java.javacc
            // Code for expansion specified on line 1402 of Java.javacc
            consumeToken(129);
            break;
            default:
            consumeToken(-1);
            throw new ParseException();
        }
        if (trace_enabled) LOGGER.info("Exiting normally from AssignmentOperator");
    }

    // Java.javacc, line 1405
    final public void TernaryExpression() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1405 of Java.javacc");
        // Code for expansion specified on line 1408 of Java.javacc
        boolean TernaryExpression39forced=false;
        TernaryExpression TernaryExpression39=null;
        if (buildTree) {
            TernaryExpression39=new TernaryExpression();
            Token start=getToken(1);
            TernaryExpression39.setBeginLine(start.beginLine);
            TernaryExpression39.setBeginColumn(start.beginColumn);
            TernaryExpression39.setInputSource(this.getInputSource());
            openNodeScope(TernaryExpression39);
            openNodeScopeHook(TernaryExpression39);
        }
        ParseException parseException39=null;
        try {
            // Code for ConditionalOrExpression specified on line 1408 of Java.javacc
            ConditionalOrExpression();
            // Code for expansion specified on line 1408 of Java.javacc
            if (phase2_21(INFINITY)) {
                // Code for expansion specified on line 1408 of Java.javacc
                // Code for expansion specified on line 1408 of Java.javacc
                consumeToken(105);
                // Code for Expression specified on line 1408 of Java.javacc
                Expression();
                // Code for expansion specified on line 1408 of Java.javacc
                consumeToken(106);
                // Code for Expression specified on line 1408 of Java.javacc
                Expression();
            }
            if (trace_enabled) LOGGER.info("Exiting normally from TernaryExpression");
        }
        catch(ParseException e) {
            parseException39=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException39!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException39.getMessage());
                    clearNodeScope();
                }
                else {
                    TernaryExpression39.setEndLine(current_token.getEndLine());
                    TernaryExpression39.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(TernaryExpression39,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 1411
    final public void ConditionalOrExpression() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1411 of Java.javacc");
        // Code for expansion specified on line 1414 of Java.javacc
        boolean ConditionalOrExpression40forced=false;
        ConditionalOrExpression ConditionalOrExpression40=null;
        if (buildTree) {
            ConditionalOrExpression40=new ConditionalOrExpression();
            Token start=getToken(1);
            ConditionalOrExpression40.setBeginLine(start.beginLine);
            ConditionalOrExpression40.setBeginColumn(start.beginColumn);
            ConditionalOrExpression40.setInputSource(this.getInputSource());
            openNodeScope(ConditionalOrExpression40);
            openNodeScopeHook(ConditionalOrExpression40);
        }
        ParseException parseException40=null;
        try {
            // Code for ConditionalAndExpression specified on line 1414 of Java.javacc
            ConditionalAndExpression();
            // Code for expansion specified on line 1414 of Java.javacc
            label_56:
            while (true) {
                if (!(phase2_22(INFINITY))) {
                    break label_56;
                }
                // Code for expansion specified on line 1414 of Java.javacc
                // Code for expansion specified on line 1414 of Java.javacc
                consumeToken(111);
                // Code for ConditionalAndExpression specified on line 1414 of Java.javacc
                ConditionalAndExpression();
            }
            if (trace_enabled) LOGGER.info("Exiting normally from ConditionalOrExpression");
        }
        catch(ParseException e) {
            parseException40=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException40!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException40.getMessage());
                    clearNodeScope();
                }
                else {
                    ConditionalOrExpression40.setEndLine(current_token.getEndLine());
                    ConditionalOrExpression40.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(ConditionalOrExpression40,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 1417
    final public void ConditionalAndExpression() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1417 of Java.javacc");
        // Code for expansion specified on line 1420 of Java.javacc
        boolean ConditionalAndExpression41forced=false;
        ConditionalAndExpression ConditionalAndExpression41=null;
        if (buildTree) {
            ConditionalAndExpression41=new ConditionalAndExpression();
            Token start=getToken(1);
            ConditionalAndExpression41.setBeginLine(start.beginLine);
            ConditionalAndExpression41.setBeginColumn(start.beginColumn);
            ConditionalAndExpression41.setInputSource(this.getInputSource());
            openNodeScope(ConditionalAndExpression41);
            openNodeScopeHook(ConditionalAndExpression41);
        }
        ParseException parseException41=null;
        try {
            // Code for InclusiveOrExpression specified on line 1420 of Java.javacc
            InclusiveOrExpression();
            // Code for expansion specified on line 1420 of Java.javacc
            label_57:
            while (true) {
                if (!(phase2_23(INFINITY))) {
                    break label_57;
                }
                // Code for expansion specified on line 1420 of Java.javacc
                // Code for expansion specified on line 1420 of Java.javacc
                consumeToken(112);
                // Code for InclusiveOrExpression specified on line 1420 of Java.javacc
                InclusiveOrExpression();
            }
            if (trace_enabled) LOGGER.info("Exiting normally from ConditionalAndExpression");
        }
        catch(ParseException e) {
            parseException41=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException41!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException41.getMessage());
                    clearNodeScope();
                }
                else {
                    ConditionalAndExpression41.setEndLine(current_token.getEndLine());
                    ConditionalAndExpression41.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(ConditionalAndExpression41,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 1423
    final public void InclusiveOrExpression() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1423 of Java.javacc");
        // Code for expansion specified on line 1426 of Java.javacc
        boolean InclusiveOrExpression42forced=false;
        InclusiveOrExpression InclusiveOrExpression42=null;
        if (buildTree) {
            InclusiveOrExpression42=new InclusiveOrExpression();
            Token start=getToken(1);
            InclusiveOrExpression42.setBeginLine(start.beginLine);
            InclusiveOrExpression42.setBeginColumn(start.beginColumn);
            InclusiveOrExpression42.setInputSource(this.getInputSource());
            openNodeScope(InclusiveOrExpression42);
            openNodeScopeHook(InclusiveOrExpression42);
        }
        ParseException parseException42=null;
        try {
            // Code for ExclusiveOrExpression specified on line 1426 of Java.javacc
            ExclusiveOrExpression();
            // Code for expansion specified on line 1426 of Java.javacc
            label_58:
            while (true) {
                if (!(phase2_24(INFINITY))) {
                    break label_58;
                }
                // Code for expansion specified on line 1426 of Java.javacc
                // Code for expansion specified on line 1426 of Java.javacc
                consumeToken(120);
                // Code for ExclusiveOrExpression specified on line 1426 of Java.javacc
                ExclusiveOrExpression();
            }
            if (trace_enabled) LOGGER.info("Exiting normally from InclusiveOrExpression");
        }
        catch(ParseException e) {
            parseException42=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException42!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException42.getMessage());
                    clearNodeScope();
                }
                else {
                    InclusiveOrExpression42.setEndLine(current_token.getEndLine());
                    InclusiveOrExpression42.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(InclusiveOrExpression42,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 1429
    final public void ExclusiveOrExpression() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1429 of Java.javacc");
        // Code for expansion specified on line 1432 of Java.javacc
        boolean ExclusiveOrExpression43forced=false;
        ExclusiveOrExpression ExclusiveOrExpression43=null;
        if (buildTree) {
            ExclusiveOrExpression43=new ExclusiveOrExpression();
            Token start=getToken(1);
            ExclusiveOrExpression43.setBeginLine(start.beginLine);
            ExclusiveOrExpression43.setBeginColumn(start.beginColumn);
            ExclusiveOrExpression43.setInputSource(this.getInputSource());
            openNodeScope(ExclusiveOrExpression43);
            openNodeScopeHook(ExclusiveOrExpression43);
        }
        ParseException parseException43=null;
        try {
            // Code for AndExpression specified on line 1432 of Java.javacc
            AndExpression();
            // Code for expansion specified on line 1432 of Java.javacc
            label_59:
            while (true) {
                if (!(phase2_25(INFINITY))) {
                    break label_59;
                }
                // Code for expansion specified on line 1432 of Java.javacc
                // Code for expansion specified on line 1432 of Java.javacc
                consumeToken(121);
                // Code for AndExpression specified on line 1432 of Java.javacc
                AndExpression();
            }
            if (trace_enabled) LOGGER.info("Exiting normally from ExclusiveOrExpression");
        }
        catch(ParseException e) {
            parseException43=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException43!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException43.getMessage());
                    clearNodeScope();
                }
                else {
                    ExclusiveOrExpression43.setEndLine(current_token.getEndLine());
                    ExclusiveOrExpression43.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(ExclusiveOrExpression43,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 1435
    final public void AndExpression() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1435 of Java.javacc");
        // Code for expansion specified on line 1438 of Java.javacc
        boolean AndExpression44forced=false;
        AndExpression AndExpression44=null;
        if (buildTree) {
            AndExpression44=new AndExpression();
            Token start=getToken(1);
            AndExpression44.setBeginLine(start.beginLine);
            AndExpression44.setBeginColumn(start.beginColumn);
            AndExpression44.setInputSource(this.getInputSource());
            openNodeScope(AndExpression44);
            openNodeScopeHook(AndExpression44);
        }
        ParseException parseException44=null;
        try {
            // Code for EqualityExpression specified on line 1438 of Java.javacc
            EqualityExpression();
            // Code for expansion specified on line 1438 of Java.javacc
            label_60:
            while (true) {
                if (!(phase2_26(INFINITY))) {
                    break label_60;
                }
                // Code for expansion specified on line 1438 of Java.javacc
                // Code for expansion specified on line 1438 of Java.javacc
                consumeToken(119);
                // Code for EqualityExpression specified on line 1438 of Java.javacc
                EqualityExpression();
            }
            if (trace_enabled) LOGGER.info("Exiting normally from AndExpression");
        }
        catch(ParseException e) {
            parseException44=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException44!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException44.getMessage());
                    clearNodeScope();
                }
                else {
                    AndExpression44.setEndLine(current_token.getEndLine());
                    AndExpression44.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(AndExpression44,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 1441
    final public void EqualityExpression() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1441 of Java.javacc");
        // Code for expansion specified on line 1444 of Java.javacc
        boolean EqualityExpression45forced=false;
        EqualityExpression EqualityExpression45=null;
        if (buildTree) {
            EqualityExpression45=new EqualityExpression();
            Token start=getToken(1);
            EqualityExpression45.setBeginLine(start.beginLine);
            EqualityExpression45.setBeginColumn(start.beginColumn);
            EqualityExpression45.setInputSource(this.getInputSource());
            openNodeScope(EqualityExpression45);
            openNodeScopeHook(EqualityExpression45);
        }
        ParseException parseException45=null;
        try {
            // Code for InstanceOfExpression specified on line 1444 of Java.javacc
            InstanceOfExpression();
            // Code for expansion specified on line 1444 of Java.javacc
            label_61:
            while (true) {
                int int41=nextTokenKind();
                if (!(int41==107||int41==110)) {
                    break label_61;
                }
                // Code for expansion specified on line 1444 of Java.javacc
                // Code for expansion specified on line 1444 of Java.javacc
                switch(nextTokenKind()) {
                    case 107:
                    // Code for expansion specified on line 1444 of Java.javacc
                    // Code for expansion specified on line 1444 of Java.javacc
                    consumeToken(107);
                    break;
                    case 110:
                    // Code for expansion specified on line 1444 of Java.javacc
                    // Code for expansion specified on line 1444 of Java.javacc
                    consumeToken(110);
                    break;
                    default:
                    consumeToken(-1);
                    throw new ParseException();
                }
                // Code for InstanceOfExpression specified on line 1444 of Java.javacc
                InstanceOfExpression();
            }
            if (trace_enabled) LOGGER.info("Exiting normally from EqualityExpression");
        }
        catch(ParseException e) {
            parseException45=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException45!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException45.getMessage());
                    clearNodeScope();
                }
                else {
                    EqualityExpression45.setEndLine(current_token.getEndLine());
                    EqualityExpression45.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(EqualityExpression45,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 1447
    final public void InstanceOfExpression() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1447 of Java.javacc");
        // Code for expansion specified on line 1450 of Java.javacc
        boolean InstanceOfExpression46forced=false;
        InstanceOfExpression InstanceOfExpression46=null;
        if (buildTree) {
            InstanceOfExpression46=new InstanceOfExpression();
            Token start=getToken(1);
            InstanceOfExpression46.setBeginLine(start.beginLine);
            InstanceOfExpression46.setBeginColumn(start.beginColumn);
            InstanceOfExpression46.setInputSource(this.getInputSource());
            openNodeScope(InstanceOfExpression46);
            openNodeScopeHook(InstanceOfExpression46);
        }
        ParseException parseException46=null;
        try {
            // Code for RelationalExpression specified on line 1450 of Java.javacc
            RelationalExpression();
            // Code for expansion specified on line 1450 of Java.javacc
            int int42=nextTokenKind();
            if (int42==50) {
                // Code for expansion specified on line 1450 of Java.javacc
                // Code for expansion specified on line 1450 of Java.javacc
                consumeToken(50);
                // Code for Type specified on line 1450 of Java.javacc
                Type();
            }
            if (trace_enabled) LOGGER.info("Exiting normally from InstanceOfExpression");
        }
        catch(ParseException e) {
            parseException46=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException46!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException46.getMessage());
                    clearNodeScope();
                }
                else {
                    InstanceOfExpression46.setEndLine(current_token.getEndLine());
                    InstanceOfExpression46.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(InstanceOfExpression46,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 1453
    final public void RelationalExpression() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1453 of Java.javacc");
        // Code for expansion specified on line 1456 of Java.javacc
        boolean RelationalExpression47forced=false;
        RelationalExpression RelationalExpression47=null;
        if (buildTree) {
            RelationalExpression47=new RelationalExpression();
            Token start=getToken(1);
            RelationalExpression47.setBeginLine(start.beginLine);
            RelationalExpression47.setBeginColumn(start.beginColumn);
            RelationalExpression47.setInputSource(this.getInputSource());
            openNodeScope(RelationalExpression47);
            openNodeScopeHook(RelationalExpression47);
        }
        ParseException parseException47=null;
        try {
            // Code for ShiftExpression specified on line 1456 of Java.javacc
            ShiftExpression();
            // Code for expansion specified on line 1466 of Java.javacc
            label_63:
            while (true) {
                int int43=nextTokenKind();
                if (!(int43==101||int43==102||int43==108||int43==109)) {
                    break label_63;
                }
                // Code for expansion specified on line 1458 of Java.javacc
                // Code for expansion specified on line 1460 of Java.javacc
                switch(nextTokenKind()) {
                    case 102:
                    // Code for expansion specified on line 1460 of Java.javacc
                    // Code for expansion specified on line 1460 of Java.javacc
                    consumeToken(102);
                    break;
                    case 101:
                    // Code for expansion specified on line 1461 of Java.javacc
                    // Code for expansion specified on line 1461 of Java.javacc
                    consumeToken(101);
                    break;
                    case 108:
                    // Code for expansion specified on line 1462 of Java.javacc
                    // Code for expansion specified on line 1462 of Java.javacc
                    consumeToken(108);
                    break;
                    case 109:
                    // Code for expansion specified on line 1463 of Java.javacc
                    // Code for expansion specified on line 1463 of Java.javacc
                    consumeToken(109);
                    break;
                    default:
                    consumeToken(-1);
                    throw new ParseException();
                }
                // Code for ShiftExpression specified on line 1465 of Java.javacc
                ShiftExpression();
            }
            if (trace_enabled) LOGGER.info("Exiting normally from RelationalExpression");
        }
        catch(ParseException e) {
            parseException47=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException47!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException47.getMessage());
                    clearNodeScope();
                }
                else {
                    RelationalExpression47.setEndLine(current_token.getEndLine());
                    RelationalExpression47.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(RelationalExpression47,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 1470
    final public void ShiftExpression() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1470 of Java.javacc");
        // Code for expansion specified on line 1474 of Java.javacc
        boolean ShiftExpression48forced=false;
        ShiftExpression ShiftExpression48=null;
        if (buildTree) {
            ShiftExpression48=new ShiftExpression();
            Token start=getToken(1);
            ShiftExpression48.setBeginLine(start.beginLine);
            ShiftExpression48.setBeginColumn(start.beginColumn);
            ShiftExpression48.setInputSource(this.getInputSource());
            openNodeScope(ShiftExpression48);
            openNodeScopeHook(ShiftExpression48);
        }
        ParseException parseException48=null;
        try {
            // Code for AdditiveExpression specified on line 1474 of Java.javacc
            AdditiveExpression();
            // Code for expansion specified on line 1483 of Java.javacc
            label_64:
            while (true) {
                if (!(phase2_27(2))) {
                    break label_64;
                }
                // Code for expansion specified on line 1476 of Java.javacc
                // Code for expansion specified on line 1478 of Java.javacc
                switch(nextTokenKind()) {
                    case 123:
                    // Code for expansion specified on line 1478 of Java.javacc
                    // Code for expansion specified on line 1478 of Java.javacc
                    consumeToken(123);
                    break;
                    case 101:
                    // Code for expansion specified on line 1480 of Java.javacc
                    // Code for ShiftOperator specified on line 1480 of Java.javacc
                    ShiftOperator();
                    break;
                    default:
                    consumeToken(-1);
                    throw new ParseException();
                }
                // Code for AdditiveExpression specified on line 1482 of Java.javacc
                AdditiveExpression();
            }
            if (trace_enabled) LOGGER.info("Exiting normally from ShiftExpression");
        }
        catch(ParseException e) {
            parseException48=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException48!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException48.getMessage());
                    clearNodeScope();
                }
                else {
                    ShiftExpression48.setEndLine(current_token.getEndLine());
                    ShiftExpression48.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(ShiftExpression48,nodeArity()>1);
                }
            }
        }
    }

    //Egad, what a ghastly kludge this is! Consider a REVISIT.
    // Java.javacc, line 1488
    final public void ShiftOperator() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1488 of Java.javacc");
        Token first,second,third=null;
        // Code for expansion specified on line 1493 of Java.javacc
        // Code for expansion specified on line 1493 of Java.javacc
        first=consumeToken(101);
        // Code for expansion specified on line 1494 of Java.javacc
        second=consumeToken(101);
        // Code for expansion specified on line 1495 of Java.javacc
        int int44=nextTokenKind();
        if (int44==101) {
            // Code for expansion specified on line 1495 of Java.javacc
            // Code for expansion specified on line 1495 of Java.javacc
            third=consumeToken(101);
        }
        // Code for expansion specified on line 1496 of Java.javacc
        if (second.getBeginColumn()!=first.getBeginColumn()+1) {
            throw new ParseException("Shift operator cannot have spaces or comments inside!\n"+getInputSource()+":line "+first.beginLine+":column "+first.beginColumn);
        }
        if (third!=null) {
            if (third.getBeginColumn()!=first.getBeginColumn()+2) {
                throw new ParseException("Shift operator >>> cannot have spaces or comments inside!\n"+getInputSource()+":line "+first.beginLine+":column "+first.beginColumn);
            }
            first.image=">>>";
            first.kind=RUNSIGNEDSHIFT;
            first.next=third.next;
            popNode();
            popNode();
        }
        else {
            first.image=">>";
            first.kind=RSIGNEDSHIFT;
            first.next=second.next;
            popNode();
        }
        if (trace_enabled) LOGGER.info("Exiting normally from ShiftOperator");
    }

    // Java.javacc, line 1519
    final public void AdditiveExpression() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1519 of Java.javacc");
        // Code for expansion specified on line 1522 of Java.javacc
        boolean AdditiveExpression49forced=false;
        AdditiveExpression AdditiveExpression49=null;
        if (buildTree) {
            AdditiveExpression49=new AdditiveExpression();
            Token start=getToken(1);
            AdditiveExpression49.setBeginLine(start.beginLine);
            AdditiveExpression49.setBeginColumn(start.beginColumn);
            AdditiveExpression49.setInputSource(this.getInputSource());
            openNodeScope(AdditiveExpression49);
            openNodeScopeHook(AdditiveExpression49);
        }
        ParseException parseException49=null;
        try {
            // Code for MultiplicativeExpression specified on line 1522 of Java.javacc
            MultiplicativeExpression();
            // Code for expansion specified on line 1522 of Java.javacc
            label_66:
            while (true) {
                int int45=nextTokenKind();
                if (!(int45==115||int45==116)) {
                    break label_66;
                }
                // Code for expansion specified on line 1522 of Java.javacc
                // Code for expansion specified on line 1522 of Java.javacc
                switch(nextTokenKind()) {
                    case 115:
                    // Code for expansion specified on line 1522 of Java.javacc
                    // Code for expansion specified on line 1522 of Java.javacc
                    consumeToken(115);
                    break;
                    case 116:
                    // Code for expansion specified on line 1522 of Java.javacc
                    // Code for expansion specified on line 1522 of Java.javacc
                    consumeToken(116);
                    break;
                    default:
                    consumeToken(-1);
                    throw new ParseException();
                }
                // Code for MultiplicativeExpression specified on line 1522 of Java.javacc
                MultiplicativeExpression();
            }
            if (trace_enabled) LOGGER.info("Exiting normally from AdditiveExpression");
        }
        catch(ParseException e) {
            parseException49=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException49!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException49.getMessage());
                    clearNodeScope();
                }
                else {
                    AdditiveExpression49.setEndLine(current_token.getEndLine());
                    AdditiveExpression49.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(AdditiveExpression49,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 1525
    final public void MultiplicativeExpression() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1525 of Java.javacc");
        // Code for expansion specified on line 1528 of Java.javacc
        boolean MultiplicativeExpression50forced=false;
        MultiplicativeExpression MultiplicativeExpression50=null;
        if (buildTree) {
            MultiplicativeExpression50=new MultiplicativeExpression();
            Token start=getToken(1);
            MultiplicativeExpression50.setBeginLine(start.beginLine);
            MultiplicativeExpression50.setBeginColumn(start.beginColumn);
            MultiplicativeExpression50.setInputSource(this.getInputSource());
            openNodeScope(MultiplicativeExpression50);
            openNodeScopeHook(MultiplicativeExpression50);
        }
        ParseException parseException50=null;
        try {
            // Code for UnaryExpression specified on line 1528 of Java.javacc
            UnaryExpression();
            // Code for expansion specified on line 1528 of Java.javacc
            label_67:
            while (true) {
                int int46=nextTokenKind();
                if (!(int46==117||int46==118||int46==122)) {
                    break label_67;
                }
                // Code for expansion specified on line 1528 of Java.javacc
                // Code for expansion specified on line 1528 of Java.javacc
                switch(nextTokenKind()) {
                    case 117:
                    // Code for expansion specified on line 1528 of Java.javacc
                    // Code for expansion specified on line 1528 of Java.javacc
                    consumeToken(117);
                    break;
                    case 118:
                    // Code for expansion specified on line 1528 of Java.javacc
                    // Code for expansion specified on line 1528 of Java.javacc
                    consumeToken(118);
                    break;
                    case 122:
                    // Code for expansion specified on line 1528 of Java.javacc
                    // Code for expansion specified on line 1528 of Java.javacc
                    consumeToken(122);
                    break;
                    default:
                    consumeToken(-1);
                    throw new ParseException();
                }
                // Code for UnaryExpression specified on line 1528 of Java.javacc
                UnaryExpression();
            }
            if (trace_enabled) LOGGER.info("Exiting normally from MultiplicativeExpression");
        }
        catch(ParseException e) {
            parseException50=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException50!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException50.getMessage());
                    clearNodeScope();
                }
                else {
                    MultiplicativeExpression50.setEndLine(current_token.getEndLine());
                    MultiplicativeExpression50.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(MultiplicativeExpression50,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 1531
    final public void UnaryExpression() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1531 of Java.javacc");
        // Code for expansion specified on line 1534 of Java.javacc
        boolean UnaryExpression51forced=false;
        UnaryExpression UnaryExpression51=null;
        if (buildTree) {
            UnaryExpression51=new UnaryExpression();
            Token start=getToken(1);
            UnaryExpression51.setBeginLine(start.beginLine);
            UnaryExpression51.setBeginColumn(start.beginColumn);
            UnaryExpression51.setInputSource(this.getInputSource());
            openNodeScope(UnaryExpression51);
            openNodeScopeHook(UnaryExpression51);
        }
        ParseException parseException51=null;
        try {
            switch(nextTokenKind()) {
                case 115:
                case 116:
                // Code for expansion specified on line 1534 of Java.javacc
                // Code for expansion specified on line 1534 of Java.javacc
                switch(nextTokenKind()) {
                    case 115:
                    // Code for expansion specified on line 1534 of Java.javacc
                    // Code for expansion specified on line 1534 of Java.javacc
                    consumeToken(115);
                    break;
                    case 116:
                    // Code for expansion specified on line 1534 of Java.javacc
                    // Code for expansion specified on line 1534 of Java.javacc
                    consumeToken(116);
                    break;
                    default:
                    consumeToken(-1);
                    throw new ParseException();
                }
                // Code for UnaryExpression specified on line 1534 of Java.javacc
                UnaryExpression();
                break;
                case 113:
                // Code for expansion specified on line 1536 of Java.javacc
                // Code for PreIncrementExpression specified on line 1536 of Java.javacc
                PreIncrementExpression();
                break;
                case 114:
                // Code for expansion specified on line 1538 of Java.javacc
                // Code for PreDecrementExpression specified on line 1538 of Java.javacc
                PreDecrementExpression();
                break;
                case 26:
                case 28:
                case 31:
                case 37:
                case 41:
                case 44:
                case 51:
                case 53:
                case 55:
                case 56:
                case 62:
                case 65:
                case 68:
                case 72:
                case 74:
                case LONG_LITERAL:
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case 91:
                case 103:
                case 104:
                case IDENTIFIER:
                // Code for expansion specified on line 1540 of Java.javacc
                // Code for UnaryExpressionNotPlusMinus specified on line 1540 of Java.javacc
                UnaryExpressionNotPlusMinus();
                break;
                default:
                consumeToken(-1);
                throw new ParseException();
            }
            if (trace_enabled) LOGGER.info("Exiting normally from UnaryExpression");
        }
        catch(ParseException e) {
            parseException51=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException51!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException51.getMessage());
                    clearNodeScope();
                }
                else {
                    UnaryExpression51.setEndLine(current_token.getEndLine());
                    UnaryExpression51.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(UnaryExpression51,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 1543
    final public void PreIncrementExpression() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1543 of Java.javacc");
        // Code for expansion specified on line 1546 of Java.javacc
        boolean PreIncrementExpression52forced=false;
        PreIncrementExpression PreIncrementExpression52=null;
        if (buildTree) {
            PreIncrementExpression52=new PreIncrementExpression();
            Token start=getToken(1);
            PreIncrementExpression52.setBeginLine(start.beginLine);
            PreIncrementExpression52.setBeginColumn(start.beginColumn);
            PreIncrementExpression52.setInputSource(this.getInputSource());
            openNodeScope(PreIncrementExpression52);
            openNodeScopeHook(PreIncrementExpression52);
        }
        ParseException parseException52=null;
        try {
            // Code for expansion specified on line 1546 of Java.javacc
            consumeToken(113);
            // Code for PrimaryExpression specified on line 1546 of Java.javacc
            PrimaryExpression();
            if (trace_enabled) LOGGER.info("Exiting normally from PreIncrementExpression");
        }
        catch(ParseException e) {
            parseException52=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException52!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException52.getMessage());
                    clearNodeScope();
                }
                else {
                    PreIncrementExpression52.setEndLine(current_token.getEndLine());
                    PreIncrementExpression52.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(PreIncrementExpression52,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 1549
    final public void PreDecrementExpression() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1549 of Java.javacc");
        // Code for expansion specified on line 1552 of Java.javacc
        boolean PreDecrementExpression53forced=false;
        PreDecrementExpression PreDecrementExpression53=null;
        if (buildTree) {
            PreDecrementExpression53=new PreDecrementExpression();
            Token start=getToken(1);
            PreDecrementExpression53.setBeginLine(start.beginLine);
            PreDecrementExpression53.setBeginColumn(start.beginColumn);
            PreDecrementExpression53.setInputSource(this.getInputSource());
            openNodeScope(PreDecrementExpression53);
            openNodeScopeHook(PreDecrementExpression53);
        }
        ParseException parseException53=null;
        try {
            // Code for expansion specified on line 1552 of Java.javacc
            consumeToken(114);
            // Code for PrimaryExpression specified on line 1552 of Java.javacc
            PrimaryExpression();
            if (trace_enabled) LOGGER.info("Exiting normally from PreDecrementExpression");
        }
        catch(ParseException e) {
            parseException53=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException53!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException53.getMessage());
                    clearNodeScope();
                }
                else {
                    PreDecrementExpression53.setEndLine(current_token.getEndLine());
                    PreDecrementExpression53.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(PreDecrementExpression53,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 1555
    final public void UnaryExpressionNotPlusMinus() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1555 of Java.javacc");
        // Code for expansion specified on line 1558 of Java.javacc
        boolean UnaryExpressionNotPlusMinus54forced=false;
        UnaryExpressionNotPlusMinus UnaryExpressionNotPlusMinus54=null;
        if (buildTree) {
            UnaryExpressionNotPlusMinus54=new UnaryExpressionNotPlusMinus();
            Token start=getToken(1);
            UnaryExpressionNotPlusMinus54.setBeginLine(start.beginLine);
            UnaryExpressionNotPlusMinus54.setBeginColumn(start.beginColumn);
            UnaryExpressionNotPlusMinus54.setInputSource(this.getInputSource());
            openNodeScope(UnaryExpressionNotPlusMinus54);
            openNodeScopeHook(UnaryExpressionNotPlusMinus54);
        }
        ParseException parseException54=null;
        try {
            switch(nextTokenKind()) {
                case 103:
                case 104:
                // Code for expansion specified on line 1558 of Java.javacc
                // Code for expansion specified on line 1558 of Java.javacc
                switch(nextTokenKind()) {
                    case 104:
                    // Code for expansion specified on line 1558 of Java.javacc
                    // Code for expansion specified on line 1558 of Java.javacc
                    consumeToken(104);
                    break;
                    case 103:
                    // Code for expansion specified on line 1558 of Java.javacc
                    // Code for expansion specified on line 1558 of Java.javacc
                    consumeToken(103);
                    break;
                    default:
                    consumeToken(-1);
                    throw new ParseException();
                }
                // Code for UnaryExpression specified on line 1558 of Java.javacc
                UnaryExpression();
                break;
                default:
                if (phase2_28(INFINITY)) {
                    // Code for expansion specified on line 1562 of Java.javacc
                    // Code for LambdaExpression specified on line 1563 of Java.javacc
                    LambdaExpression();
                }
                else if (phase2_29(INFINITY)) {
                    // Code for expansion specified on line 1565 of Java.javacc
                    // Code for CastExpression specified on line 1566 of Java.javacc
                    CastExpression();
                }
                else {
                    switch(nextTokenKind()) {
                        case 26:
                        case 28:
                        case 31:
                        case 37:
                        case 41:
                        case 44:
                        case 51:
                        case 53:
                        case 55:
                        case 56:
                        case 62:
                        case 65:
                        case 68:
                        case 72:
                        case 74:
                        case LONG_LITERAL:
                        case INTEGER_LITERAL:
                        case FLOATING_POINT_LITERAL:
                        case CHARACTER_LITERAL:
                        case STRING_LITERAL:
                        case 91:
                        case IDENTIFIER:
                        // Code for expansion specified on line 1568 of Java.javacc
                        // Code for PostfixExpression specified on line 1568 of Java.javacc
                        PostfixExpression();
                        break;
                        default:
                        consumeToken(-1);
                        throw new ParseException();
                    }
                }
            }
            if (trace_enabled) LOGGER.info("Exiting normally from UnaryExpressionNotPlusMinus");
        }
        catch(ParseException e) {
            parseException54=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException54!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException54.getMessage());
                    clearNodeScope();
                }
                else {
                    UnaryExpressionNotPlusMinus54.setEndLine(current_token.getEndLine());
                    UnaryExpressionNotPlusMinus54.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(UnaryExpressionNotPlusMinus54,nodeArity()>1);
                }
            }
        }
    }

    // This production is to determine lookahead only.  The LOOKAHEAD specifications
    // below are not used, but they are there just to indicate that we know about
    // this.
    // Java.javacc, line 1574
    final public void CastLookahead() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1574 of Java.javacc");
        // Code for expansion specified on line 1577 of Java.javacc
        if (phase2_30(3)) {
            // Code for expansion specified on line 1577 of Java.javacc
            // Code for expansion specified on line 1578 of Java.javacc
            consumeToken(91);
            // Code for PrimitiveType specified on line 1578 of Java.javacc
            PrimitiveType();
            // Code for expansion specified on line 1578 of Java.javacc
            consumeToken(92);
        }
        else if (phase2_31(INFINITY)) {
            // Code for expansion specified on line 1580 of Java.javacc
            // Code for expansion specified on line 1581 of Java.javacc
            consumeToken(91);
            // Code for Type specified on line 1581 of Java.javacc
            Type();
            // Code for expansion specified on line 1581 of Java.javacc
            consumeToken(95);
            // Code for expansion specified on line 1581 of Java.javacc
            consumeToken(96);
        }
        else {
            switch(nextTokenKind()) {
                case 91:
                // Code for expansion specified on line 1583 of Java.javacc
                // Code for expansion specified on line 1583 of Java.javacc
                consumeToken(91);
                // Code for Type specified on line 1583 of Java.javacc
                Type();
                // Code for expansion specified on line 1583 of Java.javacc
                label_68:
                while (true) {
                    int int47=nextTokenKind();
                    if (!(int47==119)) {
                        break label_68;
                    }
                    // Code for expansion specified on line 1583 of Java.javacc
                    // Code for expansion specified on line 1583 of Java.javacc
                    consumeToken(119);
                    // Code for Type specified on line 1583 of Java.javacc
                    Type();
                }
                // Code for expansion specified on line 1583 of Java.javacc
                consumeToken(92);
                // Code for expansion specified on line 1583 of Java.javacc
                switch(nextTokenKind()) {
                    case 104:
                    // Code for expansion specified on line 1583 of Java.javacc
                    // Code for expansion specified on line 1583 of Java.javacc
                    consumeToken(104);
                    break;
                    case 103:
                    // Code for expansion specified on line 1583 of Java.javacc
                    // Code for expansion specified on line 1583 of Java.javacc
                    consumeToken(103);
                    break;
                    case 91:
                    // Code for expansion specified on line 1583 of Java.javacc
                    // Code for expansion specified on line 1583 of Java.javacc
                    consumeToken(91);
                    break;
                    case IDENTIFIER:
                    // Code for expansion specified on line 1583 of Java.javacc
                    // Code for expansion specified on line 1583 of Java.javacc
                    consumeToken(IDENTIFIER);
                    break;
                    case 68:
                    // Code for expansion specified on line 1583 of Java.javacc
                    // Code for expansion specified on line 1583 of Java.javacc
                    consumeToken(68);
                    break;
                    case 65:
                    // Code for expansion specified on line 1583 of Java.javacc
                    // Code for expansion specified on line 1583 of Java.javacc
                    consumeToken(65);
                    break;
                    case 55:
                    // Code for expansion specified on line 1583 of Java.javacc
                    // Code for expansion specified on line 1583 of Java.javacc
                    consumeToken(55);
                    break;
                    case 41:
                    case 56:
                    case 72:
                    case LONG_LITERAL:
                    case INTEGER_LITERAL:
                    case FLOATING_POINT_LITERAL:
                    case CHARACTER_LITERAL:
                    case STRING_LITERAL:
                    // Code for expansion specified on line 1583 of Java.javacc
                    // Code for Literal specified on line 1583 of Java.javacc
                    Literal();
                    break;
                    default:
                    consumeToken(-1);
                    throw new ParseException();
                }
                break;
                default:
                consumeToken(-1);
                throw new ParseException();
            }
        }
        if (trace_enabled) LOGGER.info("Exiting normally from CastLookahead");
    }

    // Java.javacc, line 1586
    final public void PostfixExpression() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1586 of Java.javacc");
        // Code for expansion specified on line 1589 of Java.javacc
        boolean PostfixExpression55forced=false;
        PostfixExpression PostfixExpression55=null;
        if (buildTree) {
            PostfixExpression55=new PostfixExpression();
            Token start=getToken(1);
            PostfixExpression55.setBeginLine(start.beginLine);
            PostfixExpression55.setBeginColumn(start.beginColumn);
            PostfixExpression55.setInputSource(this.getInputSource());
            openNodeScope(PostfixExpression55);
            openNodeScopeHook(PostfixExpression55);
        }
        ParseException parseException55=null;
        try {
            // Code for PrimaryExpression specified on line 1589 of Java.javacc
            PrimaryExpression();
            // Code for expansion specified on line 1589 of Java.javacc
            int int48=nextTokenKind();
            if (int48==113||int48==114) {
                // Code for expansion specified on line 1589 of Java.javacc
                switch(nextTokenKind()) {
                    case 113:
                    // Code for expansion specified on line 1589 of Java.javacc
                    // Code for expansion specified on line 1589 of Java.javacc
                    consumeToken(113);
                    break;
                    case 114:
                    // Code for expansion specified on line 1589 of Java.javacc
                    // Code for expansion specified on line 1589 of Java.javacc
                    consumeToken(114);
                    break;
                    default:
                    consumeToken(-1);
                    throw new ParseException();
                }
            }
            if (trace_enabled) LOGGER.info("Exiting normally from PostfixExpression");
        }
        catch(ParseException e) {
            parseException55=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException55!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException55.getMessage());
                    clearNodeScope();
                }
                else {
                    PostfixExpression55.setEndLine(current_token.getEndLine());
                    PostfixExpression55.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(PostfixExpression55,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 1592
    final public void CastExpression() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1592 of Java.javacc");
        // Code for expansion specified on line 1595 of Java.javacc
        boolean CastExpression56forced=false;
        CastExpression CastExpression56=null;
        if (buildTree) {
            CastExpression56=new CastExpression();
            Token start=getToken(1);
            CastExpression56.setBeginLine(start.beginLine);
            CastExpression56.setBeginColumn(start.beginColumn);
            CastExpression56.setInputSource(this.getInputSource());
            openNodeScope(CastExpression56);
            openNodeScopeHook(CastExpression56);
        }
        ParseException parseException56=null;
        try {
            if (phase2_32(INFINITY)) {
                // Code for expansion specified on line 1595 of Java.javacc
                // Code for expansion specified on line 1596 of Java.javacc
                consumeToken(91);
                // Code for Type specified on line 1596 of Java.javacc
                Type();
                // Code for expansion specified on line 1596 of Java.javacc
                consumeToken(92);
                // Code for UnaryExpression specified on line 1596 of Java.javacc
                UnaryExpression();
            }
            else {
                switch(nextTokenKind()) {
                    case 91:
                    // Code for expansion specified on line 1598 of Java.javacc
                    // Code for expansion specified on line 1598 of Java.javacc
                    consumeToken(91);
                    // Code for Type specified on line 1598 of Java.javacc
                    Type();
                    // Code for expansion specified on line 1598 of Java.javacc
                    label_70:
                    while (true) {
                        int int49=nextTokenKind();
                        if (!(int49==119)) {
                            break label_70;
                        }
                        // Code for expansion specified on line 1598 of Java.javacc
                        // Code for expansion specified on line 1598 of Java.javacc
                        consumeToken(119);
                        // Code for Type specified on line 1598 of Java.javacc
                        Type();
                    }
                    // Code for expansion specified on line 1598 of Java.javacc
                    consumeToken(92);
                    // Code for UnaryExpressionNotPlusMinus specified on line 1598 of Java.javacc
                    UnaryExpressionNotPlusMinus();
                    break;
                    default:
                    consumeToken(-1);
                    throw new ParseException();
                }
            }
            if (trace_enabled) LOGGER.info("Exiting normally from CastExpression");
        }
        catch(ParseException e) {
            parseException56=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException56!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException56.getMessage());
                    clearNodeScope();
                }
                else {
                    CastExpression56.setEndLine(current_token.getEndLine());
                    CastExpression56.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(CastExpression56,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 1601
    final public Expression PrimaryExpression() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1601 of Java.javacc");
        // Code for expansion specified on line 1604 of Java.javacc
        boolean PrimaryExpression57forced=false;
        PrimaryExpression PrimaryExpression57=null;
        if (buildTree) {
            PrimaryExpression57=new PrimaryExpression();
            Token start=getToken(1);
            PrimaryExpression57.setBeginLine(start.beginLine);
            PrimaryExpression57.setBeginColumn(start.beginColumn);
            PrimaryExpression57.setInputSource(this.getInputSource());
            openNodeScope(PrimaryExpression57);
            openNodeScopeHook(PrimaryExpression57);
        }
        ParseException parseException57=null;
        try {
            // Code for PrimaryPrefix specified on line 1604 of Java.javacc
            PrimaryPrefix();
            // Code for expansion specified on line 1605 of Java.javacc
            label_71:
            while (true) {
                if (!(phase2_33(2))) {
                    break label_71;
                }
                // Code for expansion specified on line 1605 of Java.javacc
                // Code for PrimarySuffix specified on line 1605 of Java.javacc
                PrimarySuffix();
            }
            // Code for expansion specified on line 1606 of Java.javacc
            return PrimaryExpression57;
        }
        catch(ParseException e) {
            parseException57=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException57!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException57.getMessage());
                    clearNodeScope();
                }
                else {
                    PrimaryExpression57.setEndLine(current_token.getEndLine());
                    PrimaryExpression57.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(PrimaryExpression57,true);
                }
            }
        }
    }

    // Java.javacc, line 1611
    final public void MemberSelector() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1611 of Java.javacc");
        // Code for expansion specified on line 1615 of Java.javacc
        boolean MemberSelector58forced=false;
        MemberSelector MemberSelector58=null;
        if (buildTree) {
            MemberSelector58=new MemberSelector();
            Token start=getToken(1);
            MemberSelector58.setBeginLine(start.beginLine);
            MemberSelector58.setBeginColumn(start.beginColumn);
            MemberSelector58.setInputSource(this.getInputSource());
            openNodeScope(MemberSelector58);
            openNodeScopeHook(MemberSelector58);
        }
        ParseException parseException58=null;
        try {
            // Code for expansion specified on line 1615 of Java.javacc
            consumeToken(99);
            // Code for TypeArguments specified on line 1615 of Java.javacc
            TypeArguments();
            // Code for expansion specified on line 1615 of Java.javacc
            consumeToken(IDENTIFIER);
            if (trace_enabled) LOGGER.info("Exiting normally from MemberSelector");
        }
        catch(ParseException e) {
            parseException58=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException58!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException58.getMessage());
                    clearNodeScope();
                }
                else {
                    MemberSelector58.setEndLine(current_token.getEndLine());
                    MemberSelector58.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(MemberSelector58,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 1618
    final public void PrimaryPrefix() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1618 of Java.javacc");
        // Code for expansion specified on line 1621 of Java.javacc
        boolean PrimaryPrefix59forced=false;
        PrimaryPrefix PrimaryPrefix59=null;
        if (buildTree) {
            PrimaryPrefix59=new PrimaryPrefix();
            Token start=getToken(1);
            PrimaryPrefix59.setBeginLine(start.beginLine);
            PrimaryPrefix59.setBeginColumn(start.beginColumn);
            PrimaryPrefix59.setInputSource(this.getInputSource());
            openNodeScope(PrimaryPrefix59);
            openNodeScopeHook(PrimaryPrefix59);
        }
        ParseException parseException59=null;
        try {
            switch(nextTokenKind()) {
                case 41:
                case 56:
                case 72:
                case LONG_LITERAL:
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                // Code for expansion specified on line 1621 of Java.javacc
                // Code for Literal specified on line 1621 of Java.javacc
                Literal();
                break;
                case 68:
                // Code for expansion specified on line 1623 of Java.javacc
                // Code for expansion specified on line 1623 of Java.javacc
                consumeToken(68);
                break;
                default:
                if (phase2_34(2)) {
                    // Code for expansion specified on line 1625 of Java.javacc
                    // Code for expansion specified on line 1626 of Java.javacc
                    consumeToken(65);
                    // Code for expansion specified on line 1626 of Java.javacc
                    consumeToken(99);
                    // Code for expansion specified on line 1626 of Java.javacc
                    consumeToken(IDENTIFIER);
                }
                else {
                    switch(nextTokenKind()) {
                        case 91:
                        // Code for expansion specified on line 1628 of Java.javacc
                        // Code for expansion specified on line 1628 of Java.javacc
                        consumeToken(91);
                        // Code for Expression specified on line 1628 of Java.javacc
                        Expression();
                        // Code for expansion specified on line 1628 of Java.javacc
                        consumeToken(92);
                        break;
                        case 55:
                        // Code for expansion specified on line 1630 of Java.javacc
                        // Code for AllocationExpression specified on line 1630 of Java.javacc
                        AllocationExpression();
                        break;
                        default:
                        if (phase2_35(INFINITY)) {
                            // Code for expansion specified on line 1632 of Java.javacc
                            // Code for PrimitiveType specified on line 1633 of Java.javacc
                            PrimitiveType();
                            // Code for expansion specified on line 1633 of Java.javacc
                            consumeToken(99);
                            // Code for expansion specified on line 1633 of Java.javacc
                            consumeToken(32);
                        }
                        else if (phase2_36(INFINITY)) {
                            // Code for expansion specified on line 1635 of Java.javacc
                            // Code for ReturnType specified on line 1636 of Java.javacc
                            ReturnType();
                            // Code for expansion specified on line 1636 of Java.javacc
                            consumeToken(99);
                            // Code for expansion specified on line 1636 of Java.javacc
                            consumeToken(32);
                        }
                        else if (phase2_37(INFINITY)) {
                            // Code for expansion specified on line 1638 of Java.javacc
                            // Code for MethodReference specified on line 1639 of Java.javacc
                            MethodReference();
                        }
                        else {
                            switch(nextTokenKind()) {
                                case IDENTIFIER:
                                // Code for expansion specified on line 1641 of Java.javacc
                                // Code for Name specified on line 1641 of Java.javacc
                                Name();
                                break;
                                default:
                                consumeToken(-1);
                                throw new ParseException();
                            }
                        }
                    }
                }
            }
            if (trace_enabled) LOGGER.info("Exiting normally from PrimaryPrefix");
        }
        catch(ParseException e) {
            parseException59=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException59!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException59.getMessage());
                    clearNodeScope();
                }
                else {
                    PrimaryPrefix59.setEndLine(current_token.getEndLine());
                    PrimaryPrefix59.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(PrimaryPrefix59,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 1644
    final public void MethodReference() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1644 of Java.javacc");
        // Code for expansion specified on line 1647 of Java.javacc
        boolean MethodReference60forced=false;
        MethodReference MethodReference60=null;
        if (buildTree) {
            MethodReference60=new MethodReference();
            Token start=getToken(1);
            MethodReference60.setBeginLine(start.beginLine);
            MethodReference60.setBeginColumn(start.beginColumn);
            MethodReference60.setInputSource(this.getInputSource());
            openNodeScope(MethodReference60);
            openNodeScopeHook(MethodReference60);
        }
        ParseException parseException60=null;
        try {
            // Code for expansion specified on line 1647 of Java.javacc
            switch(nextTokenKind()) {
                case 26:
                case 28:
                case 31:
                case 37:
                case 44:
                case 51:
                case 53:
                case 62:
                case IDENTIFIER:
                // Code for expansion specified on line 1647 of Java.javacc
                // Code for Type specified on line 1647 of Java.javacc
                Type();
                break;
                case 65:
                // Code for expansion specified on line 1647 of Java.javacc
                // Code for expansion specified on line 1647 of Java.javacc
                consumeToken(65);
                break;
                default:
                consumeToken(-1);
                throw new ParseException();
            }
            // Code for expansion specified on line 1648 of Java.javacc
            consumeToken(136);
            // Code for expansion specified on line 1649 of Java.javacc
            switch(nextTokenKind()) {
                case IDENTIFIER:
                // Code for expansion specified on line 1649 of Java.javacc
                // Code for expansion specified on line 1649 of Java.javacc
                consumeToken(IDENTIFIER);
                break;
                case 55:
                // Code for expansion specified on line 1649 of Java.javacc
                // Code for expansion specified on line 1649 of Java.javacc
                consumeToken(55);
                break;
                default:
                consumeToken(-1);
                throw new ParseException();
            }
            if (trace_enabled) LOGGER.info("Exiting normally from MethodReference");
        }
        catch(ParseException e) {
            parseException60=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException60!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException60.getMessage());
                    clearNodeScope();
                }
                else {
                    MethodReference60.setEndLine(current_token.getEndLine());
                    MethodReference60.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(MethodReference60,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 1652
    final public void PrimarySuffix() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1652 of Java.javacc");
        // Code for expansion specified on line 1655 of Java.javacc
        boolean PrimarySuffix61forced=false;
        PrimarySuffix PrimarySuffix61=null;
        if (buildTree) {
            PrimarySuffix61=new PrimarySuffix();
            Token start=getToken(1);
            PrimarySuffix61.setBeginLine(start.beginLine);
            PrimarySuffix61.setBeginColumn(start.beginColumn);
            PrimarySuffix61.setInputSource(this.getInputSource());
            openNodeScope(PrimarySuffix61);
            openNodeScopeHook(PrimarySuffix61);
        }
        ParseException parseException61=null;
        try {
            if (phase2_38(2)) {
                // Code for expansion specified on line 1655 of Java.javacc
                // Code for expansion specified on line 1656 of Java.javacc
                consumeToken(99);
                // Code for expansion specified on line 1656 of Java.javacc
                switch(nextTokenKind()) {
                    case 68:
                    // Code for expansion specified on line 1656 of Java.javacc
                    // Code for expansion specified on line 1656 of Java.javacc
                    consumeToken(68);
                    break;
                    case 65:
                    // Code for expansion specified on line 1656 of Java.javacc
                    // Code for expansion specified on line 1656 of Java.javacc
                    consumeToken(65);
                    break;
                    default:
                    consumeToken(-1);
                    throw new ParseException();
                }
            }
            else if (phase2_39(2)) {
                // Code for expansion specified on line 1658 of Java.javacc
                // Code for expansion specified on line 1659 of Java.javacc
                consumeToken(99);
                // Code for AllocationExpression specified on line 1659 of Java.javacc
                AllocationExpression();
            }
            else if (phase2_40(3)) {
                // Code for expansion specified on line 1661 of Java.javacc
                // Code for MemberSelector specified on line 1662 of Java.javacc
                MemberSelector();
            }
            else {
                switch(nextTokenKind()) {
                    case 95:
                    // Code for expansion specified on line 1664 of Java.javacc
                    // Code for expansion specified on line 1664 of Java.javacc
                    consumeToken(95);
                    // Code for expansion specified on line 1664 of Java.javacc
                    int int50=nextTokenKind();
                    if (int50==26||int50==28||int50==31||int50==37||int50==41||int50==44||int50==51||int50==53||int50==55||int50==56||int50==62||int50==65||int50==68||int50==72||int50==74||int50==LONG_LITERAL||int50==INTEGER_LITERAL||int50==FLOATING_POINT_LITERAL||int50==CHARACTER_LITERAL||int50==STRING_LITERAL||int50==91||int50==103||int50==104||int50==113||int50==114||int50==115||int50==116||int50==IDENTIFIER) {
                        // Code for expansion specified on line 1664 of Java.javacc
                        // Code for Expression specified on line 1664 of Java.javacc
                        Expression();
                    }
                    // Code for expansion specified on line 1664 of Java.javacc
                    consumeToken(96);
                    break;
                    case 99:
                    // Code for expansion specified on line 1666 of Java.javacc
                    // Code for expansion specified on line 1666 of Java.javacc
                    consumeToken(99);
                    // Code for expansion specified on line 1666 of Java.javacc
                    consumeToken(IDENTIFIER);
                    break;
                    case 136:
                    // Code for expansion specified on line 1668 of Java.javacc
                    // Code for expansion specified on line 1668 of Java.javacc
                    consumeToken(136);
                    // Code for expansion specified on line 1668 of Java.javacc
                    switch(nextTokenKind()) {
                        case IDENTIFIER:
                        // Code for expansion specified on line 1668 of Java.javacc
                        // Code for expansion specified on line 1668 of Java.javacc
                        consumeToken(IDENTIFIER);
                        break;
                        case 55:
                        // Code for expansion specified on line 1668 of Java.javacc
                        // Code for expansion specified on line 1668 of Java.javacc
                        consumeToken(55);
                        break;
                        default:
                        consumeToken(-1);
                        throw new ParseException();
                    }
                    break;
                    case 91:
                    // Code for expansion specified on line 1670 of Java.javacc
                    // Code for Arguments specified on line 1670 of Java.javacc
                    Arguments();
                    break;
                    default:
                    consumeToken(-1);
                    throw new ParseException();
                }
            }
            if (trace_enabled) LOGGER.info("Exiting normally from PrimarySuffix");
        }
        catch(ParseException e) {
            parseException61=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException61!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException61.getMessage());
                    clearNodeScope();
                }
                else {
                    PrimarySuffix61.setEndLine(current_token.getEndLine());
                    PrimarySuffix61.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(PrimarySuffix61,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 1673
    final public void Literal() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1673 of Java.javacc");
        // Code for expansion specified on line 1676 of Java.javacc
        switch(nextTokenKind()) {
            case INTEGER_LITERAL:
            // Code for expansion specified on line 1676 of Java.javacc
            // Code for expansion specified on line 1676 of Java.javacc
            consumeToken(INTEGER_LITERAL);
            break;
            case LONG_LITERAL:
            // Code for expansion specified on line 1678 of Java.javacc
            // Code for expansion specified on line 1678 of Java.javacc
            consumeToken(LONG_LITERAL);
            break;
            case FLOATING_POINT_LITERAL:
            // Code for expansion specified on line 1680 of Java.javacc
            // Code for expansion specified on line 1680 of Java.javacc
            consumeToken(FLOATING_POINT_LITERAL);
            break;
            case CHARACTER_LITERAL:
            // Code for expansion specified on line 1682 of Java.javacc
            // Code for expansion specified on line 1682 of Java.javacc
            consumeToken(CHARACTER_LITERAL);
            break;
            case STRING_LITERAL:
            // Code for expansion specified on line 1684 of Java.javacc
            // Code for expansion specified on line 1684 of Java.javacc
            consumeToken(STRING_LITERAL);
            break;
            case 72:
            // Code for expansion specified on line 1686 of Java.javacc
            // Code for expansion specified on line 1686 of Java.javacc
            consumeToken(72);
            break;
            case 41:
            // Code for expansion specified on line 1688 of Java.javacc
            // Code for expansion specified on line 1688 of Java.javacc
            consumeToken(41);
            break;
            case 56:
            // Code for expansion specified on line 1690 of Java.javacc
            // Code for expansion specified on line 1690 of Java.javacc
            consumeToken(56);
            break;
            default:
            consumeToken(-1);
            throw new ParseException();
        }
        if (trace_enabled) LOGGER.info("Exiting normally from Literal");
    }

    /*
int IntegerLiteral() :
{}
{
  <INTEGER_LITERAL>
        {
          try {
            return Integer.parseInt(current_token.toString());
          } catch (NumberFormatException e) {
            throw new Error();
          }
        }
}*/
    // Java.javacc, line 1706
    final public InvocationArgs Arguments() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1706 of Java.javacc");
        // Code for expansion specified on line 1709 of Java.javacc
        boolean Arguments62forced=false;
        InvocationArgs Arguments62=null;
        if (buildTree) {
            Arguments62=new InvocationArgs();
            Token start=getToken(1);
            Arguments62.setBeginLine(start.beginLine);
            Arguments62.setBeginColumn(start.beginColumn);
            Arguments62.setInputSource(this.getInputSource());
            openNodeScope(Arguments62);
            openNodeScopeHook(Arguments62);
        }
        ParseException parseException62=null;
        try {
            // Code for expansion specified on line 1709 of Java.javacc
            consumeToken(91);
            // Code for expansion specified on line 1710 of Java.javacc
            int int52=nextTokenKind();
            if (int52==26||int52==28||int52==31||int52==37||int52==41||int52==44||int52==51||int52==53||int52==55||int52==56||int52==62||int52==65||int52==68||int52==72||int52==74||int52==LONG_LITERAL||int52==INTEGER_LITERAL||int52==FLOATING_POINT_LITERAL||int52==CHARACTER_LITERAL||int52==STRING_LITERAL||int52==91||int52==103||int52==104||int52==113||int52==114||int52==115||int52==116||int52==IDENTIFIER) {
                // Code for expansion specified on line 1710 of Java.javacc
                // Code for Expression specified on line 1710 of Java.javacc
                Expression();
                // Code for expansion specified on line 1710 of Java.javacc
                label_74:
                while (true) {
                    int int51=nextTokenKind();
                    if (!(int51==98)) {
                        break label_74;
                    }
                    // Code for expansion specified on line 1710 of Java.javacc
                    // Code for expansion specified on line 1710 of Java.javacc
                    consumeToken(98);
                    // Code for Expression specified on line 1710 of Java.javacc
                    Expression();
                }
            }
            // Code for expansion specified on line 1711 of Java.javacc
            consumeToken(92);
            // Code for expansion specified on line 1712 of Java.javacc
            return Arguments62;
        }
        catch(ParseException e) {
            parseException62=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException62!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException62.getMessage());
                    clearNodeScope();
                }
                else {
                    Arguments62.setEndLine(current_token.getEndLine());
                    Arguments62.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(Arguments62,true);
                }
            }
        }
    }

    // Java.javacc, line 1741
    final public void AllocationExpression() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1741 of Java.javacc");
        // Code for expansion specified on line 1744 of Java.javacc
        boolean AllocationExpression63forced=false;
        AllocationExpression AllocationExpression63=null;
        if (buildTree) {
            AllocationExpression63=new AllocationExpression();
            Token start=getToken(1);
            AllocationExpression63.setBeginLine(start.beginLine);
            AllocationExpression63.setBeginColumn(start.beginColumn);
            AllocationExpression63.setInputSource(this.getInputSource());
            openNodeScope(AllocationExpression63);
            openNodeScopeHook(AllocationExpression63);
        }
        ParseException parseException63=null;
        try {
            if (phase2_41(2)) {
                // Code for expansion specified on line 1744 of Java.javacc
                // Code for expansion specified on line 1745 of Java.javacc
                consumeToken(55);
                // Code for PrimitiveType specified on line 1745 of Java.javacc
                PrimitiveType();
                // Code for ArrayDimsAndInits specified on line 1745 of Java.javacc
                ArrayDimsAndInits();
            }
            else {
                switch(nextTokenKind()) {
                    case 55:
                    // Code for expansion specified on line 1747 of Java.javacc
                    // Code for expansion specified on line 1747 of Java.javacc
                    consumeToken(55);
                    // Code for ClassOrInterfaceType specified on line 1747 of Java.javacc
                    ClassOrInterfaceType();
                    // Code for expansion specified on line 1747 of Java.javacc
                    int int53=nextTokenKind();
                    if (int53==102) {
                        // Code for expansion specified on line 1747 of Java.javacc
                        // Code for PossiblyEmptyTypeArguments specified on line 1747 of Java.javacc
                        PossiblyEmptyTypeArguments();
                    }
                    // Code for expansion specified on line 1749 of Java.javacc
                    switch(nextTokenKind()) {
                        case 95:
                        // Code for expansion specified on line 1749 of Java.javacc
                        // Code for ArrayDimsAndInits specified on line 1749 of Java.javacc
                        ArrayDimsAndInits();
                        break;
                        case 91:
                        // Code for expansion specified on line 1751 of Java.javacc
                        // Code for Arguments specified on line 1751 of Java.javacc
                        Arguments();
                        // Code for expansion specified on line 1751 of Java.javacc
                        int int54=nextTokenKind();
                        if (int54==93) {
                            // Code for expansion specified on line 1751 of Java.javacc
                            // Code for ClassOrInterfaceBody specified on line 1751 of Java.javacc
                            ClassOrInterfaceBody(false);
                        }
                        break;
                        default:
                        consumeToken(-1);
                        throw new ParseException();
                    }
                    break;
                    default:
                    consumeToken(-1);
                    throw new ParseException();
                }
            }
            if (trace_enabled) LOGGER.info("Exiting normally from AllocationExpression");
        }
        catch(ParseException e) {
            parseException63=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException63!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException63.getMessage());
                    clearNodeScope();
                }
                else {
                    AllocationExpression63.setEndLine(current_token.getEndLine());
                    AllocationExpression63.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(AllocationExpression63,nodeArity()>1);
                }
            }
        }
    }

    /*
 * The third LOOKAHEAD specification below is to parse to PrimarySuffix
 * if there is an expression between the "[...]".
 */
    // Java.javacc, line 1759
    final public void ArrayDimsAndInits() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1759 of Java.javacc");
        // Code for expansion specified on line 1762 of Java.javacc
        boolean ArrayDimsAndInits64forced=false;
        ArrayDimsAndInits ArrayDimsAndInits64=null;
        if (buildTree) {
            ArrayDimsAndInits64=new ArrayDimsAndInits();
            Token start=getToken(1);
            ArrayDimsAndInits64.setBeginLine(start.beginLine);
            ArrayDimsAndInits64.setBeginColumn(start.beginColumn);
            ArrayDimsAndInits64.setInputSource(this.getInputSource());
            openNodeScope(ArrayDimsAndInits64);
            openNodeScopeHook(ArrayDimsAndInits64);
        }
        ParseException parseException64=null;
        try {
            if (phase2_44(2)) {
                // Code for expansion specified on line 1762 of Java.javacc
                // Code for expansion specified on line 1763 of Java.javacc
                label_77:
                while (true) {
                    // Code for expansion specified on line 1763 of Java.javacc
                    // Code for expansion specified on line 1763 of Java.javacc
                    consumeToken(95);
                    // Code for Expression specified on line 1763 of Java.javacc
                    Expression();
                    // Code for expansion specified on line 1763 of Java.javacc
                    consumeToken(96);
                    if (!(phase2_42(2))) {
                        break label_77;
                    }
                }
                // Code for expansion specified on line 1763 of Java.javacc
                label_78:
                while (true) {
                    if (!(phase2_43(2))) {
                        break label_78;
                    }
                    // Code for expansion specified on line 1763 of Java.javacc
                    // Code for expansion specified on line 1763 of Java.javacc
                    consumeToken(95);
                    // Code for expansion specified on line 1763 of Java.javacc
                    consumeToken(96);
                }
            }
            else {
                switch(nextTokenKind()) {
                    case 95:
                    // Code for expansion specified on line 1765 of Java.javacc
                    // Code for expansion specified on line 1765 of Java.javacc
                    label_79:
                    while (true) {
                        // Code for expansion specified on line 1765 of Java.javacc
                        // Code for expansion specified on line 1765 of Java.javacc
                        consumeToken(95);
                        // Code for expansion specified on line 1765 of Java.javacc
                        consumeToken(96);
                        int int55=nextTokenKind();
                        if (!(int55==95)) {
                            break label_79;
                        }
                    }
                    // Code for ArrayInitializer specified on line 1765 of Java.javacc
                    ArrayInitializer();
                    break;
                    default:
                    consumeToken(-1);
                    throw new ParseException();
                }
            }
            if (trace_enabled) LOGGER.info("Exiting normally from ArrayDimsAndInits");
        }
        catch(ParseException e) {
            parseException64=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException64!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException64.getMessage());
                    clearNodeScope();
                }
                else {
                    ArrayDimsAndInits64.setEndLine(current_token.getEndLine());
                    ArrayDimsAndInits64.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(ArrayDimsAndInits64,nodeArity()>1);
                }
            }
        }
    }

    /*
 * Statement syntax follows.
 */
    // Java.javacc, line 1773
    final public void Statement() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1773 of Java.javacc");
        // Code for expansion specified on line 1776 of Java.javacc
        if (phase2_45(2)) {
            // Code for expansion specified on line 1776 of Java.javacc
            // Code for LabeledStatement specified on line 1777 of Java.javacc
            LabeledStatement();
        }
        else {
            switch(nextTokenKind()) {
                case 25:
                // Code for expansion specified on line 1779 of Java.javacc
                // Code for AssertStatement specified on line 1779 of Java.javacc
                AssertStatement();
                break;
                case 93:
                // Code for expansion specified on line 1781 of Java.javacc
                // Code for Block specified on line 1781 of Java.javacc
                Block();
                break;
                case 97:
                // Code for expansion specified on line 1783 of Java.javacc
                // Code for EmptyStatement specified on line 1783 of Java.javacc
                EmptyStatement();
                break;
                case 26:
                case 28:
                case 31:
                case 37:
                case 41:
                case 44:
                case 51:
                case 53:
                case 55:
                case 56:
                case 62:
                case 65:
                case 68:
                case 72:
                case 74:
                case LONG_LITERAL:
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case 91:
                case 113:
                case 114:
                case IDENTIFIER:
                // Code for expansion specified on line 1785 of Java.javacc
                // Code for StatementExpression specified on line 1785 of Java.javacc
                StatementExpression();
                // Code for expansion specified on line 1785 of Java.javacc
                consumeToken(97);
                break;
                case 66:
                // Code for expansion specified on line 1787 of Java.javacc
                // Code for SwitchStatement specified on line 1787 of Java.javacc
                SwitchStatement();
                break;
                case 47:
                // Code for expansion specified on line 1789 of Java.javacc
                // Code for IfStatement specified on line 1789 of Java.javacc
                IfStatement();
                break;
                case 76:
                // Code for expansion specified on line 1791 of Java.javacc
                // Code for WhileStatement specified on line 1791 of Java.javacc
                WhileStatement();
                break;
                case 36:
                // Code for expansion specified on line 1793 of Java.javacc
                // Code for DoStatement specified on line 1793 of Java.javacc
                DoStatement();
                break;
                case 45:
                // Code for expansion specified on line 1795 of Java.javacc
                // Code for ForStatement specified on line 1795 of Java.javacc
                ForStatement();
                break;
                case 27:
                // Code for expansion specified on line 1797 of Java.javacc
                // Code for BreakStatement specified on line 1797 of Java.javacc
                BreakStatement();
                break;
                case 34:
                // Code for expansion specified on line 1799 of Java.javacc
                // Code for ContinueStatement specified on line 1799 of Java.javacc
                ContinueStatement();
                break;
                case 61:
                // Code for expansion specified on line 1801 of Java.javacc
                // Code for ReturnStatement specified on line 1801 of Java.javacc
                ReturnStatement();
                break;
                case 69:
                // Code for expansion specified on line 1803 of Java.javacc
                // Code for ThrowStatement specified on line 1803 of Java.javacc
                ThrowStatement();
                break;
                case 67:
                // Code for expansion specified on line 1805 of Java.javacc
                // Code for SynchronizedStatement specified on line 1805 of Java.javacc
                SynchronizedStatement();
                break;
                default:
                if (phase2_46(INFINITY)) {
                    // Code for expansion specified on line 1807 of Java.javacc
                    // Code for ClassicTryStatement specified on line 1808 of Java.javacc
                    ClassicTryStatement();
                }
                else if (phase2_47(INFINITY)) {
                    // Code for expansion specified on line 1810 of Java.javacc
                    // Code for TryWithResources specified on line 1811 of Java.javacc
                    TryWithResources();
                }
                else {
                    consumeToken(-1);
                    throw new ParseException();
                }
            }
        }
        if (trace_enabled) LOGGER.info("Exiting normally from Statement");
    }

    // Java.javacc, line 1814
    final public void AssertStatement() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1814 of Java.javacc");
        // Code for expansion specified on line 1817 of Java.javacc
        boolean AssertStatement65forced=false;
        AssertStatement AssertStatement65=null;
        if (buildTree) {
            AssertStatement65=new AssertStatement();
            Token start=getToken(1);
            AssertStatement65.setBeginLine(start.beginLine);
            AssertStatement65.setBeginColumn(start.beginColumn);
            AssertStatement65.setInputSource(this.getInputSource());
            openNodeScope(AssertStatement65);
            openNodeScopeHook(AssertStatement65);
        }
        ParseException parseException65=null;
        try {
            // Code for expansion specified on line 1817 of Java.javacc
            consumeToken(25);
            // Code for Expression specified on line 1817 of Java.javacc
            Expression();
            // Code for expansion specified on line 1817 of Java.javacc
            int int56=nextTokenKind();
            if (int56==106) {
                // Code for expansion specified on line 1817 of Java.javacc
                // Code for expansion specified on line 1817 of Java.javacc
                consumeToken(106);
                // Code for Expression specified on line 1817 of Java.javacc
                Expression();
            }
            // Code for expansion specified on line 1817 of Java.javacc
            consumeToken(97);
            if (trace_enabled) LOGGER.info("Exiting normally from AssertStatement");
        }
        catch(ParseException e) {
            parseException65=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException65!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException65.getMessage());
                    clearNodeScope();
                }
                else {
                    AssertStatement65.setEndLine(current_token.getEndLine());
                    AssertStatement65.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(AssertStatement65,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 1820
    final public void LabeledStatement() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1820 of Java.javacc");
        // Code for expansion specified on line 1823 of Java.javacc
        boolean LabeledStatement66forced=false;
        LabeledStatement LabeledStatement66=null;
        if (buildTree) {
            LabeledStatement66=new LabeledStatement();
            Token start=getToken(1);
            LabeledStatement66.setBeginLine(start.beginLine);
            LabeledStatement66.setBeginColumn(start.beginColumn);
            LabeledStatement66.setInputSource(this.getInputSource());
            openNodeScope(LabeledStatement66);
            openNodeScopeHook(LabeledStatement66);
        }
        ParseException parseException66=null;
        try {
            // Code for expansion specified on line 1823 of Java.javacc
            consumeToken(IDENTIFIER);
            // Code for expansion specified on line 1823 of Java.javacc
            consumeToken(106);
            // Code for Statement specified on line 1823 of Java.javacc
            Statement();
            if (trace_enabled) LOGGER.info("Exiting normally from LabeledStatement");
        }
        catch(ParseException e) {
            parseException66=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException66!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException66.getMessage());
                    clearNodeScope();
                }
                else {
                    LabeledStatement66.setEndLine(current_token.getEndLine());
                    LabeledStatement66.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(LabeledStatement66,nodeArity()>1);
                }
            }
        }
    }

    /*
   Overrides the production defined in 
   in Java.javacc. Only to set the inJavaCode variable to true.
*/
    // JavaCC.javacc, line 348
    final public CodeBlock Block() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 348 of JavaCC.javacc");
        token_source.inJavaCode=true;
        // Code for expansion specified on line 353 of JavaCC.javacc
        boolean Block67forced=false;
        CodeBlock Block67=null;
        if (buildTree) {
            Block67=new CodeBlock();
            Token start=getToken(1);
            Block67.setBeginLine(start.beginLine);
            Block67.setBeginColumn(start.beginColumn);
            Block67.setInputSource(this.getInputSource());
            openNodeScope(Block67);
            openNodeScopeHook(Block67);
        }
        ParseException parseException67=null;
        try {
            // Code for expansion specified on line 353 of JavaCC.javacc
            consumeToken(93);
            // Code for expansion specified on line 354 of JavaCC.javacc
            label_81:
            while (true) {
                int int57=nextTokenKind();
                if (!(int57==24||int57==25||int57==26||int57==27||int57==28||int57==31||int57==32||int57==34||int57==36||int57==37||int57==41||int57==42||int57==44||int57==45||int57==47||int57==51||int57==52||int57==53||int57==54||int57==55||int57==56||int57==58||int57==59||int57==60||int57==61||int57==62||int57==63||int57==64||int57==65||int57==66||int57==67||int57==68||int57==69||int57==71||int57==72||int57==73||int57==74||int57==75||int57==76||int57==LONG_LITERAL||int57==INTEGER_LITERAL||int57==FLOATING_POINT_LITERAL||int57==CHARACTER_LITERAL||int57==STRING_LITERAL||int57==91||int57==93||int57==97||int57==113||int57==114||int57==138||int57==IDENTIFIER)) {
                    break label_81;
                }
                // Code for expansion specified on line 354 of JavaCC.javacc
                // Code for BlockStatement specified on line 354 of JavaCC.javacc
                BlockStatement();
            }
            // Code for expansion specified on line 355 of JavaCC.javacc
            consumeToken(94);
            // Code for expansion specified on line 356 of JavaCC.javacc
            return Block67;
        }
        catch(ParseException e) {
            parseException67=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException67!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException67.getMessage());
                    clearNodeScope();
                }
                else {
                    Block67.setEndLine(current_token.getEndLine());
                    Block67.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(Block67,true);
                }
            }
        }
    }

    // Java.javacc, line 1851
    final public void BlockStatement() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1851 of Java.javacc");
        // Code for expansion specified on line 1854 of Java.javacc
        if (phase2_48(INFINITY)) {
            // Code for expansion specified on line 1854 of Java.javacc
            // Code for LocalVariableDeclaration specified on line 1855 of Java.javacc
            LocalVariableDeclaration();
            // Code for expansion specified on line 1855 of Java.javacc
            consumeToken(97);
        }
        else if (phase2_49(INFINITY)) {
            // Code for expansion specified on line 1857 of Java.javacc
            // Code for Statement specified on line 1857 of Java.javacc
            Statement();
        }
        else if (phase2_50(INFINITY)) {
            // Code for expansion specified on line 1859 of Java.javacc
            // Code for Modifiers specified on line 1860 of Java.javacc
            Modifiers();
            // Code for ClassDeclaration specified on line 1860 of Java.javacc
            ClassDeclaration();
        }
        else {
            switch(nextTokenKind()) {
                case 52:
                // Code for expansion specified on line 1862 of Java.javacc
                // Code for InterfaceDeclaration specified on line 1862 of Java.javacc
                InterfaceDeclaration();
                break;
                default:
                consumeToken(-1);
                throw new ParseException();
            }
        }
        if (trace_enabled) LOGGER.info("Exiting normally from BlockStatement");
    }

    // Java.javacc, line 1865
    final public void LocalVariableDeclaration() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1865 of Java.javacc");
        // Code for expansion specified on line 1868 of Java.javacc
        boolean LocalVariableDeclaration68forced=false;
        LocalVariableDeclaration LocalVariableDeclaration68=null;
        if (buildTree) {
            LocalVariableDeclaration68=new LocalVariableDeclaration();
            Token start=getToken(1);
            LocalVariableDeclaration68.setBeginLine(start.beginLine);
            LocalVariableDeclaration68.setBeginColumn(start.beginColumn);
            LocalVariableDeclaration68.setInputSource(this.getInputSource());
            openNodeScope(LocalVariableDeclaration68);
            openNodeScopeHook(LocalVariableDeclaration68);
        }
        ParseException parseException68=null;
        try {
            // Code for Modifiers specified on line 1868 of Java.javacc
            Modifiers();
            // Code for Type specified on line 1868 of Java.javacc
            Type();
            // Code for VariableDeclarator specified on line 1868 of Java.javacc
            VariableDeclarator();
            // Code for expansion specified on line 1868 of Java.javacc
            label_82:
            while (true) {
                int int58=nextTokenKind();
                if (!(int58==98)) {
                    break label_82;
                }
                // Code for expansion specified on line 1868 of Java.javacc
                // Code for expansion specified on line 1868 of Java.javacc
                consumeToken(98);
                // Code for VariableDeclarator specified on line 1868 of Java.javacc
                VariableDeclarator();
            }
            if (trace_enabled) LOGGER.info("Exiting normally from LocalVariableDeclaration");
        }
        catch(ParseException e) {
            parseException68=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException68!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException68.getMessage());
                    clearNodeScope();
                }
                else {
                    LocalVariableDeclaration68.setEndLine(current_token.getEndLine());
                    LocalVariableDeclaration68.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(LocalVariableDeclaration68,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 1871
    final public void EmptyStatement() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1871 of Java.javacc");
        // Code for expansion specified on line 1874 of Java.javacc
        boolean EmptyStatement69forced=false;
        EmptyStatement EmptyStatement69=null;
        if (buildTree) {
            EmptyStatement69=new EmptyStatement();
            Token start=getToken(1);
            EmptyStatement69.setBeginLine(start.beginLine);
            EmptyStatement69.setBeginColumn(start.beginColumn);
            EmptyStatement69.setInputSource(this.getInputSource());
            openNodeScope(EmptyStatement69);
            openNodeScopeHook(EmptyStatement69);
        }
        ParseException parseException69=null;
        try {
            // Code for expansion specified on line 1874 of Java.javacc
            consumeToken(97);
            if (trace_enabled) LOGGER.info("Exiting normally from EmptyStatement");
        }
        catch(ParseException e) {
            parseException69=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException69!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException69.getMessage());
                    clearNodeScope();
                }
                else {
                    EmptyStatement69.setEndLine(current_token.getEndLine());
                    EmptyStatement69.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(EmptyStatement69,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 1877
    final public void StatementExpression() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1877 of Java.javacc");
        // Code for expansion specified on line 1885 of Java.javacc
        boolean StatementExpression70forced=false;
        StatementExpression StatementExpression70=null;
        if (buildTree) {
            StatementExpression70=new StatementExpression();
            Token start=getToken(1);
            StatementExpression70.setBeginLine(start.beginLine);
            StatementExpression70.setBeginColumn(start.beginColumn);
            StatementExpression70.setInputSource(this.getInputSource());
            openNodeScope(StatementExpression70);
            openNodeScopeHook(StatementExpression70);
        }
        ParseException parseException70=null;
        try {
            switch(nextTokenKind()) {
                case 113:
                // Code for expansion specified on line 1885 of Java.javacc
                // Code for PreIncrementExpression specified on line 1885 of Java.javacc
                PreIncrementExpression();
                break;
                case 114:
                // Code for expansion specified on line 1887 of Java.javacc
                // Code for PreDecrementExpression specified on line 1887 of Java.javacc
                PreDecrementExpression();
                break;
                case 26:
                case 28:
                case 31:
                case 37:
                case 41:
                case 44:
                case 51:
                case 53:
                case 55:
                case 56:
                case 62:
                case 65:
                case 68:
                case 72:
                case 74:
                case LONG_LITERAL:
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case 91:
                case IDENTIFIER:
                // Code for expansion specified on line 1889 of Java.javacc
                // Code for PrimaryExpression specified on line 1889 of Java.javacc
                PrimaryExpression();
                // Code for expansion specified on line 1890 of Java.javacc
                int int59=nextTokenKind();
                if (int59==100||int59==113||int59==114||int59==124||int59==125||int59==126||int59==127||int59==128||int59==129||int59==130||int59==131||int59==132||int59==133||int59==134) {
                    // Code for expansion specified on line 1891 of Java.javacc
                    switch(nextTokenKind()) {
                        case 113:
                        // Code for expansion specified on line 1891 of Java.javacc
                        // Code for expansion specified on line 1891 of Java.javacc
                        consumeToken(113);
                        break;
                        case 114:
                        // Code for expansion specified on line 1893 of Java.javacc
                        // Code for expansion specified on line 1893 of Java.javacc
                        consumeToken(114);
                        break;
                        case 100:
                        case 124:
                        case 125:
                        case 126:
                        case 127:
                        case 128:
                        case 129:
                        case 130:
                        case 131:
                        case 132:
                        case 133:
                        case 134:
                        // Code for expansion specified on line 1895 of Java.javacc
                        // Code for AssignmentOperator specified on line 1895 of Java.javacc
                        AssignmentOperator();
                        // Code for Expression specified on line 1895 of Java.javacc
                        Expression();
                        break;
                        default:
                        consumeToken(-1);
                        throw new ParseException();
                    }
                }
                break;
                default:
                consumeToken(-1);
                throw new ParseException();
            }
            if (trace_enabled) LOGGER.info("Exiting normally from StatementExpression");
        }
        catch(ParseException e) {
            parseException70=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException70!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException70.getMessage());
                    clearNodeScope();
                }
                else {
                    StatementExpression70.setEndLine(current_token.getEndLine());
                    StatementExpression70.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(StatementExpression70,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 1899
    final public void SwitchStatement() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1899 of Java.javacc");
        // Code for expansion specified on line 1902 of Java.javacc
        boolean SwitchStatement71forced=false;
        SwitchStatement SwitchStatement71=null;
        if (buildTree) {
            SwitchStatement71=new SwitchStatement();
            Token start=getToken(1);
            SwitchStatement71.setBeginLine(start.beginLine);
            SwitchStatement71.setBeginColumn(start.beginColumn);
            SwitchStatement71.setInputSource(this.getInputSource());
            openNodeScope(SwitchStatement71);
            openNodeScopeHook(SwitchStatement71);
        }
        ParseException parseException71=null;
        try {
            // Code for expansion specified on line 1902 of Java.javacc
            consumeToken(66);
            // Code for expansion specified on line 1902 of Java.javacc
            consumeToken(91);
            // Code for Expression specified on line 1902 of Java.javacc
            Expression();
            // Code for expansion specified on line 1902 of Java.javacc
            consumeToken(92);
            // Code for expansion specified on line 1902 of Java.javacc
            consumeToken(93);
            // Code for expansion specified on line 1903 of Java.javacc
            label_84:
            while (true) {
                int int60=nextTokenKind();
                if (!(int60==29||int60==35)) {
                    break label_84;
                }
                // Code for expansion specified on line 1903 of Java.javacc
                // Code for CaseStatement specified on line 1903 of Java.javacc
                CaseStatement();
            }
            // Code for expansion specified on line 1904 of Java.javacc
            consumeToken(94);
            if (trace_enabled) LOGGER.info("Exiting normally from SwitchStatement");
        }
        catch(ParseException e) {
            parseException71=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException71!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException71.getMessage());
                    clearNodeScope();
                }
                else {
                    SwitchStatement71.setEndLine(current_token.getEndLine());
                    SwitchStatement71.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(SwitchStatement71,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 1907
    final public void CaseStatement() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1907 of Java.javacc");
        // Code for expansion specified on line 1910 of Java.javacc
        boolean CaseStatement72forced=false;
        CaseStatement CaseStatement72=null;
        if (buildTree) {
            CaseStatement72=new CaseStatement();
            Token start=getToken(1);
            CaseStatement72.setBeginLine(start.beginLine);
            CaseStatement72.setBeginColumn(start.beginColumn);
            CaseStatement72.setInputSource(this.getInputSource());
            openNodeScope(CaseStatement72);
            openNodeScopeHook(CaseStatement72);
        }
        ParseException parseException72=null;
        try {
            // Code for SwitchLabel specified on line 1910 of Java.javacc
            SwitchLabel();
            // Code for expansion specified on line 1911 of Java.javacc
            label_85:
            while (true) {
                int int61=nextTokenKind();
                if (!(int61==24||int61==25||int61==26||int61==27||int61==28||int61==31||int61==32||int61==34||int61==36||int61==37||int61==41||int61==42||int61==44||int61==45||int61==47||int61==51||int61==52||int61==53||int61==54||int61==55||int61==56||int61==58||int61==59||int61==60||int61==61||int61==62||int61==63||int61==64||int61==65||int61==66||int61==67||int61==68||int61==69||int61==71||int61==72||int61==73||int61==74||int61==75||int61==76||int61==LONG_LITERAL||int61==INTEGER_LITERAL||int61==FLOATING_POINT_LITERAL||int61==CHARACTER_LITERAL||int61==STRING_LITERAL||int61==91||int61==93||int61==97||int61==113||int61==114||int61==138||int61==IDENTIFIER)) {
                    break label_85;
                }
                // Code for expansion specified on line 1911 of Java.javacc
                // Code for BlockStatement specified on line 1911 of Java.javacc
                BlockStatement();
            }
            if (trace_enabled) LOGGER.info("Exiting normally from CaseStatement");
        }
        catch(ParseException e) {
            parseException72=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException72!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException72.getMessage());
                    clearNodeScope();
                }
                else {
                    CaseStatement72.setEndLine(current_token.getEndLine());
                    CaseStatement72.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(CaseStatement72,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 1914
    final public void SwitchLabel() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1914 of Java.javacc");
        // Code for expansion specified on line 1917 of Java.javacc
        switch(nextTokenKind()) {
            case 29:
            // Code for expansion specified on line 1917 of Java.javacc
            // Code for expansion specified on line 1917 of Java.javacc
            consumeToken(29);
            // Code for Expression specified on line 1917 of Java.javacc
            Expression();
            // Code for expansion specified on line 1917 of Java.javacc
            consumeToken(106);
            break;
            case 35:
            // Code for expansion specified on line 1919 of Java.javacc
            // Code for expansion specified on line 1919 of Java.javacc
            consumeToken(35);
            // Code for expansion specified on line 1919 of Java.javacc
            consumeToken(106);
            break;
            default:
            consumeToken(-1);
            throw new ParseException();
        }
        if (trace_enabled) LOGGER.info("Exiting normally from SwitchLabel");
    }

    // Java.javacc, line 1922
    final public void IfStatement() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1922 of Java.javacc");
        // Code for expansion specified on line 1930 of Java.javacc
        boolean IfStatement73forced=false;
        IfStatement IfStatement73=null;
        if (buildTree) {
            IfStatement73=new IfStatement();
            Token start=getToken(1);
            IfStatement73.setBeginLine(start.beginLine);
            IfStatement73.setBeginColumn(start.beginColumn);
            IfStatement73.setInputSource(this.getInputSource());
            openNodeScope(IfStatement73);
            openNodeScopeHook(IfStatement73);
        }
        ParseException parseException73=null;
        try {
            // Code for expansion specified on line 1930 of Java.javacc
            consumeToken(47);
            // Code for expansion specified on line 1930 of Java.javacc
            consumeToken(91);
            // Code for Expression specified on line 1930 of Java.javacc
            Expression();
            // Code for expansion specified on line 1930 of Java.javacc
            consumeToken(92);
            // Code for Statement specified on line 1930 of Java.javacc
            Statement();
            // Code for expansion specified on line 1930 of Java.javacc
            int int62=nextTokenKind();
            if (int62==38) {
                // Code for expansion specified on line 1930 of Java.javacc
                // Code for expansion specified on line 1930 of Java.javacc
                consumeToken(38);
                // Code for Statement specified on line 1930 of Java.javacc
                Statement();
            }
            if (trace_enabled) LOGGER.info("Exiting normally from IfStatement");
        }
        catch(ParseException e) {
            parseException73=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException73!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException73.getMessage());
                    clearNodeScope();
                }
                else {
                    IfStatement73.setEndLine(current_token.getEndLine());
                    IfStatement73.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(IfStatement73,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 1933
    final public void WhileStatement() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1933 of Java.javacc");
        // Code for expansion specified on line 1936 of Java.javacc
        boolean WhileStatement74forced=false;
        WhileStatement WhileStatement74=null;
        if (buildTree) {
            WhileStatement74=new WhileStatement();
            Token start=getToken(1);
            WhileStatement74.setBeginLine(start.beginLine);
            WhileStatement74.setBeginColumn(start.beginColumn);
            WhileStatement74.setInputSource(this.getInputSource());
            openNodeScope(WhileStatement74);
            openNodeScopeHook(WhileStatement74);
        }
        ParseException parseException74=null;
        try {
            // Code for expansion specified on line 1936 of Java.javacc
            consumeToken(76);
            // Code for expansion specified on line 1936 of Java.javacc
            consumeToken(91);
            // Code for Expression specified on line 1936 of Java.javacc
            Expression();
            // Code for expansion specified on line 1936 of Java.javacc
            consumeToken(92);
            // Code for Statement specified on line 1936 of Java.javacc
            Statement();
            if (trace_enabled) LOGGER.info("Exiting normally from WhileStatement");
        }
        catch(ParseException e) {
            parseException74=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException74!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException74.getMessage());
                    clearNodeScope();
                }
                else {
                    WhileStatement74.setEndLine(current_token.getEndLine());
                    WhileStatement74.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(WhileStatement74,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 1939
    final public void DoStatement() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1939 of Java.javacc");
        // Code for expansion specified on line 1942 of Java.javacc
        boolean DoStatement75forced=false;
        DoStatement DoStatement75=null;
        if (buildTree) {
            DoStatement75=new DoStatement();
            Token start=getToken(1);
            DoStatement75.setBeginLine(start.beginLine);
            DoStatement75.setBeginColumn(start.beginColumn);
            DoStatement75.setInputSource(this.getInputSource());
            openNodeScope(DoStatement75);
            openNodeScopeHook(DoStatement75);
        }
        ParseException parseException75=null;
        try {
            // Code for expansion specified on line 1942 of Java.javacc
            consumeToken(36);
            // Code for Statement specified on line 1942 of Java.javacc
            Statement();
            // Code for expansion specified on line 1942 of Java.javacc
            consumeToken(76);
            // Code for expansion specified on line 1942 of Java.javacc
            consumeToken(91);
            // Code for Expression specified on line 1942 of Java.javacc
            Expression();
            // Code for expansion specified on line 1942 of Java.javacc
            consumeToken(92);
            // Code for expansion specified on line 1942 of Java.javacc
            consumeToken(97);
            if (trace_enabled) LOGGER.info("Exiting normally from DoStatement");
        }
        catch(ParseException e) {
            parseException75=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException75!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException75.getMessage());
                    clearNodeScope();
                }
                else {
                    DoStatement75.setEndLine(current_token.getEndLine());
                    DoStatement75.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(DoStatement75,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 1945
    final public void ForStatement() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1945 of Java.javacc");
        // Code for expansion specified on line 1948 of Java.javacc
        boolean ForStatement76forced=false;
        ForStatement ForStatement76=null;
        if (buildTree) {
            ForStatement76=new ForStatement();
            Token start=getToken(1);
            ForStatement76.setBeginLine(start.beginLine);
            ForStatement76.setBeginColumn(start.beginColumn);
            ForStatement76.setInputSource(this.getInputSource());
            openNodeScope(ForStatement76);
            openNodeScopeHook(ForStatement76);
        }
        ParseException parseException76=null;
        try {
            // Code for expansion specified on line 1948 of Java.javacc
            consumeToken(45);
            // Code for expansion specified on line 1948 of Java.javacc
            consumeToken(91);
            // Code for expansion specified on line 1950 of Java.javacc
            if (phase2_51(INFINITY)) {
                // Code for expansion specified on line 1950 of Java.javacc
                // Code for Modifiers specified on line 1951 of Java.javacc
                Modifiers();
                // Code for Type specified on line 1951 of Java.javacc
                Type();
                // Code for expansion specified on line 1951 of Java.javacc
                consumeToken(IDENTIFIER);
                // Code for expansion specified on line 1951 of Java.javacc
                consumeToken(106);
                // Code for Expression specified on line 1951 of Java.javacc
                Expression();
            }
            else {
                switch(nextTokenKind()) {
                    case 24:
                    case 26:
                    case 28:
                    case 31:
                    case 37:
                    case 41:
                    case 42:
                    case 44:
                    case 51:
                    case 53:
                    case 54:
                    case 55:
                    case 56:
                    case 58:
                    case 59:
                    case 60:
                    case 62:
                    case 63:
                    case 64:
                    case 65:
                    case 67:
                    case 68:
                    case 71:
                    case 72:
                    case 74:
                    case 75:
                    case LONG_LITERAL:
                    case INTEGER_LITERAL:
                    case FLOATING_POINT_LITERAL:
                    case CHARACTER_LITERAL:
                    case STRING_LITERAL:
                    case 91:
                    case 97:
                    case 113:
                    case 114:
                    case 138:
                    case IDENTIFIER:
                    // Code for expansion specified on line 1953 of Java.javacc
                    // Code for expansion specified on line 1953 of Java.javacc
                    int int63=nextTokenKind();
                    if (int63==24||int63==26||int63==28||int63==31||int63==37||int63==41||int63==42||int63==44||int63==51||int63==53||int63==54||int63==55||int63==56||int63==58||int63==59||int63==60||int63==62||int63==63||int63==64||int63==65||int63==67||int63==68||int63==71||int63==72||int63==74||int63==75||int63==LONG_LITERAL||int63==INTEGER_LITERAL||int63==FLOATING_POINT_LITERAL||int63==CHARACTER_LITERAL||int63==STRING_LITERAL||int63==91||int63==113||int63==114||int63==138||int63==IDENTIFIER) {
                        // Code for expansion specified on line 1953 of Java.javacc
                        // Code for ForInit specified on line 1953 of Java.javacc
                        ForInit();
                    }
                    // Code for expansion specified on line 1953 of Java.javacc
                    consumeToken(97);
                    // Code for expansion specified on line 1953 of Java.javacc
                    int int64=nextTokenKind();
                    if (int64==26||int64==28||int64==31||int64==37||int64==41||int64==44||int64==51||int64==53||int64==55||int64==56||int64==62||int64==65||int64==68||int64==72||int64==74||int64==LONG_LITERAL||int64==INTEGER_LITERAL||int64==FLOATING_POINT_LITERAL||int64==CHARACTER_LITERAL||int64==STRING_LITERAL||int64==91||int64==103||int64==104||int64==113||int64==114||int64==115||int64==116||int64==IDENTIFIER) {
                        // Code for expansion specified on line 1953 of Java.javacc
                        // Code for Expression specified on line 1953 of Java.javacc
                        Expression();
                    }
                    // Code for expansion specified on line 1953 of Java.javacc
                    consumeToken(97);
                    // Code for expansion specified on line 1953 of Java.javacc
                    int int65=nextTokenKind();
                    if (int65==26||int65==28||int65==31||int65==37||int65==41||int65==44||int65==51||int65==53||int65==55||int65==56||int65==62||int65==65||int65==68||int65==72||int65==74||int65==LONG_LITERAL||int65==INTEGER_LITERAL||int65==FLOATING_POINT_LITERAL||int65==CHARACTER_LITERAL||int65==STRING_LITERAL||int65==91||int65==113||int65==114||int65==IDENTIFIER) {
                        // Code for expansion specified on line 1953 of Java.javacc
                        // Code for ForUpdate specified on line 1953 of Java.javacc
                        ForUpdate();
                    }
                    break;
                    default:
                    consumeToken(-1);
                    throw new ParseException();
                }
            }
            // Code for expansion specified on line 1956 of Java.javacc
            consumeToken(92);
            // Code for Statement specified on line 1956 of Java.javacc
            Statement();
            if (trace_enabled) LOGGER.info("Exiting normally from ForStatement");
        }
        catch(ParseException e) {
            parseException76=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException76!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException76.getMessage());
                    clearNodeScope();
                }
                else {
                    ForStatement76.setEndLine(current_token.getEndLine());
                    ForStatement76.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(ForStatement76,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 1959
    final public void ForInit() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1959 of Java.javacc");
        // Code for expansion specified on line 1962 of Java.javacc
        boolean ForInit77forced=false;
        ForInit ForInit77=null;
        if (buildTree) {
            ForInit77=new ForInit();
            Token start=getToken(1);
            ForInit77.setBeginLine(start.beginLine);
            ForInit77.setBeginColumn(start.beginColumn);
            ForInit77.setInputSource(this.getInputSource());
            openNodeScope(ForInit77);
            openNodeScopeHook(ForInit77);
        }
        ParseException parseException77=null;
        try {
            if (phase2_52(INFINITY)) {
                // Code for expansion specified on line 1962 of Java.javacc
                // Code for LocalVariableDeclaration specified on line 1963 of Java.javacc
                LocalVariableDeclaration();
            }
            else {
                switch(nextTokenKind()) {
                    case 26:
                    case 28:
                    case 31:
                    case 37:
                    case 41:
                    case 44:
                    case 51:
                    case 53:
                    case 55:
                    case 56:
                    case 62:
                    case 65:
                    case 68:
                    case 72:
                    case 74:
                    case LONG_LITERAL:
                    case INTEGER_LITERAL:
                    case FLOATING_POINT_LITERAL:
                    case CHARACTER_LITERAL:
                    case STRING_LITERAL:
                    case 91:
                    case 113:
                    case 114:
                    case IDENTIFIER:
                    // Code for expansion specified on line 1965 of Java.javacc
                    // Code for StatementExpressionList specified on line 1965 of Java.javacc
                    StatementExpressionList();
                    break;
                    default:
                    consumeToken(-1);
                    throw new ParseException();
                }
            }
            if (trace_enabled) LOGGER.info("Exiting normally from ForInit");
        }
        catch(ParseException e) {
            parseException77=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException77!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException77.getMessage());
                    clearNodeScope();
                }
                else {
                    ForInit77.setEndLine(current_token.getEndLine());
                    ForInit77.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(ForInit77,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 1968
    final public void StatementExpressionList() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1968 of Java.javacc");
        // Code for expansion specified on line 1971 of Java.javacc
        boolean StatementExpressionList78forced=false;
        StatementExpressionList StatementExpressionList78=null;
        if (buildTree) {
            StatementExpressionList78=new StatementExpressionList();
            Token start=getToken(1);
            StatementExpressionList78.setBeginLine(start.beginLine);
            StatementExpressionList78.setBeginColumn(start.beginColumn);
            StatementExpressionList78.setInputSource(this.getInputSource());
            openNodeScope(StatementExpressionList78);
            openNodeScopeHook(StatementExpressionList78);
        }
        ParseException parseException78=null;
        try {
            // Code for StatementExpression specified on line 1971 of Java.javacc
            StatementExpression();
            // Code for expansion specified on line 1971 of Java.javacc
            label_90:
            while (true) {
                int int66=nextTokenKind();
                if (!(int66==98)) {
                    break label_90;
                }
                // Code for expansion specified on line 1971 of Java.javacc
                // Code for expansion specified on line 1971 of Java.javacc
                consumeToken(98);
                // Code for StatementExpression specified on line 1971 of Java.javacc
                StatementExpression();
            }
            if (trace_enabled) LOGGER.info("Exiting normally from StatementExpressionList");
        }
        catch(ParseException e) {
            parseException78=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException78!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException78.getMessage());
                    clearNodeScope();
                }
                else {
                    StatementExpressionList78.setEndLine(current_token.getEndLine());
                    StatementExpressionList78.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(StatementExpressionList78,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 1974
    final public void ForUpdate() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1974 of Java.javacc");
        // Code for expansion specified on line 1977 of Java.javacc
        boolean ForUpdate79forced=false;
        ForUpdate ForUpdate79=null;
        if (buildTree) {
            ForUpdate79=new ForUpdate();
            Token start=getToken(1);
            ForUpdate79.setBeginLine(start.beginLine);
            ForUpdate79.setBeginColumn(start.beginColumn);
            ForUpdate79.setInputSource(this.getInputSource());
            openNodeScope(ForUpdate79);
            openNodeScopeHook(ForUpdate79);
        }
        ParseException parseException79=null;
        try {
            // Code for StatementExpressionList specified on line 1977 of Java.javacc
            StatementExpressionList();
            if (trace_enabled) LOGGER.info("Exiting normally from ForUpdate");
        }
        catch(ParseException e) {
            parseException79=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException79!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException79.getMessage());
                    clearNodeScope();
                }
                else {
                    ForUpdate79.setEndLine(current_token.getEndLine());
                    ForUpdate79.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(ForUpdate79,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 1980
    final public void BreakStatement() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1980 of Java.javacc");
        // Code for expansion specified on line 1983 of Java.javacc
        boolean BreakStatement80forced=false;
        BreakStatement BreakStatement80=null;
        if (buildTree) {
            BreakStatement80=new BreakStatement();
            Token start=getToken(1);
            BreakStatement80.setBeginLine(start.beginLine);
            BreakStatement80.setBeginColumn(start.beginColumn);
            BreakStatement80.setInputSource(this.getInputSource());
            openNodeScope(BreakStatement80);
            openNodeScopeHook(BreakStatement80);
        }
        ParseException parseException80=null;
        try {
            // Code for expansion specified on line 1983 of Java.javacc
            consumeToken(27);
            // Code for expansion specified on line 1983 of Java.javacc
            int int67=nextTokenKind();
            if (int67==IDENTIFIER) {
                // Code for expansion specified on line 1983 of Java.javacc
                // Code for expansion specified on line 1983 of Java.javacc
                consumeToken(IDENTIFIER);
            }
            // Code for expansion specified on line 1983 of Java.javacc
            consumeToken(97);
            if (trace_enabled) LOGGER.info("Exiting normally from BreakStatement");
        }
        catch(ParseException e) {
            parseException80=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException80!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException80.getMessage());
                    clearNodeScope();
                }
                else {
                    BreakStatement80.setEndLine(current_token.getEndLine());
                    BreakStatement80.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(BreakStatement80,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 1986
    final public void ContinueStatement() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1986 of Java.javacc");
        // Code for expansion specified on line 1989 of Java.javacc
        boolean ContinueStatement81forced=false;
        ContinueStatement ContinueStatement81=null;
        if (buildTree) {
            ContinueStatement81=new ContinueStatement();
            Token start=getToken(1);
            ContinueStatement81.setBeginLine(start.beginLine);
            ContinueStatement81.setBeginColumn(start.beginColumn);
            ContinueStatement81.setInputSource(this.getInputSource());
            openNodeScope(ContinueStatement81);
            openNodeScopeHook(ContinueStatement81);
        }
        ParseException parseException81=null;
        try {
            // Code for expansion specified on line 1989 of Java.javacc
            consumeToken(34);
            // Code for expansion specified on line 1989 of Java.javacc
            int int68=nextTokenKind();
            if (int68==IDENTIFIER) {
                // Code for expansion specified on line 1989 of Java.javacc
                // Code for expansion specified on line 1989 of Java.javacc
                consumeToken(IDENTIFIER);
            }
            // Code for expansion specified on line 1989 of Java.javacc
            consumeToken(97);
            if (trace_enabled) LOGGER.info("Exiting normally from ContinueStatement");
        }
        catch(ParseException e) {
            parseException81=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException81!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException81.getMessage());
                    clearNodeScope();
                }
                else {
                    ContinueStatement81.setEndLine(current_token.getEndLine());
                    ContinueStatement81.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(ContinueStatement81,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 1992
    final public void ReturnStatement() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1992 of Java.javacc");
        // Code for expansion specified on line 1995 of Java.javacc
        boolean ReturnStatement82forced=false;
        ReturnStatement ReturnStatement82=null;
        if (buildTree) {
            ReturnStatement82=new ReturnStatement();
            Token start=getToken(1);
            ReturnStatement82.setBeginLine(start.beginLine);
            ReturnStatement82.setBeginColumn(start.beginColumn);
            ReturnStatement82.setInputSource(this.getInputSource());
            openNodeScope(ReturnStatement82);
            openNodeScopeHook(ReturnStatement82);
        }
        ParseException parseException82=null;
        try {
            // Code for expansion specified on line 1995 of Java.javacc
            consumeToken(61);
            // Code for expansion specified on line 1996 of Java.javacc
            int int69=nextTokenKind();
            if (int69==26||int69==28||int69==31||int69==37||int69==41||int69==44||int69==51||int69==53||int69==55||int69==56||int69==62||int69==65||int69==68||int69==72||int69==74||int69==LONG_LITERAL||int69==INTEGER_LITERAL||int69==FLOATING_POINT_LITERAL||int69==CHARACTER_LITERAL||int69==STRING_LITERAL||int69==91||int69==103||int69==104||int69==113||int69==114||int69==115||int69==116||int69==IDENTIFIER) {
                // Code for expansion specified on line 1997 of Java.javacc
                // Code for Expression specified on line 1997 of Java.javacc
                Expression();
            }
            // Code for expansion specified on line 1999 of Java.javacc
            consumeToken(97);
            if (trace_enabled) LOGGER.info("Exiting normally from ReturnStatement");
        }
        catch(ParseException e) {
            parseException82=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException82!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException82.getMessage());
                    clearNodeScope();
                }
                else {
                    ReturnStatement82.setEndLine(current_token.getEndLine());
                    ReturnStatement82.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(ReturnStatement82,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 2002
    final public void ThrowStatement() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 2002 of Java.javacc");
        // Code for expansion specified on line 2005 of Java.javacc
        boolean ThrowStatement83forced=false;
        ThrowStatement ThrowStatement83=null;
        if (buildTree) {
            ThrowStatement83=new ThrowStatement();
            Token start=getToken(1);
            ThrowStatement83.setBeginLine(start.beginLine);
            ThrowStatement83.setBeginColumn(start.beginColumn);
            ThrowStatement83.setInputSource(this.getInputSource());
            openNodeScope(ThrowStatement83);
            openNodeScopeHook(ThrowStatement83);
        }
        ParseException parseException83=null;
        try {
            // Code for expansion specified on line 2005 of Java.javacc
            consumeToken(69);
            // Code for Expression specified on line 2006 of Java.javacc
            Expression();
            // Code for expansion specified on line 2007 of Java.javacc
            consumeToken(97);
            if (trace_enabled) LOGGER.info("Exiting normally from ThrowStatement");
        }
        catch(ParseException e) {
            parseException83=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException83!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException83.getMessage());
                    clearNodeScope();
                }
                else {
                    ThrowStatement83.setEndLine(current_token.getEndLine());
                    ThrowStatement83.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(ThrowStatement83,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 2010
    final public void SynchronizedStatement() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 2010 of Java.javacc");
        // Code for expansion specified on line 2013 of Java.javacc
        boolean SynchronizedStatement84forced=false;
        SynchronizedStatement SynchronizedStatement84=null;
        if (buildTree) {
            SynchronizedStatement84=new SynchronizedStatement();
            Token start=getToken(1);
            SynchronizedStatement84.setBeginLine(start.beginLine);
            SynchronizedStatement84.setBeginColumn(start.beginColumn);
            SynchronizedStatement84.setInputSource(this.getInputSource());
            openNodeScope(SynchronizedStatement84);
            openNodeScopeHook(SynchronizedStatement84);
        }
        ParseException parseException84=null;
        try {
            // Code for expansion specified on line 2013 of Java.javacc
            consumeToken(67);
            // Code for expansion specified on line 2013 of Java.javacc
            consumeToken(91);
            // Code for Expression specified on line 2013 of Java.javacc
            Expression();
            // Code for expansion specified on line 2013 of Java.javacc
            consumeToken(92);
            // Code for Block specified on line 2013 of Java.javacc
            Block();
            if (trace_enabled) LOGGER.info("Exiting normally from SynchronizedStatement");
        }
        catch(ParseException e) {
            parseException84=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException84!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException84.getMessage());
                    clearNodeScope();
                }
                else {
                    SynchronizedStatement84.setEndLine(current_token.getEndLine());
                    SynchronizedStatement84.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(SynchronizedStatement84,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 2015
    final public ClassicTryStatement ClassicTryStatement() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 2015 of Java.javacc");
        // Code for expansion specified on line 2023 of Java.javacc
        boolean ClassicTryStatement85forced=false;
        ClassicTryStatement ClassicTryStatement85=null;
        if (buildTree) {
            ClassicTryStatement85=new ClassicTryStatement();
            Token start=getToken(1);
            ClassicTryStatement85.setBeginLine(start.beginLine);
            ClassicTryStatement85.setBeginColumn(start.beginColumn);
            ClassicTryStatement85.setInputSource(this.getInputSource());
            openNodeScope(ClassicTryStatement85);
            openNodeScopeHook(ClassicTryStatement85);
        }
        ParseException parseException85=null;
        try {
            // Code for expansion specified on line 2023 of Java.javacc
            consumeToken(73);
            // Code for Block specified on line 2025 of Java.javacc
            Block();
            // Code for expansion specified on line 2027 of Java.javacc
            switch(nextTokenKind()) {
                case 43:
                // Code for expansion specified on line 2027 of Java.javacc
                // Code for FinallyBlock specified on line 2027 of Java.javacc
                FinallyBlock();
                break;
                case 30:
                // Code for expansion specified on line 2029 of Java.javacc
                // Code for expansion specified on line 2030 of Java.javacc
                // Code for expansion specified on line 2030 of Java.javacc
                label_94:
                while (true) {
                    // Code for expansion specified on line 2030 of Java.javacc
                    // Code for CatchBlock specified on line 2030 of Java.javacc
                    CatchBlock();
                    int int70=nextTokenKind();
                    if (!(int70==30)) {
                        break label_94;
                    }
                }
                // Code for expansion specified on line 2031 of Java.javacc
                int int71=nextTokenKind();
                if (int71==43) {
                    // Code for expansion specified on line 2031 of Java.javacc
                    // Code for FinallyBlock specified on line 2031 of Java.javacc
                    FinallyBlock();
                }
                break;
                default:
                consumeToken(-1);
                throw new ParseException();
            }
            // Code for expansion specified on line 2034 of Java.javacc
            return ClassicTryStatement85;
        }
        catch(ParseException e) {
            parseException85=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException85!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException85.getMessage());
                    clearNodeScope();
                }
                else {
                    ClassicTryStatement85.setEndLine(current_token.getEndLine());
                    ClassicTryStatement85.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(ClassicTryStatement85,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 2039
    final public TryWithResources TryWithResources() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 2039 of Java.javacc");
        // Code for expansion specified on line 2042 of Java.javacc
        boolean TryWithResources86forced=false;
        TryWithResources TryWithResources86=null;
        if (buildTree) {
            TryWithResources86=new TryWithResources();
            Token start=getToken(1);
            TryWithResources86.setBeginLine(start.beginLine);
            TryWithResources86.setBeginColumn(start.beginColumn);
            TryWithResources86.setInputSource(this.getInputSource());
            openNodeScope(TryWithResources86);
            openNodeScopeHook(TryWithResources86);
        }
        ParseException parseException86=null;
        try {
            // Code for expansion specified on line 2042 of Java.javacc
            consumeToken(73);
            // Code for expansion specified on line 2043 of Java.javacc
            consumeToken(91);
            // Code for expansion specified on line 2045 of Java.javacc
            if (phase2_53(INFINITY)) {
                // Code for expansion specified on line 2045 of Java.javacc
                // Code for LocalVariableDeclaration specified on line 2046 of Java.javacc
                LocalVariableDeclaration();
            }
            else {
                switch(nextTokenKind()) {
                    case IDENTIFIER:
                    // Code for expansion specified on line 2048 of Java.javacc
                    // Code for Name specified on line 2048 of Java.javacc
                    Name();
                    break;
                    default:
                    consumeToken(-1);
                    throw new ParseException();
                }
            }
            // Code for expansion specified on line 2057 of Java.javacc
            label_96:
            while (true) {
                int int72=nextTokenKind();
                if (!(int72==97)) {
                    break label_96;
                }
                // Code for expansion specified on line 2051 of Java.javacc
                // Code for expansion specified on line 2051 of Java.javacc
                consumeToken(97);
                // Code for expansion specified on line 2052 of Java.javacc
                int int73=nextTokenKind();
                if (int73==24||int73==26||int73==28||int73==31||int73==37||int73==42||int73==44||int73==51||int73==53||int73==54||int73==58||int73==59||int73==60||int73==62||int73==63||int73==64||int73==67||int73==71||int73==75||int73==138||int73==IDENTIFIER) {
                    // Code for expansion specified on line 2053 of Java.javacc
                    if (phase2_54(INFINITY)) {
                        // Code for expansion specified on line 2053 of Java.javacc
                        // Code for LocalVariableDeclaration specified on line 2053 of Java.javacc
                        LocalVariableDeclaration();
                    }
                    else {
                        switch(nextTokenKind()) {
                            case IDENTIFIER:
                            // Code for expansion specified on line 2055 of Java.javacc
                            // Code for Name specified on line 2055 of Java.javacc
                            Name();
                            break;
                            default:
                            consumeToken(-1);
                            throw new ParseException();
                        }
                    }
                }
            }
            // Code for expansion specified on line 2058 of Java.javacc
            consumeToken(92);
            // Code for Block specified on line 2059 of Java.javacc
            Block();
            // Code for expansion specified on line 2060 of Java.javacc
            label_98:
            while (true) {
                int int74=nextTokenKind();
                if (!(int74==30)) {
                    break label_98;
                }
                // Code for expansion specified on line 2060 of Java.javacc
                // Code for CatchBlock specified on line 2060 of Java.javacc
                CatchBlock();
            }
            // Code for expansion specified on line 2061 of Java.javacc
            int int75=nextTokenKind();
            if (int75==43) {
                // Code for expansion specified on line 2061 of Java.javacc
                // Code for FinallyBlock specified on line 2061 of Java.javacc
                FinallyBlock();
            }
            // Code for expansion specified on line 2062 of Java.javacc
            return TryWithResources86;
        }
        catch(ParseException e) {
            parseException86=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException86!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException86.getMessage());
                    clearNodeScope();
                }
                else {
                    TryWithResources86.setEndLine(current_token.getEndLine());
                    TryWithResources86.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(TryWithResources86,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 2067
    final public CatchBlock CatchBlock() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 2067 of Java.javacc");
        // Code for expansion specified on line 2070 of Java.javacc
        boolean CatchBlock87forced=false;
        CatchBlock CatchBlock87=null;
        if (buildTree) {
            CatchBlock87=new CatchBlock();
            Token start=getToken(1);
            CatchBlock87.setBeginLine(start.beginLine);
            CatchBlock87.setBeginColumn(start.beginColumn);
            CatchBlock87.setInputSource(this.getInputSource());
            openNodeScope(CatchBlock87);
            openNodeScopeHook(CatchBlock87);
        }
        ParseException parseException87=null;
        try {
            // Code for expansion specified on line 2070 of Java.javacc
            consumeToken(30);
            // Code for expansion specified on line 2071 of Java.javacc
            consumeToken(91);
            // Code for expansion specified on line 2072 of Java.javacc
            int int76=nextTokenKind();
            if (int76==42) {
                // Code for expansion specified on line 2072 of Java.javacc
                // Code for expansion specified on line 2072 of Java.javacc
                consumeToken(42);
            }
            // Code for ClassOrInterfaceType specified on line 2073 of Java.javacc
            ClassOrInterfaceType();
            // Code for expansion specified on line 2073 of Java.javacc
            label_101:
            while (true) {
                int int77=nextTokenKind();
                if (!(int77==120)) {
                    break label_101;
                }
                // Code for expansion specified on line 2073 of Java.javacc
                // Code for expansion specified on line 2073 of Java.javacc
                consumeToken(120);
                // Code for ClassOrInterfaceType specified on line 2073 of Java.javacc
                ClassOrInterfaceType();
            }
            // Code for VariableDeclaratorId specified on line 2073 of Java.javacc
            VariableDeclaratorId();
            // Code for expansion specified on line 2074 of Java.javacc
            consumeToken(92);
            // Code for Block specified on line 2075 of Java.javacc
            Block();
            // Code for expansion specified on line 2076 of Java.javacc
            return CatchBlock87;
        }
        catch(ParseException e) {
            parseException87=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException87!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException87.getMessage());
                    clearNodeScope();
                }
                else {
                    CatchBlock87.setEndLine(current_token.getEndLine());
                    CatchBlock87.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(CatchBlock87,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 2088
    final public FinallyBlock FinallyBlock() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 2088 of Java.javacc");
        // Code for expansion specified on line 2091 of Java.javacc
        boolean FinallyBlock88forced=false;
        FinallyBlock FinallyBlock88=null;
        if (buildTree) {
            FinallyBlock88=new FinallyBlock();
            Token start=getToken(1);
            FinallyBlock88.setBeginLine(start.beginLine);
            FinallyBlock88.setBeginColumn(start.beginColumn);
            FinallyBlock88.setInputSource(this.getInputSource());
            openNodeScope(FinallyBlock88);
            openNodeScopeHook(FinallyBlock88);
        }
        ParseException parseException88=null;
        try {
            // Code for expansion specified on line 2091 of Java.javacc
            consumeToken(43);
            // Code for Block specified on line 2091 of Java.javacc
            Block();
            // Code for expansion specified on line 2092 of Java.javacc
            return FinallyBlock88;
        }
        catch(ParseException e) {
            parseException88=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException88!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException88.getMessage());
                    clearNodeScope();
                }
                else {
                    FinallyBlock88.setEndLine(current_token.getEndLine());
                    FinallyBlock88.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(FinallyBlock88,nodeArity()>1);
                }
            }
        }
    }

    /* Annotation syntax follows. */
    // Java.javacc, line 2107
    final public Annotation Annotation() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 2107 of Java.javacc");
        // Code for expansion specified on line 2110 of Java.javacc
        boolean Annotation89forced=false;
        Annotation Annotation89=null;
        if (buildTree) {
            Annotation89=new Annotation();
            Token start=getToken(1);
            Annotation89.setBeginLine(start.beginLine);
            Annotation89.setBeginColumn(start.beginColumn);
            Annotation89.setInputSource(this.getInputSource());
            openNodeScope(Annotation89);
            openNodeScopeHook(Annotation89);
        }
        ParseException parseException89=null;
        try {
            // Code for expansion specified on line 2110 of Java.javacc
            if (phase2_55(INFINITY)) {
                // Code for expansion specified on line 2110 of Java.javacc
                // Code for NormalAnnotation specified on line 2111 of Java.javacc
                NormalAnnotation();
            }
            else if (phase2_56(INFINITY)) {
                // Code for expansion specified on line 2113 of Java.javacc
                // Code for SingleMemberAnnotation specified on line 2114 of Java.javacc
                SingleMemberAnnotation();
            }
            else {
                switch(nextTokenKind()) {
                    case 138:
                    // Code for expansion specified on line 2116 of Java.javacc
                    // Code for MarkerAnnotation specified on line 2116 of Java.javacc
                    MarkerAnnotation();
                    break;
                    default:
                    consumeToken(-1);
                    throw new ParseException();
                }
            }
            // Code for expansion specified on line 2117 of Java.javacc
            return Annotation89;
        }
        catch(ParseException e) {
            parseException89=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException89!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException89.getMessage());
                    clearNodeScope();
                }
                else {
                    Annotation89.setEndLine(current_token.getEndLine());
                    Annotation89.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(Annotation89,true);
                }
            }
        }
    }

    // Java.javacc, line 2122
    final public void NormalAnnotation() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 2122 of Java.javacc");
        // Code for expansion specified on line 2125 of Java.javacc
        // Code for expansion specified on line 2125 of Java.javacc
        consumeToken(138);
        // Code for Name specified on line 2125 of Java.javacc
        Name();
        // Code for expansion specified on line 2125 of Java.javacc
        consumeToken(91);
        // Code for expansion specified on line 2125 of Java.javacc
        int int78=nextTokenKind();
        if (int78==IDENTIFIER) {
            // Code for expansion specified on line 2125 of Java.javacc
            // Code for MemberValuePairs specified on line 2125 of Java.javacc
            MemberValuePairs();
        }
        // Code for expansion specified on line 2125 of Java.javacc
        consumeToken(92);
        if (trace_enabled) LOGGER.info("Exiting normally from NormalAnnotation");
    }

    // Java.javacc, line 2128
    final public void MarkerAnnotation() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 2128 of Java.javacc");
        // Code for expansion specified on line 2131 of Java.javacc
        // Code for expansion specified on line 2131 of Java.javacc
        consumeToken(138);
        // Code for Name specified on line 2131 of Java.javacc
        Name();
        if (trace_enabled) LOGGER.info("Exiting normally from MarkerAnnotation");
    }

    // Java.javacc, line 2134
    final public void SingleMemberAnnotation() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 2134 of Java.javacc");
        // Code for expansion specified on line 2137 of Java.javacc
        // Code for expansion specified on line 2137 of Java.javacc
        consumeToken(138);
        // Code for Name specified on line 2137 of Java.javacc
        Name();
        // Code for expansion specified on line 2137 of Java.javacc
        consumeToken(91);
        // Code for MemberValue specified on line 2137 of Java.javacc
        MemberValue();
        // Code for expansion specified on line 2137 of Java.javacc
        consumeToken(92);
        if (trace_enabled) LOGGER.info("Exiting normally from SingleMemberAnnotation");
    }

    // Java.javacc, line 2140
    final public void MemberValuePairs() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 2140 of Java.javacc");
        // Code for expansion specified on line 2143 of Java.javacc
        boolean MemberValuePairs90forced=false;
        MemberValuePairs MemberValuePairs90=null;
        if (buildTree) {
            MemberValuePairs90=new MemberValuePairs();
            Token start=getToken(1);
            MemberValuePairs90.setBeginLine(start.beginLine);
            MemberValuePairs90.setBeginColumn(start.beginColumn);
            MemberValuePairs90.setInputSource(this.getInputSource());
            openNodeScope(MemberValuePairs90);
            openNodeScopeHook(MemberValuePairs90);
        }
        ParseException parseException90=null;
        try {
            // Code for MemberValuePair specified on line 2143 of Java.javacc
            MemberValuePair();
            // Code for expansion specified on line 2143 of Java.javacc
            label_103:
            while (true) {
                int int79=nextTokenKind();
                if (!(int79==98)) {
                    break label_103;
                }
                // Code for expansion specified on line 2143 of Java.javacc
                // Code for expansion specified on line 2143 of Java.javacc
                consumeToken(98);
                // Code for MemberValuePair specified on line 2143 of Java.javacc
                MemberValuePair();
            }
            if (trace_enabled) LOGGER.info("Exiting normally from MemberValuePairs");
        }
        catch(ParseException e) {
            parseException90=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException90!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException90.getMessage());
                    clearNodeScope();
                }
                else {
                    MemberValuePairs90.setEndLine(current_token.getEndLine());
                    MemberValuePairs90.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(MemberValuePairs90,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 2146
    final public void MemberValuePair() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 2146 of Java.javacc");
        // Code for expansion specified on line 2149 of Java.javacc
        boolean MemberValuePair91forced=false;
        MemberValuePair MemberValuePair91=null;
        if (buildTree) {
            MemberValuePair91=new MemberValuePair();
            Token start=getToken(1);
            MemberValuePair91.setBeginLine(start.beginLine);
            MemberValuePair91.setBeginColumn(start.beginColumn);
            MemberValuePair91.setInputSource(this.getInputSource());
            openNodeScope(MemberValuePair91);
            openNodeScopeHook(MemberValuePair91);
        }
        ParseException parseException91=null;
        try {
            // Code for expansion specified on line 2149 of Java.javacc
            consumeToken(IDENTIFIER);
            // Code for expansion specified on line 2149 of Java.javacc
            consumeToken(100);
            // Code for MemberValue specified on line 2149 of Java.javacc
            MemberValue();
            if (trace_enabled) LOGGER.info("Exiting normally from MemberValuePair");
        }
        catch(ParseException e) {
            parseException91=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException91!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException91.getMessage());
                    clearNodeScope();
                }
                else {
                    MemberValuePair91.setEndLine(current_token.getEndLine());
                    MemberValuePair91.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(MemberValuePair91,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 2152
    final public void MemberValue() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 2152 of Java.javacc");
        // Code for expansion specified on line 2155 of Java.javacc
        boolean MemberValue92forced=false;
        MemberValue MemberValue92=null;
        if (buildTree) {
            MemberValue92=new MemberValue();
            Token start=getToken(1);
            MemberValue92.setBeginLine(start.beginLine);
            MemberValue92.setBeginColumn(start.beginColumn);
            MemberValue92.setInputSource(this.getInputSource());
            openNodeScope(MemberValue92);
            openNodeScopeHook(MemberValue92);
        }
        ParseException parseException92=null;
        try {
            switch(nextTokenKind()) {
                case 138:
                // Code for expansion specified on line 2155 of Java.javacc
                // Code for Annotation specified on line 2155 of Java.javacc
                Annotation();
                break;
                case 93:
                // Code for expansion specified on line 2157 of Java.javacc
                // Code for MemberValueArrayInitializer specified on line 2157 of Java.javacc
                MemberValueArrayInitializer();
                break;
                case 26:
                case 28:
                case 31:
                case 37:
                case 41:
                case 44:
                case 51:
                case 53:
                case 55:
                case 56:
                case 62:
                case 65:
                case 68:
                case 72:
                case 74:
                case LONG_LITERAL:
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case 91:
                case 103:
                case 104:
                case 113:
                case 114:
                case 115:
                case 116:
                case IDENTIFIER:
                // Code for expansion specified on line 2159 of Java.javacc
                // Code for TernaryExpression specified on line 2159 of Java.javacc
                TernaryExpression();
                break;
                default:
                consumeToken(-1);
                throw new ParseException();
            }
            if (trace_enabled) LOGGER.info("Exiting normally from MemberValue");
        }
        catch(ParseException e) {
            parseException92=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException92!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException92.getMessage());
                    clearNodeScope();
                }
                else {
                    MemberValue92.setEndLine(current_token.getEndLine());
                    MemberValue92.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(MemberValue92,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 2162
    final public void MemberValueArrayInitializer() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 2162 of Java.javacc");
        // Code for expansion specified on line 2165 of Java.javacc
        boolean MemberValueArrayInitializer93forced=false;
        MemberValueArrayInitializer MemberValueArrayInitializer93=null;
        if (buildTree) {
            MemberValueArrayInitializer93=new MemberValueArrayInitializer();
            Token start=getToken(1);
            MemberValueArrayInitializer93.setBeginLine(start.beginLine);
            MemberValueArrayInitializer93.setBeginColumn(start.beginColumn);
            MemberValueArrayInitializer93.setInputSource(this.getInputSource());
            openNodeScope(MemberValueArrayInitializer93);
            openNodeScopeHook(MemberValueArrayInitializer93);
        }
        ParseException parseException93=null;
        try {
            if (phase2_58(2)) {
                // Code for expansion specified on line 2165 of Java.javacc
                // Code for expansion specified on line 2165 of Java.javacc
                consumeToken(93);
                // Code for expansion specified on line 2165 of Java.javacc
                consumeToken(94);
            }
            else {
                switch(nextTokenKind()) {
                    case 93:
                    // Code for expansion specified on line 2167 of Java.javacc
                    // Code for expansion specified on line 2167 of Java.javacc
                    consumeToken(93);
                    // Code for MemberValue specified on line 2167 of Java.javacc
                    MemberValue();
                    // Code for expansion specified on line 2167 of Java.javacc
                    label_104:
                    while (true) {
                        if (!(phase2_57(2))) {
                            break label_104;
                        }
                        // Code for expansion specified on line 2167 of Java.javacc
                        // Code for expansion specified on line 2167 of Java.javacc
                        consumeToken(98);
                        // Code for MemberValue specified on line 2167 of Java.javacc
                        MemberValue();
                    }
                    // Code for expansion specified on line 2167 of Java.javacc
                    int int80=nextTokenKind();
                    if (int80==98) {
                        // Code for expansion specified on line 2167 of Java.javacc
                        // Code for expansion specified on line 2167 of Java.javacc
                        consumeToken(98);
                    }
                    // Code for expansion specified on line 2167 of Java.javacc
                    consumeToken(94);
                    break;
                    default:
                    consumeToken(-1);
                    throw new ParseException();
                }
            }
            if (trace_enabled) LOGGER.info("Exiting normally from MemberValueArrayInitializer");
        }
        catch(ParseException e) {
            parseException93=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException93!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException93.getMessage());
                    clearNodeScope();
                }
                else {
                    MemberValueArrayInitializer93.setEndLine(current_token.getEndLine());
                    MemberValueArrayInitializer93.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(MemberValueArrayInitializer93,nodeArity()>1);
                }
            }
        }
    }

    /* Annotation Types. */
    // Java.javacc, line 2173
    final public void AnnotationTypeDeclaration() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 2173 of Java.javacc");
        // Code for expansion specified on line 2176 of Java.javacc
        boolean AnnotationTypeDeclaration94forced=false;
        AnnotationTypeDeclaration AnnotationTypeDeclaration94=null;
        if (buildTree) {
            AnnotationTypeDeclaration94=new AnnotationTypeDeclaration();
            Token start=getToken(1);
            AnnotationTypeDeclaration94.setBeginLine(start.beginLine);
            AnnotationTypeDeclaration94.setBeginColumn(start.beginColumn);
            AnnotationTypeDeclaration94.setInputSource(this.getInputSource());
            openNodeScope(AnnotationTypeDeclaration94);
            openNodeScopeHook(AnnotationTypeDeclaration94);
        }
        ParseException parseException94=null;
        try {
            // Code for expansion specified on line 2176 of Java.javacc
            consumeToken(138);
            // Code for expansion specified on line 2176 of Java.javacc
            consumeToken(52);
            // Code for expansion specified on line 2176 of Java.javacc
            consumeToken(IDENTIFIER);
            // Code for AnnotationTypeBody specified on line 2176 of Java.javacc
            AnnotationTypeBody();
            if (trace_enabled) LOGGER.info("Exiting normally from AnnotationTypeDeclaration");
        }
        catch(ParseException e) {
            parseException94=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException94!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException94.getMessage());
                    clearNodeScope();
                }
                else {
                    AnnotationTypeDeclaration94.setEndLine(current_token.getEndLine());
                    AnnotationTypeDeclaration94.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(AnnotationTypeDeclaration94,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 2179
    final public void AnnotationTypeBody() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 2179 of Java.javacc");
        // Code for expansion specified on line 2182 of Java.javacc
        boolean AnnotationTypeBody95forced=false;
        AnnotationTypeBody AnnotationTypeBody95=null;
        if (buildTree) {
            AnnotationTypeBody95=new AnnotationTypeBody();
            Token start=getToken(1);
            AnnotationTypeBody95.setBeginLine(start.beginLine);
            AnnotationTypeBody95.setBeginColumn(start.beginColumn);
            AnnotationTypeBody95.setInputSource(this.getInputSource());
            openNodeScope(AnnotationTypeBody95);
            openNodeScopeHook(AnnotationTypeBody95);
        }
        ParseException parseException95=null;
        try {
            // Code for expansion specified on line 2182 of Java.javacc
            consumeToken(93);
            // Code for expansion specified on line 2182 of Java.javacc
            label_106:
            while (true) {
                int int81=nextTokenKind();
                if (!(int81==24||int81==26||int81==28||int81==31||int81==32||int81==37||int81==39||int81==42||int81==44||int81==51||int81==52||int81==53||int81==54||int81==58||int81==59||int81==60||int81==62||int81==63||int81==64||int81==67||int81==71||int81==75||int81==97||int81==138||int81==IDENTIFIER)) {
                    break label_106;
                }
                // Code for expansion specified on line 2182 of Java.javacc
                // Code for AnnotationTypeMemberDeclaration specified on line 2182 of Java.javacc
                AnnotationTypeMemberDeclaration();
            }
            // Code for expansion specified on line 2182 of Java.javacc
            consumeToken(94);
            if (trace_enabled) LOGGER.info("Exiting normally from AnnotationTypeBody");
        }
        catch(ParseException e) {
            parseException95=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException95!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException95.getMessage());
                    clearNodeScope();
                }
                else {
                    AnnotationTypeBody95.setEndLine(current_token.getEndLine());
                    AnnotationTypeBody95.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(AnnotationTypeBody95,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 2185
    final public void AnnotationTypeMemberDeclaration() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 2185 of Java.javacc");
        // Code for expansion specified on line 2188 of Java.javacc
        boolean AnnotationTypeMemberDeclaration96forced=false;
        AnnotationTypeMemberDeclaration AnnotationTypeMemberDeclaration96=null;
        if (buildTree) {
            AnnotationTypeMemberDeclaration96=new AnnotationTypeMemberDeclaration();
            Token start=getToken(1);
            AnnotationTypeMemberDeclaration96.setBeginLine(start.beginLine);
            AnnotationTypeMemberDeclaration96.setBeginColumn(start.beginColumn);
            AnnotationTypeMemberDeclaration96.setInputSource(this.getInputSource());
            openNodeScope(AnnotationTypeMemberDeclaration96);
            openNodeScopeHook(AnnotationTypeMemberDeclaration96);
        }
        ParseException parseException96=null;
        try {
            switch(nextTokenKind()) {
                case 24:
                case 26:
                case 28:
                case 31:
                case 32:
                case 37:
                case 39:
                case 42:
                case 44:
                case 51:
                case 52:
                case 53:
                case 54:
                case 58:
                case 59:
                case 60:
                case 62:
                case 63:
                case 64:
                case 67:
                case 71:
                case 75:
                case 138:
                case IDENTIFIER:
                // Code for expansion specified on line 2188 of Java.javacc
                // Code for Modifiers specified on line 2188 of Java.javacc
                Modifiers();
                // Code for expansion specified on line 2190 of Java.javacc
                if (phase2_59(INFINITY)) {
                    // Code for expansion specified on line 2190 of Java.javacc
                    // Code for Type specified on line 2191 of Java.javacc
                    Type();
                    // Code for expansion specified on line 2191 of Java.javacc
                    consumeToken(IDENTIFIER);
                    // Code for expansion specified on line 2191 of Java.javacc
                    consumeToken(91);
                    // Code for expansion specified on line 2191 of Java.javacc
                    consumeToken(92);
                    // Code for expansion specified on line 2191 of Java.javacc
                    int int82=nextTokenKind();
                    if (int82==35) {
                        // Code for expansion specified on line 2191 of Java.javacc
                        // Code for DefaultValue specified on line 2191 of Java.javacc
                        DefaultValue();
                    }
                    // Code for expansion specified on line 2191 of Java.javacc
                    consumeToken(97);
                }
                else {
                    switch(nextTokenKind()) {
                        case 32:
                        // Code for expansion specified on line 2193 of Java.javacc
                        // Code for ClassDeclaration specified on line 2193 of Java.javacc
                        ClassDeclaration();
                        break;
                        case 52:
                        // Code for expansion specified on line 2195 of Java.javacc
                        // Code for InterfaceDeclaration specified on line 2195 of Java.javacc
                        InterfaceDeclaration();
                        break;
                        case 39:
                        // Code for expansion specified on line 2197 of Java.javacc
                        // Code for EnumDeclaration specified on line 2197 of Java.javacc
                        EnumDeclaration();
                        break;
                        case 138:
                        // Code for expansion specified on line 2199 of Java.javacc
                        // Code for AnnotationTypeDeclaration specified on line 2199 of Java.javacc
                        AnnotationTypeDeclaration();
                        break;
                        case 26:
                        case 28:
                        case 31:
                        case 37:
                        case 44:
                        case 51:
                        case 53:
                        case 62:
                        case IDENTIFIER:
                        // Code for expansion specified on line 2201 of Java.javacc
                        // Code for FieldDeclaration specified on line 2201 of Java.javacc
                        FieldDeclaration();
                        break;
                        default:
                        consumeToken(-1);
                        throw new ParseException();
                    }
                }
                break;
                case 97:
                // Code for expansion specified on line 2204 of Java.javacc
                // Code for expansion specified on line 2204 of Java.javacc
                // Code for expansion specified on line 2204 of Java.javacc
                consumeToken(97);
                break;
                default:
                consumeToken(-1);
                throw new ParseException();
            }
            if (trace_enabled) LOGGER.info("Exiting normally from AnnotationTypeMemberDeclaration");
        }
        catch(ParseException e) {
            parseException96=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException96!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException96.getMessage());
                    clearNodeScope();
                }
                else {
                    AnnotationTypeMemberDeclaration96.setEndLine(current_token.getEndLine());
                    AnnotationTypeMemberDeclaration96.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(AnnotationTypeMemberDeclaration96,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 2207
    final public void DefaultValue() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 2207 of Java.javacc");
        // Code for expansion specified on line 2210 of Java.javacc
        boolean DefaultValue97forced=false;
        DefaultValue DefaultValue97=null;
        if (buildTree) {
            DefaultValue97=new DefaultValue();
            Token start=getToken(1);
            DefaultValue97.setBeginLine(start.beginLine);
            DefaultValue97.setBeginColumn(start.beginColumn);
            DefaultValue97.setInputSource(this.getInputSource());
            openNodeScope(DefaultValue97);
            openNodeScopeHook(DefaultValue97);
        }
        ParseException parseException97=null;
        try {
            // Code for expansion specified on line 2210 of Java.javacc
            consumeToken(35);
            // Code for MemberValue specified on line 2210 of Java.javacc
            MemberValue();
            if (trace_enabled) LOGGER.info("Exiting normally from DefaultValue");
        }
        catch(ParseException e) {
            parseException97=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException97!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException97.getMessage());
                    clearNodeScope();
                }
                else {
                    DefaultValue97.setEndLine(current_token.getEndLine());
                    DefaultValue97.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(DefaultValue97,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 2213
    final public LambdaExpression LambdaExpression() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 2213 of Java.javacc");
        // Code for expansion specified on line 2216 of Java.javacc
        boolean LambdaExpression98forced=false;
        LambdaExpression LambdaExpression98=null;
        if (buildTree) {
            LambdaExpression98=new LambdaExpression();
            Token start=getToken(1);
            LambdaExpression98.setBeginLine(start.beginLine);
            LambdaExpression98.setBeginColumn(start.beginColumn);
            LambdaExpression98.setInputSource(this.getInputSource());
            openNodeScope(LambdaExpression98);
            openNodeScopeHook(LambdaExpression98);
        }
        ParseException parseException98=null;
        try {
            // Code for LambdaLHS specified on line 2216 of Java.javacc
            LambdaLHS();
            // Code for expansion specified on line 2217 of Java.javacc
            consumeToken(135);
            // Code for LambdaRHS specified on line 2218 of Java.javacc
            LambdaRHS();
            // Code for expansion specified on line 2219 of Java.javacc
            return LambdaExpression98;
        }
        catch(ParseException e) {
            parseException98=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException98!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException98.getMessage());
                    clearNodeScope();
                }
                else {
                    LambdaExpression98.setEndLine(current_token.getEndLine());
                    LambdaExpression98.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(LambdaExpression98,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 2224
    final public void LambdaLHS() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 2224 of Java.javacc");
        // Code for expansion specified on line 2226 of Java.javacc
        boolean LambdaLHS99forced=false;
        LambdaLHS LambdaLHS99=null;
        if (buildTree) {
            LambdaLHS99=new LambdaLHS();
            Token start=getToken(1);
            LambdaLHS99.setBeginLine(start.beginLine);
            LambdaLHS99.setBeginColumn(start.beginColumn);
            LambdaLHS99.setInputSource(this.getInputSource());
            openNodeScope(LambdaLHS99);
            openNodeScopeHook(LambdaLHS99);
        }
        ParseException parseException99=null;
        try {
            if (phase2_60(INFINITY)) {
                // Code for expansion specified on line 2226 of Java.javacc
                // Code for SimpleLambdaLHS specified on line 2227 of Java.javacc
                SimpleLambdaLHS();
            }
            else if (phase2_61(INFINITY)) {
                // Code for expansion specified on line 2229 of Java.javacc
                // Code for FormalLambdaLHS specified on line 2230 of Java.javacc
                FormalLambdaLHS();
            }
            else {
                consumeToken(-1);
                throw new ParseException();
            }
            if (trace_enabled) LOGGER.info("Exiting normally from LambdaLHS");
        }
        catch(ParseException e) {
            parseException99=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException99!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException99.getMessage());
                    clearNodeScope();
                }
                else {
                    LambdaLHS99.setEndLine(current_token.getEndLine());
                    LambdaLHS99.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(LambdaLHS99,nodeArity()>1);
                }
            }
        }
    }

    // Java.javacc, line 2233
    final public void SimpleLambdaLHS() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 2233 of Java.javacc");
        // Code for expansion specified on line 2235 of Java.javacc
        switch(nextTokenKind()) {
            case IDENTIFIER:
            // Code for expansion specified on line 2235 of Java.javacc
            // Code for expansion specified on line 2235 of Java.javacc
            consumeToken(IDENTIFIER);
            break;
            case 91:
            // Code for expansion specified on line 2237 of Java.javacc
            // Code for expansion specified on line 2238 of Java.javacc
            // Code for expansion specified on line 2238 of Java.javacc
            consumeToken(91);
            // Code for expansion specified on line 2239 of Java.javacc
            int int84=nextTokenKind();
            if (int84==IDENTIFIER) {
                // Code for expansion specified on line 2239 of Java.javacc
                // Code for expansion specified on line 2239 of Java.javacc
                consumeToken(IDENTIFIER);
                // Code for expansion specified on line 2239 of Java.javacc
                label_109:
                while (true) {
                    int int83=nextTokenKind();
                    if (!(int83==98)) {
                        break label_109;
                    }
                    // Code for expansion specified on line 2239 of Java.javacc
                    // Code for expansion specified on line 2239 of Java.javacc
                    consumeToken(98);
                    // Code for expansion specified on line 2239 of Java.javacc
                    consumeToken(IDENTIFIER);
                }
            }
            // Code for expansion specified on line 2240 of Java.javacc
            consumeToken(92);
            break;
            default:
            consumeToken(-1);
            throw new ParseException();
        }
        if (trace_enabled) LOGGER.info("Exiting normally from SimpleLambdaLHS");
    }

    // Java.javacc, line 2244
    final public void FormalLambdaLHS() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 2244 of Java.javacc");
        // Code for expansion specified on line 2246 of Java.javacc
        boolean FormalLambdaLHS100forced=false;
        FormalParameters FormalLambdaLHS100=null;
        if (buildTree) {
            FormalLambdaLHS100=new FormalParameters();
            Token start=getToken(1);
            FormalLambdaLHS100.setBeginLine(start.beginLine);
            FormalLambdaLHS100.setBeginColumn(start.beginColumn);
            FormalLambdaLHS100.setInputSource(this.getInputSource());
            openNodeScope(FormalLambdaLHS100);
            openNodeScopeHook(FormalLambdaLHS100);
        }
        ParseException parseException100=null;
        try {
            // Code for expansion specified on line 2246 of Java.javacc
            consumeToken(91);
            // Code for Type specified on line 2247 of Java.javacc
            Type();
            // Code for VariableDeclaratorId specified on line 2247 of Java.javacc
            VariableDeclaratorId();
            // Code for expansion specified on line 2250 of Java.javacc
            label_110:
            while (true) {
                int int85=nextTokenKind();
                if (!(int85==98)) {
                    break label_110;
                }
                // Code for expansion specified on line 2249 of Java.javacc
                // Code for expansion specified on line 2249 of Java.javacc
                consumeToken(98);
                // Code for Type specified on line 2249 of Java.javacc
                Type();
                // Code for VariableDeclaratorId specified on line 2249 of Java.javacc
                VariableDeclaratorId();
            }
            // Code for expansion specified on line 2251 of Java.javacc
            consumeToken(92);
            if (trace_enabled) LOGGER.info("Exiting normally from FormalLambdaLHS");
        }
        catch(ParseException e) {
            parseException100=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException100!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException100.getMessage());
                    clearNodeScope();
                }
                else {
                    FormalLambdaLHS100.setEndLine(current_token.getEndLine());
                    FormalLambdaLHS100.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(FormalLambdaLHS100,true);
                }
            }
        }
    }

    // Java.javacc, line 2254
    final public void LambdaRHS() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 2254 of Java.javacc");
        // Code for expansion specified on line 2257 of Java.javacc
        boolean LambdaRHS101forced=false;
        LambdaRHS LambdaRHS101=null;
        if (buildTree) {
            LambdaRHS101=new LambdaRHS();
            Token start=getToken(1);
            LambdaRHS101.setBeginLine(start.beginLine);
            LambdaRHS101.setBeginColumn(start.beginColumn);
            LambdaRHS101.setInputSource(this.getInputSource());
            openNodeScope(LambdaRHS101);
            openNodeScopeHook(LambdaRHS101);
        }
        ParseException parseException101=null;
        try {
            switch(nextTokenKind()) {
                case 26:
                case 28:
                case 31:
                case 37:
                case 41:
                case 44:
                case 51:
                case 53:
                case 55:
                case 56:
                case 62:
                case 65:
                case 68:
                case 72:
                case 74:
                case LONG_LITERAL:
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case 91:
                case 103:
                case 104:
                case 113:
                case 114:
                case 115:
                case 116:
                case IDENTIFIER:
                // Code for expansion specified on line 2257 of Java.javacc
                // Code for Expression specified on line 2257 of Java.javacc
                Expression();
                break;
                case 93:
                // Code for expansion specified on line 2259 of Java.javacc
                // Code for Block specified on line 2259 of Java.javacc
                Block();
                break;
                default:
                consumeToken(-1);
                throw new ParseException();
            }
            if (trace_enabled) LOGGER.info("Exiting normally from LambdaRHS");
        }
        catch(ParseException e) {
            parseException101=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException101!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException101.getMessage());
                    clearNodeScope();
                }
                else {
                    LambdaRHS101.setEndLine(current_token.getEndLine());
                    LambdaRHS101.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(LambdaRHS101,nodeArity()>1);
                }
            }
        }
    }

    // JavaCC.javacc, line 547
    final public GrammarFile Root() throws ParseException,IOException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 547 of JavaCC.javacc");
        TokenManagerDecls decls;
        // Code for expansion specified on line 552 of JavaCC.javacc
        boolean Root102forced=false;
        GrammarFile Root102=null;
        if (buildTree) {
            Root102=new GrammarFile();
            Token start=getToken(1);
            Root102.setBeginLine(start.beginLine);
            Root102.setBeginColumn(start.beginColumn);
            Root102.setInputSource(this.getInputSource());
            openNodeScope(Root102);
            openNodeScopeHook(Root102);
        }
        ParseException parseException102=null;
        try {
            // Code for expansion specified on line 552 of JavaCC.javacc
            int int86=nextTokenKind();
            if (int86==_OPTIONS) {
                // Code for expansion specified on line 552 of JavaCC.javacc
                // Code for Options specified on line 552 of JavaCC.javacc
                Options();
            }
            // Code for expansion specified on line 553 of JavaCC.javacc
            if (!grammar.isInInclude()) {
                grammar.getOptions().normalize();
            }
            // Code for expansion specified on line 558 of JavaCC.javacc
            int int87=nextTokenKind();
            if (int87==6) {
                // Code for expansion specified on line 558 of JavaCC.javacc
                // Code for ParserCodeDecls specified on line 558 of JavaCC.javacc
                ParserCodeDecls();
            }
            // Code for expansion specified on line 572 of JavaCC.javacc
            label_113:
            while (true) {
                // Code for expansion specified on line 560 of JavaCC.javacc
                switch(nextTokenKind()) {
                    case _TOKEN:
                    case _SPECIAL_TOKEN:
                    case _MORE:
                    case 11:
                    case 102:
                    // Code for expansion specified on line 560 of JavaCC.javacc
                    // Code for TokenProduction specified on line 560 of JavaCC.javacc
                    TokenProduction();
                    // Code for expansion specified on line 560 of JavaCC.javacc
                    grammar.addTokenProduction((TokenProduction) peekNode());
                    break;
                    case 26:
                    case 28:
                    case 31:
                    case 37:
                    case 44:
                    case 51:
                    case 53:
                    case 58:
                    case 59:
                    case 60:
                    case 62:
                    case 74:
                    case IDENTIFIER:
                    // Code for expansion specified on line 562 of JavaCC.javacc
                    // Code for BNFProduction specified on line 562 of JavaCC.javacc
                    BNFProduction();
                    break;
                    case 12:
                    // Code for expansion specified on line 564 of JavaCC.javacc
                    // Code for TokenManagerDecls specified on line 564 of JavaCC.javacc
                    decls=TokenManagerDecls();
                    // Code for expansion specified on line 564 of JavaCC.javacc
                    grammar.addCodeInjection(decls);
                    break;
                    default:
                    if (phase2_62(INFINITY)) {
                        // Code for expansion specified on line 566 of JavaCC.javacc
                        // Code for CodeInjection specified on line 567 of JavaCC.javacc
                        CodeInjection();
                    }
                    else {
                        switch(nextTokenKind()) {
                            case _INJECT:
                            // Code for expansion specified on line 569 of JavaCC.javacc
                            // Code for CodeInjection2 specified on line 569 of JavaCC.javacc
                            CodeInjection2();
                            break;
                            case _INCLUDE:
                            // Code for expansion specified on line 571 of JavaCC.javacc
                            // Code for GrammarInclusion specified on line 571 of JavaCC.javacc
                            GrammarInclusion();
                            break;
                            default:
                            consumeToken(-1);
                            throw new ParseException();
                        }
                    }
                }
                int int88=nextTokenKind();
                if (!(int88==_INJECT||int88==_INCLUDE||int88==_TOKEN||int88==_SPECIAL_TOKEN||int88==_MORE||int88==11||int88==12||int88==26||int88==28||int88==31||int88==37||int88==44||int88==51||int88==53||int88==58||int88==59||int88==60||int88==62||int88==74||int88==102||int88==IDENTIFIER)) {
                    break label_113;
                }
            }
            // Code for expansion specified on line 573 of JavaCC.javacc
            consumeToken(0);
            // Code for expansion specified on line 574 of JavaCC.javacc
            return Root102;
        }
        catch(ParseException e) {
            parseException102=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException102!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException102.getMessage());
                    clearNodeScope();
                }
                else {
                    Root102.setEndLine(current_token.getEndLine());
                    Root102.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(Root102,true);
                }
            }
        }
    }

    // JavaCC.javacc, line 579
    final public void ParserCodeDecls() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 579 of JavaCC.javacc");
        Token id;
        CompilationUnit parserCode;
        // Code for expansion specified on line 585 of JavaCC.javacc
        boolean ParserCodeDecls103forced=false;
        ParserCodeDecls ParserCodeDecls103=null;
        if (buildTree) {
            ParserCodeDecls103=new ParserCodeDecls();
            Token start=getToken(1);
            ParserCodeDecls103.setBeginLine(start.beginLine);
            ParserCodeDecls103.setBeginColumn(start.beginColumn);
            ParserCodeDecls103.setInputSource(this.getInputSource());
            openNodeScope(ParserCodeDecls103);
            openNodeScopeHook(ParserCodeDecls103);
        }
        ParseException parseException103=null;
        try {
            // Code for expansion specified on line 585 of JavaCC.javacc
            consumeToken(6);
            // Code for expansion specified on line 586 of JavaCC.javacc
            consumeToken(91);
            // Code for expansion specified on line 587 of JavaCC.javacc
            id=consumeToken(IDENTIFIER);
            // Code for expansion specified on line 588 of JavaCC.javacc
            consumeToken(92);
            // Code for expansion specified on line 589 of JavaCC.javacc
            if (!grammar.isInInclude()) grammar.setParserClassName(id.image);
            token_source.inJavaCode=true;
            // Code for CompilationUnit specified on line 594 of JavaCC.javacc
            parserCode=CompilationUnit();
            // Code for expansion specified on line 595 of JavaCC.javacc
            if (!grammar.isInInclude()) grammar.setParserCode(parserCode);
            token_source.inJavaCode=false;
            // Code for expansion specified on line 600 of JavaCC.javacc
            consumeToken(7);
            // Code for expansion specified on line 600 of JavaCC.javacc
            int int89=nextTokenKind();
            if (int89==91) {
                // Code for expansion specified on line 600 of JavaCC.javacc
                // Code for expansion specified on line 600 of JavaCC.javacc
                consumeToken(91);
                // Code for expansion specified on line 600 of JavaCC.javacc
                consumeToken(IDENTIFIER);
                // Code for expansion specified on line 600 of JavaCC.javacc
                consumeToken(92);
            }
            if (trace_enabled) LOGGER.info("Exiting normally from ParserCodeDecls");
        }
        catch(ParseException e) {
            parseException103=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException103!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException103.getMessage());
                    clearNodeScope();
                }
                else {
                    ParserCodeDecls103.setEndLine(current_token.getEndLine());
                    ParserCodeDecls103.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(ParserCodeDecls103,nodeArity()>1);
                }
            }
        }
    }

    // JavaCC.javacc, line 615
    final public void GrammarInclusion() throws ParseException,IOException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 615 of JavaCC.javacc");
        Token t;
        // Code for expansion specified on line 620 of JavaCC.javacc
        boolean GrammarInclusion104forced=false;
        GrammarInclusion GrammarInclusion104=null;
        if (buildTree) {
            GrammarInclusion104=new GrammarInclusion();
            Token start=getToken(1);
            GrammarInclusion104.setBeginLine(start.beginLine);
            GrammarInclusion104.setBeginColumn(start.beginColumn);
            GrammarInclusion104.setInputSource(this.getInputSource());
            openNodeScope(GrammarInclusion104);
            openNodeScopeHook(GrammarInclusion104);
        }
        ParseException parseException104=null;
        try {
            // Code for expansion specified on line 620 of JavaCC.javacc
            consumeToken(_INCLUDE);
            // Code for expansion specified on line 621 of JavaCC.javacc
            consumeToken(91);
            // Code for expansion specified on line 621 of JavaCC.javacc
            t=consumeToken(STRING_LITERAL);
            // Code for expansion specified on line 621 of JavaCC.javacc
            consumeToken(92);
            // Code for expansion specified on line 622 of JavaCC.javacc
            int int90=nextTokenKind();
            if (int90==106) {
                // Code for expansion specified on line 623 of JavaCC.javacc
                // Code for expansion specified on line 623 of JavaCC.javacc
                consumeToken(106);
                // Code for expansion specified on line 624 of JavaCC.javacc
                consumeToken(93);
                // Code for expansion specified on line 625 of JavaCC.javacc
                consumeToken(94);
            }
            // Code for expansion specified on line 627 of JavaCC.javacc
            String location=t.image.substring(1,t.image.length()-1);
            Node root=grammar.include(location);
            GrammarInclusion104.addChild(root);
            if (trace_enabled) LOGGER.info("Exiting normally from GrammarInclusion");
        }
        catch(ParseException e) {
            parseException104=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException104!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException104.getMessage());
                    clearNodeScope();
                }
                else {
                    GrammarInclusion104.setEndLine(current_token.getEndLine());
                    GrammarInclusion104.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(GrammarInclusion104,nodeArity()>1);
                }
            }
        }
    }

    // JavaCC.javacc, line 634
    final public void CodeInjection() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 634 of JavaCC.javacc");
        boolean isInterface=false;
        ImportDeclaration importDecl=null;
        Annotation annotation=null;
        token_source.inJavaCode=true;
        // Code for expansion specified on line 642 of JavaCC.javacc
        boolean CodeInjection105forced=false;
        CodeInjection CodeInjection105=null;
        if (buildTree) {
            CodeInjection105=new CodeInjection();
            Token start=getToken(1);
            CodeInjection105.setBeginLine(start.beginLine);
            CodeInjection105.setBeginColumn(start.beginColumn);
            CodeInjection105.setInputSource(this.getInputSource());
            openNodeScope(CodeInjection105);
            openNodeScopeHook(CodeInjection105);
        }
        ParseException parseException105=null;
        try {
            // Code for expansion specified on line 642 of JavaCC.javacc
            consumeToken(_INJECT);
            // Code for expansion specified on line 642 of JavaCC.javacc
            consumeToken(91);
            // Code for expansion specified on line 643 of JavaCC.javacc
            int int91=nextTokenKind();
            if (int91==32||int91==52) {
                // Code for expansion specified on line 644 of JavaCC.javacc
                switch(nextTokenKind()) {
                    case 32:
                    // Code for expansion specified on line 644 of JavaCC.javacc
                    // Code for expansion specified on line 644 of JavaCC.javacc
                    consumeToken(32);
                    break;
                    case 52:
                    // Code for expansion specified on line 646 of JavaCC.javacc
                    // Code for expansion specified on line 646 of JavaCC.javacc
                    consumeToken(52);
                    // Code for expansion specified on line 646 of JavaCC.javacc
                    isInterface=true;
                    break;
                    default:
                    consumeToken(-1);
                    throw new ParseException();
                }
            }
            // Code for expansion specified on line 648 of JavaCC.javacc
            consumeToken(IDENTIFIER);
            // Code for expansion specified on line 648 of JavaCC.javacc
            CodeInjection105.name=current_token.toString();
            // Code for expansion specified on line 649 of JavaCC.javacc
            consumeToken(92);
            // Code for expansion specified on line 650 of JavaCC.javacc
            int int92=nextTokenKind();
            if (int92==106) {
                // Code for expansion specified on line 650 of JavaCC.javacc
                // Code for expansion specified on line 650 of JavaCC.javacc
                consumeToken(106);
            }
            // Code for expansion specified on line 651 of JavaCC.javacc
            consumeToken(93);
            // Code for expansion specified on line 654 of JavaCC.javacc
            label_118:
            while (true) {
                int int93=nextTokenKind();
                if (!(int93==49)) {
                    break label_118;
                }
                // Code for expansion specified on line 653 of JavaCC.javacc
                // Code for ImportDeclaration specified on line 653 of JavaCC.javacc
                importDecl=ImportDeclaration();
                // Code for expansion specified on line 653 of JavaCC.javacc
                CodeInjection105.importDeclarations.add(importDecl);
            }
            // Code for expansion specified on line 657 of JavaCC.javacc
            label_119:
            while (true) {
                int int94=nextTokenKind();
                if (!(int94==138)) {
                    break label_119;
                }
                // Code for expansion specified on line 656 of JavaCC.javacc
                // Code for Annotation specified on line 656 of JavaCC.javacc
                annotation=Annotation();
                // Code for expansion specified on line 656 of JavaCC.javacc
                CodeInjection105.annotations.add(annotation);
            }
            // Code for expansion specified on line 658 of JavaCC.javacc
            int int96=nextTokenKind();
            if (int96==40) {
                // Code for expansion specified on line 659 of JavaCC.javacc
                // Code for ExtendsList specified on line 659 of JavaCC.javacc
                CodeInjection105.extendsList=ExtendsList(isInterface);
                // Code for expansion specified on line 660 of JavaCC.javacc
                int int95=nextTokenKind();
                if (int95==97) {
                    // Code for expansion specified on line 660 of JavaCC.javacc
                    // Code for expansion specified on line 660 of JavaCC.javacc
                    consumeToken(97);
                }
            }
            // Code for expansion specified on line 662 of JavaCC.javacc
            int int98=nextTokenKind();
            if (int98==48) {
                // Code for expansion specified on line 662 of JavaCC.javacc
                // Code for ImplementsList specified on line 662 of JavaCC.javacc
                CodeInjection105.implementsList=ImplementsList(isInterface);
                // Code for expansion specified on line 662 of JavaCC.javacc
                int int97=nextTokenKind();
                if (int97==97) {
                    // Code for expansion specified on line 662 of JavaCC.javacc
                    // Code for expansion specified on line 662 of JavaCC.javacc
                    consumeToken(97);
                }
            }
            // Code for expansion specified on line 663 of JavaCC.javacc
            consumeToken(94);
            // Code for expansion specified on line 664 of JavaCC.javacc
            token_source.inJavaCode=true;
            // Code for expansion specified on line 667 of JavaCC.javacc
            int int99=nextTokenKind();
            if (int99==93) {
                // Code for expansion specified on line 667 of JavaCC.javacc
                // Code for ClassOrInterfaceBody specified on line 667 of JavaCC.javacc
                CodeInjection105.body=ClassOrInterfaceBody(isInterface);
            }
            // Code for expansion specified on line 668 of JavaCC.javacc
            token_source.inJavaCode=false;
            grammar.addCodeInjection(CodeInjection105);
            if (trace_enabled) LOGGER.info("Exiting normally from CodeInjection");
        }
        catch(ParseException e) {
            parseException105=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException105!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException105.getMessage());
                    clearNodeScope();
                }
                else {
                    CodeInjection105.setEndLine(current_token.getEndLine());
                    CodeInjection105.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(CodeInjection105,nodeArity()>1);
                }
            }
        }
    }

    // JavaCC.javacc, line 689
    final public void CodeInjection2() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 689 of JavaCC.javacc");
        CompilationUnit jcu;
        token_source.inJavaCode=true;
        // Code for expansion specified on line 695 of JavaCC.javacc
        boolean CodeInjection2106forced=false;
        CodeInjection2 CodeInjection2106=null;
        if (buildTree) {
            CodeInjection2106=new CodeInjection2();
            Token start=getToken(1);
            CodeInjection2106.setBeginLine(start.beginLine);
            CodeInjection2106.setBeginColumn(start.beginColumn);
            CodeInjection2106.setInputSource(this.getInputSource());
            openNodeScope(CodeInjection2106);
            openNodeScopeHook(CodeInjection2106);
        }
        ParseException parseException106=null;
        try {
            // Code for expansion specified on line 695 of JavaCC.javacc
            consumeToken(_INJECT);
            // Code for expansion specified on line 696 of JavaCC.javacc
            consumeToken(106);
            // Code for expansion specified on line 696 of JavaCC.javacc
            consumeToken(93);
            // Code for CompilationUnit specified on line 697 of JavaCC.javacc
            jcu=CompilationUnit();
            // Code for expansion specified on line 698 of JavaCC.javacc
            consumeToken(94);
            // Code for expansion specified on line 699 of JavaCC.javacc
            token_source.inJavaCode=false;
            grammar.addCodeInjection(jcu);
            if (trace_enabled) LOGGER.info("Exiting normally from CodeInjection2");
        }
        catch(ParseException e) {
            parseException106=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException106!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException106.getMessage());
                    clearNodeScope();
                }
                else {
                    CodeInjection2106.setEndLine(current_token.getEndLine());
                    CodeInjection2106.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(CodeInjection2106,nodeArity()>1);
                }
            }
        }
    }

    // JavaCC.javacc, line 706
    final public void Options() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 706 of JavaCC.javacc");
        // Code for expansion specified on line 709 of JavaCC.javacc
        boolean Options107forced=false;
        Options Options107=null;
        if (buildTree) {
            Options107=new Options();
            Token start=getToken(1);
            Options107.setBeginLine(start.beginLine);
            Options107.setBeginColumn(start.beginColumn);
            Options107.setInputSource(this.getInputSource());
            openNodeScope(Options107);
            openNodeScopeHook(Options107);
        }
        ParseException parseException107=null;
        try {
            // Code for expansion specified on line 709 of JavaCC.javacc
            consumeToken(_OPTIONS);
            // Code for expansion specified on line 709 of JavaCC.javacc
            int int100=nextTokenKind();
            if (int100==106) {
                // Code for expansion specified on line 709 of JavaCC.javacc
                // Code for expansion specified on line 709 of JavaCC.javacc
                consumeToken(106);
            }
            // Code for expansion specified on line 710 of JavaCC.javacc
            consumeToken(93);
            // Code for expansion specified on line 710 of JavaCC.javacc
            label_126:
            while (true) {
                int int101=nextTokenKind();
                if (!(int101==4||int101==5||int101==IDENTIFIER)) {
                    break label_126;
                }
                // Code for expansion specified on line 710 of JavaCC.javacc
                // Code for option_binding specified on line 710 of JavaCC.javacc
                option_binding();
            }
            // Code for expansion specified on line 710 of JavaCC.javacc
            consumeToken(94);
            // Code for expansion specified on line 711 of JavaCC.javacc
            token_source.optionsSeen=true;
            if (trace_enabled) LOGGER.info("Exiting normally from Options");
        }
        catch(ParseException e) {
            parseException107=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException107!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException107.getMessage());
                    clearNodeScope();
                }
                else {
                    Options107.setEndLine(current_token.getEndLine());
                    Options107.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(Options107,nodeArity()>1);
                }
            }
        }
    }

    // JavaCC.javacc, line 714
    final public void option_binding() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 714 of JavaCC.javacc");
        String option_name;
        Token name,t=null;
        JavaCCOptions _options=grammar.getOptions();
        boolean inInclude=grammar.isInInclude();
        Object value=Boolean.TRUE;
        // Code for expansion specified on line 723 of JavaCC.javacc
        // Code for expansion specified on line 724 of JavaCC.javacc
        switch(nextTokenKind()) {
            case IDENTIFIER:
            // Code for expansion specified on line 724 of JavaCC.javacc
            // Code for expansion specified on line 724 of JavaCC.javacc
            name=consumeToken(IDENTIFIER);
            break;
            case 4:
            // Code for expansion specified on line 726 of JavaCC.javacc
            // Code for expansion specified on line 726 of JavaCC.javacc
            name=consumeToken(4);
            break;
            case 5:
            // Code for expansion specified on line 728 of JavaCC.javacc
            // Code for expansion specified on line 728 of JavaCC.javacc
            name=consumeToken(5);
            break;
            default:
            consumeToken(-1);
            throw new ParseException();
        }
        // Code for expansion specified on line 730 of JavaCC.javacc
        option_name=name.image;
        // Code for expansion specified on line 733 of JavaCC.javacc
        int int102=nextTokenKind();
        if (int102==100) {
            // Code for expansion specified on line 734 of JavaCC.javacc
            // Code for expansion specified on line 734 of JavaCC.javacc
            consumeToken(100);
            // Code for expansion specified on line 736 of JavaCC.javacc
            switch(nextTokenKind()) {
                case 72:
                // Code for expansion specified on line 736 of JavaCC.javacc
                // Code for expansion specified on line 736 of JavaCC.javacc
                t=consumeToken(72);
                // Code for expansion specified on line 736 of JavaCC.javacc
                value=true;
                break;
                case 41:
                // Code for expansion specified on line 738 of JavaCC.javacc
                // Code for expansion specified on line 738 of JavaCC.javacc
                t=consumeToken(41);
                // Code for expansion specified on line 738 of JavaCC.javacc
                value=false;
                break;
                case INTEGER_LITERAL:
                // Code for expansion specified on line 740 of JavaCC.javacc
                // Code for expansion specified on line 740 of JavaCC.javacc
                t=consumeToken(INTEGER_LITERAL);
                // Code for expansion specified on line 740 of JavaCC.javacc
                value=Integer.valueOf(t.image);
                break;
                case STRING_LITERAL:
                // Code for expansion specified on line 742 of JavaCC.javacc
                // Code for expansion specified on line 742 of JavaCC.javacc
                t=consumeToken(STRING_LITERAL);
                // Code for expansion specified on line 742 of JavaCC.javacc
                value=removeEscapesAndQuotes(t);
                break;
                case IDENTIFIER:
                // Code for expansion specified on line 744 of JavaCC.javacc
                // Code for expansion specified on line 744 of JavaCC.javacc
                t=consumeToken(IDENTIFIER);
                // Code for expansion specified on line 744 of JavaCC.javacc
                value=t.image;
                break;
                default:
                consumeToken(-1);
                throw new ParseException();
            }
        }
        // Code for expansion specified on line 747 of JavaCC.javacc
        consumeToken(97);
        // Code for expansion specified on line 748 of JavaCC.javacc
        _options.setInputFileOption(name,t,option_name,value,inInclude);
        if (trace_enabled) LOGGER.info("Exiting normally from option_binding");
    }

    // JavaCC.javacc, line 751
    final public BNFProduction BNFProduction() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 751 of JavaCC.javacc");
        TreeBuildingAnnotation tba=null;
        Token t=getToken(1);
        Expansion expansion;
        // Code for expansion specified on line 758 of JavaCC.javacc
        boolean BNFProduction108forced=false;
        BNFProduction BNFProduction108=null;
        if (buildTree) {
            BNFProduction108=new BNFProduction();
            Token start=getToken(1);
            BNFProduction108.setBeginLine(start.beginLine);
            BNFProduction108.setBeginColumn(start.beginColumn);
            BNFProduction108.setInputSource(this.getInputSource());
            openNodeScope(BNFProduction108);
            openNodeScopeHook(BNFProduction108);
        }
        ParseException parseException108=null;
        try {
            // Code for expansion specified on line 758 of JavaCC.javacc
            int int103=nextTokenKind();
            if (int103==58||int103==59||int103==60) {
                // Code for expansion specified on line 759 of JavaCC.javacc
                switch(nextTokenKind()) {
                    case 60:
                    // Code for expansion specified on line 759 of JavaCC.javacc
                    // Code for expansion specified on line 759 of JavaCC.javacc
                    consumeToken(60);
                    break;
                    case 58:
                    // Code for expansion specified on line 759 of JavaCC.javacc
                    // Code for expansion specified on line 759 of JavaCC.javacc
                    consumeToken(58);
                    break;
                    case 59:
                    // Code for expansion specified on line 759 of JavaCC.javacc
                    // Code for expansion specified on line 759 of JavaCC.javacc
                    consumeToken(59);
                    break;
                    default:
                    consumeToken(-1);
                    throw new ParseException();
                }
            }
            // Code for ReturnType specified on line 761 of JavaCC.javacc
            ReturnType();
            // Code for expansion specified on line 762 of JavaCC.javacc
            consumeToken(IDENTIFIER);
            // Code for expansion specified on line 762 of JavaCC.javacc
            BNFProduction108.setName(current_token.image);
            // Code for FormalParameters specified on line 763 of JavaCC.javacc
            FormalParameters();
            // Code for expansion specified on line 764 of JavaCC.javacc
            int int104=nextTokenKind();
            if (int104==103) {
                // Code for expansion specified on line 765 of JavaCC.javacc
                // Code for expansion specified on line 765 of JavaCC.javacc
                consumeToken(BANG);
                // Code for expansion specified on line 765 of JavaCC.javacc
                BNFProduction108.setForced(true);
            }
            // Code for expansion specified on line 767 of JavaCC.javacc
            int int105=nextTokenKind();
            if (int105==70) {
                // Code for expansion specified on line 768 of JavaCC.javacc
                // Code for ThrowsList specified on line 768 of JavaCC.javacc
                ThrowsList();
            }
            // Code for expansion specified on line 770 of JavaCC.javacc
            int int106=nextTokenKind();
            if (int106==HASH_ID) {
                // Code for expansion specified on line 771 of JavaCC.javacc
                // Code for TreeNodeDescriptor specified on line 771 of JavaCC.javacc
                tba=TreeNodeDescriptor();
                // Code for expansion specified on line 772 of JavaCC.javacc
                String nodeName=tba.getNodeName();
                if (nodeName==null) {
                    nodeName=BNFProduction108.getName();
                }
                grammar.addNodeType(nodeName);
            }
            // Code for expansion specified on line 780 of JavaCC.javacc
            consumeToken(106);
            // Code for Block specified on line 781 of JavaCC.javacc
            Block();
            // Code for expansion specified on line 782 of JavaCC.javacc
            token_source.inJavaCode=false;
            // Code for expansion specified on line 785 of JavaCC.javacc
            consumeToken(93);
            // Code for ExpansionChoice specified on line 786 of JavaCC.javacc
            ExpansionChoice();
            // Code for expansion specified on line 786 of JavaCC.javacc
            expansion=(Expansion) peekNode();
            // Code for expansion specified on line 787 of JavaCC.javacc
            consumeToken(94);
            // Code for expansion specified on line 788 of JavaCC.javacc
            BNFProduction108.adjustFirstToken(t);
            if (tba==null&&!grammar.getOptions().getNodeDefaultVoid()) {
                grammar.addNodeType(BNFProduction108.getName());
            }
            BNFProduction108.setExpansion(expansion);
            return BNFProduction108;
        }
        catch(ParseException e) {
            parseException108=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException108!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException108.getMessage());
                    clearNodeScope();
                }
                else {
                    BNFProduction108.setEndLine(current_token.getEndLine());
                    BNFProduction108.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(BNFProduction108,nodeArity()>1);
                }
            }
        }
    }

    // JavaCC.javacc, line 976
    final public TreeBuildingAnnotation TreeNodeDescriptor() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 976 of JavaCC.javacc");
        // Code for expansion specified on line 979 of JavaCC.javacc
        boolean TreeNodeDescriptor109forced=false;
        TreeBuildingAnnotation TreeNodeDescriptor109=null;
        if (buildTree) {
            TreeNodeDescriptor109=new TreeBuildingAnnotation();
            Token start=getToken(1);
            TreeNodeDescriptor109.setBeginLine(start.beginLine);
            TreeNodeDescriptor109.setBeginColumn(start.beginColumn);
            TreeNodeDescriptor109.setInputSource(this.getInputSource());
            openNodeScope(TreeNodeDescriptor109);
            openNodeScopeHook(TreeNodeDescriptor109);
        }
        ParseException parseException109=null;
        try {
            // Code for expansion specified on line 979 of JavaCC.javacc
            consumeToken(HASH_ID);
            // Code for expansion specified on line 980 of JavaCC.javacc
            token_source.inJavaCode=true;
            // Code for expansion specified on line 983 of JavaCC.javacc
            if (phase2_63(INFINITY)) {
                // Code for expansion specified on line 985 of JavaCC.javacc
                // Code for expansion specified on line 989 of JavaCC.javacc
                consumeToken(LPAREN);
                // Code for expansion specified on line 990 of JavaCC.javacc
                int int107=nextTokenKind();
                if (int107==101) {
                    // Code for expansion specified on line 991 of JavaCC.javacc
                    // Code for expansion specified on line 991 of JavaCC.javacc
                    consumeToken(101);
                }
                // Code for Expression specified on line 993 of JavaCC.javacc
                Expression();
                // Code for expansion specified on line 994 of JavaCC.javacc
                consumeToken(RPAREN);
            }
            // Code for expansion specified on line 997 of JavaCC.javacc
            token_source.inJavaCode=false;
            return TreeNodeDescriptor109;
        }
        catch(ParseException e) {
            parseException109=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException109!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException109.getMessage());
                    clearNodeScope();
                }
                else {
                    TreeNodeDescriptor109.setEndLine(current_token.getEndLine());
                    TreeNodeDescriptor109.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(TreeNodeDescriptor109,true);
                }
            }
        }
    }

    // JavaCC.javacc, line 1052
    final public TokenProduction TokenProduction() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1052 of JavaCC.javacc");
        Token t=getToken(1);
        String tokenClassName=null;
        String firstSpecifiedLexicalState=null;
        boolean multipleStatesSpecified=false;
        // Code for expansion specified on line 1060 of JavaCC.javacc
        boolean TokenProduction110forced=false;
        TokenProduction TokenProduction110=null;
        if (buildTree) {
            TokenProduction110=new TokenProduction();
            Token start=getToken(1);
            TokenProduction110.setBeginLine(start.beginLine);
            TokenProduction110.setBeginColumn(start.beginColumn);
            TokenProduction110.setInputSource(this.getInputSource());
            openNodeScope(TokenProduction110);
            openNodeScopeHook(TokenProduction110);
        }
        ParseException parseException110=null;
        try {
            // Code for expansion specified on line 1060 of JavaCC.javacc
            int int109=nextTokenKind();
            if (int109==102) {
                // Code for expansion specified on line 1061 of JavaCC.javacc
                if (phase2_64(2)) {
                    // Code for expansion specified on line 1061 of JavaCC.javacc
                    // Code for expansion specified on line 1061 of JavaCC.javacc
                    consumeToken(102);
                    // Code for expansion specified on line 1061 of JavaCC.javacc
                    consumeToken(117);
                    // Code for expansion specified on line 1061 of JavaCC.javacc
                    consumeToken(101);
                    // Code for expansion specified on line 1061 of JavaCC.javacc
                    multipleStatesSpecified=true;
                }
                else {
                    switch(nextTokenKind()) {
                        case 102:
                        // Code for expansion specified on line 1063 of JavaCC.javacc
                        // Code for expansion specified on line 1063 of JavaCC.javacc
                        consumeToken(102);
                        // Code for expansion specified on line 1064 of JavaCC.javacc
                        consumeToken(IDENTIFIER);
                        // Code for expansion specified on line 1064 of JavaCC.javacc
                        firstSpecifiedLexicalState=current_token.image;
                        grammar.addLexicalState(firstSpecifiedLexicalState);
                        // Code for expansion specified on line 1068 of JavaCC.javacc
                        label_135:
                        while (true) {
                            int int108=nextTokenKind();
                            if (!(int108==98)) {
                                break label_135;
                            }
                            // Code for expansion specified on line 1068 of JavaCC.javacc
                            // Code for expansion specified on line 1068 of JavaCC.javacc
                            consumeToken(98);
                            // Code for expansion specified on line 1068 of JavaCC.javacc
                            consumeToken(IDENTIFIER);
                            // Code for expansion specified on line 1068 of JavaCC.javacc
                            multipleStatesSpecified=true;
                            grammar.addLexicalState(current_token.image);
                        }
                        // Code for expansion specified on line 1069 of JavaCC.javacc
                        consumeToken(101);
                        break;
                        default:
                        consumeToken(-1);
                        throw new ParseException();
                    }
                }
            }
            // Code for expansion specified on line 1071 of JavaCC.javacc
            switch(nextTokenKind()) {
                case _TOKEN:
                // Code for expansion specified on line 1071 of JavaCC.javacc
                // Code for expansion specified on line 1071 of JavaCC.javacc
                consumeToken(_TOKEN);
                break;
                case _SPECIAL_TOKEN:
                // Code for expansion specified on line 1071 of JavaCC.javacc
                // Code for expansion specified on line 1071 of JavaCC.javacc
                consumeToken(_SPECIAL_TOKEN);
                break;
                case _MORE:
                // Code for expansion specified on line 1071 of JavaCC.javacc
                // Code for expansion specified on line 1071 of JavaCC.javacc
                consumeToken(_MORE);
                break;
                case 11:
                // Code for expansion specified on line 1071 of JavaCC.javacc
                // Code for expansion specified on line 1071 of JavaCC.javacc
                consumeToken(11);
                break;
                default:
                consumeToken(-1);
                throw new ParseException();
            }
            // Code for expansion specified on line 1072 of JavaCC.javacc
            int int110=nextTokenKind();
            if (int110==95) {
                // Code for expansion specified on line 1073 of JavaCC.javacc
                // Code for expansion specified on line 1073 of JavaCC.javacc
                consumeToken(95);
                // Code for expansion specified on line 1073 of JavaCC.javacc
                consumeToken(5);
                // Code for expansion specified on line 1073 of JavaCC.javacc
                consumeToken(96);
                // Code for expansion specified on line 1074 of JavaCC.javacc
                if (grammar.getOptions().getUserDefinedLexer()) {
                    grammar.addWarning(current_token,"Ignoring \"IGNORE_CASE\" specification since option USER_DEFINED_LEXER has been set to true.");
                }
            }
            // Code for expansion specified on line 1080 of JavaCC.javacc
            int int111=nextTokenKind();
            if (int111==HASH_ID) {
                // Code for expansion specified on line 1080 of JavaCC.javacc
                // Code for expansion specified on line 1080 of JavaCC.javacc
                t=consumeToken(HASH_ID);
                // Code for expansion specified on line 1080 of JavaCC.javacc
                tokenClassName=t.image.substring(1);
            }
            // Code for expansion specified on line 1081 of JavaCC.javacc
            consumeToken(106);
            // Code for expansion specified on line 1082 of JavaCC.javacc
            consumeToken(93);
            // Code for RegexpSpec specified on line 1083 of JavaCC.javacc
            RegexpSpec(TokenProduction110,tokenClassName);
            // Code for expansion specified on line 1084 of JavaCC.javacc
            label_138:
            while (true) {
                int int112=nextTokenKind();
                if (!(int112==120)) {
                    break label_138;
                }
                // Code for expansion specified on line 1084 of JavaCC.javacc
                // Code for expansion specified on line 1084 of JavaCC.javacc
                consumeToken(120);
                // Code for RegexpSpec specified on line 1084 of JavaCC.javacc
                RegexpSpec(TokenProduction110,tokenClassName);
            }
            // Code for expansion specified on line 1085 of JavaCC.javacc
            t=consumeToken(94);
            // Code for expansion specified on line 1086 of JavaCC.javacc
            if (!multipleStatesSpecified) {
                if (firstSpecifiedLexicalState==null) {
                    firstSpecifiedLexicalState=grammar.getDefaultLexicalState();
                }
                TokenProduction110.setLexicalState(firstSpecifiedLexicalState);
            }
            return TokenProduction110;
        }
        catch(ParseException e) {
            parseException110=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException110!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException110.getMessage());
                    clearNodeScope();
                }
                else {
                    TokenProduction110.setEndLine(current_token.getEndLine());
                    TokenProduction110.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(TokenProduction110,true);
                }
            }
        }
    }

    // JavaCC.javacc, line 1205
    final public TokenManagerDecls TokenManagerDecls() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1205 of JavaCC.javacc");
        token_source.inJavaCode=true;
        // Code for expansion specified on line 1210 of JavaCC.javacc
        boolean TokenManagerDecls111forced=false;
        TokenManagerDecls TokenManagerDecls111=null;
        if (buildTree) {
            TokenManagerDecls111=new TokenManagerDecls();
            Token start=getToken(1);
            TokenManagerDecls111.setBeginLine(start.beginLine);
            TokenManagerDecls111.setBeginColumn(start.beginColumn);
            TokenManagerDecls111.setInputSource(this.getInputSource());
            openNodeScope(TokenManagerDecls111);
            openNodeScopeHook(TokenManagerDecls111);
        }
        ParseException parseException111=null;
        try {
            // Code for expansion specified on line 1210 of JavaCC.javacc
            consumeToken(12);
            // Code for expansion specified on line 1210 of JavaCC.javacc
            consumeToken(106);
            // Code for ClassOrInterfaceBody specified on line 1211 of JavaCC.javacc
            ClassOrInterfaceBody(false);
            // Code for expansion specified on line 1212 of JavaCC.javacc
            token_source.inJavaCode=false;
            return TokenManagerDecls111;
        }
        catch(ParseException e) {
            parseException111=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException111!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException111.getMessage());
                    clearNodeScope();
                }
                else {
                    TokenManagerDecls111.setEndLine(current_token.getEndLine());
                    TokenManagerDecls111.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(TokenManagerDecls111,nodeArity()>1);
                }
            }
        }
    }

    // JavaCC.javacc, line 1218
    final public void RegexpSpec(TokenProduction p,String tokenClassName) throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1218 of JavaCC.javacc");
        RegularExpression regexp;
        // Code for expansion specified on line 1223 of JavaCC.javacc
        boolean RegexpSpec112forced=false;
        RegexpSpec RegexpSpec112=null;
        if (buildTree) {
            RegexpSpec112=new RegexpSpec();
            Token start=getToken(1);
            RegexpSpec112.setBeginLine(start.beginLine);
            RegexpSpec112.setBeginColumn(start.beginColumn);
            RegexpSpec112.setInputSource(this.getInputSource());
            openNodeScope(RegexpSpec112);
            openNodeScopeHook(RegexpSpec112);
        }
        ParseException parseException112=null;
        try {
            // Code for RegexpExpansion specified on line 1223 of JavaCC.javacc
            RegexpExpansion();
            // Code for expansion specified on line 1224 of JavaCC.javacc
            regexp=(RegularExpression) peekNode();
            RegexpSpec112.addChild(popNode());
            regexp.tpContext=p;
            if (tokenClassName!=null) {
                regexp.setGeneratedClassName(tokenClassName);
            }
            // Code for expansion specified on line 1232 of JavaCC.javacc
            int int113=nextTokenKind();
            if (int113==HASH_ID) {
                // Code for expansion specified on line 1233 of JavaCC.javacc
                // Code for expansion specified on line 1233 of JavaCC.javacc
                consumeToken(HASH_ID);
                // Code for expansion specified on line 1234 of JavaCC.javacc
                regexp.setGeneratedSuperClassName(tokenClassName);
                regexp.setGeneratedClassName(current_token.image.substring(1));
            }
            // Code for expansion specified on line 1239 of JavaCC.javacc
            int int114=nextTokenKind();
            if (int114==93) {
                // Code for expansion specified on line 1240 of JavaCC.javacc
                // Code for CodeSnippet specified on line 1240 of JavaCC.javacc
                CodeSnippet();
                // Code for expansion specified on line 1241 of JavaCC.javacc
                if (grammar.getOptions().getUserDefinedLexer()) {
                    grammar.addWarning(peekNode(),"Ignoring code snippet for regular expression specification since option USER_DEFINED_LEXER has been set to true.");
                }
                if (regexp.isPrivate()) {
                    grammar.addParseError(peekNode(),"Code snippets are not permitted on private (#) regular expressions.");
                }
            }
            // Code for expansion specified on line 1250 of JavaCC.javacc
            int int115=nextTokenKind();
            if (int115==106) {
                // Code for expansion specified on line 1250 of JavaCC.javacc
                // Code for expansion specified on line 1250 of JavaCC.javacc
                consumeToken(106);
                // Code for expansion specified on line 1250 of JavaCC.javacc
                consumeToken(IDENTIFIER);
                // Code for expansion specified on line 1251 of JavaCC.javacc
                if (regexp.isPrivate()) {
                    grammar.addParseError(current_token,"Lexical state changes are not permitted after private (#) regular expressions.");
                }
            }
            if (trace_enabled) LOGGER.info("Exiting normally from RegexpSpec");
        }
        catch(ParseException e) {
            parseException112=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException112!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException112.getMessage());
                    clearNodeScope();
                }
                else {
                    RegexpSpec112.setEndLine(current_token.getEndLine());
                    RegexpSpec112.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(RegexpSpec112,true);
                }
            }
        }
    }

    // JavaCC.javacc, line 1282
    final public void ExpansionChoice() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1282 of JavaCC.javacc");
        // Code for expansion specified on line 1285 of JavaCC.javacc
        boolean ExpansionChoice113forced=false;
        ExpansionChoice ExpansionChoice113=null;
        if (buildTree) {
            ExpansionChoice113=new ExpansionChoice();
            Token start=getToken(1);
            ExpansionChoice113.setBeginLine(start.beginLine);
            ExpansionChoice113.setBeginColumn(start.beginColumn);
            ExpansionChoice113.setInputSource(this.getInputSource());
            openNodeScope(ExpansionChoice113);
            openNodeScopeHook(ExpansionChoice113);
        }
        ParseException parseException113=null;
        try {
            // Code for ExpansionSequence specified on line 1285 of JavaCC.javacc
            ExpansionSequence();
            // Code for expansion specified on line 1286 of JavaCC.javacc
            label_142:
            while (true) {
                int int116=nextTokenKind();
                if (!(int116==120)) {
                    break label_142;
                }
                // Code for expansion specified on line 1286 of JavaCC.javacc
                // Code for expansion specified on line 1286 of JavaCC.javacc
                consumeToken(120);
                // Code for ExpansionSequence specified on line 1286 of JavaCC.javacc
                ExpansionSequence();
            }
            if (trace_enabled) LOGGER.info("Exiting normally from ExpansionChoice");
        }
        catch(ParseException e) {
            parseException113=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException113!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException113.getMessage());
                    clearNodeScope();
                }
                else {
                    ExpansionChoice113.setEndLine(current_token.getEndLine());
                    ExpansionChoice113.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(ExpansionChoice113,nodeArity()>1);
                }
            }
        }
    }

    // JavaCC.javacc, line 1348
    final public Expansion ExpansionSequence() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1348 of JavaCC.javacc");
        Expansion sub;
        Lookahead la=new Lookahead(grammar);
        Token t=getToken(1);
        la.setBeginLine(t.getBeginLine());
        la.setBeginColumn(t.getBeginColumn());
        la.setAmount(grammar.getOptions().getLookahead());
        // Code for expansion specified on line 1358 of JavaCC.javacc
        boolean ExpansionSequence114forced=false;
        ExpansionSequence ExpansionSequence114=null;
        if (buildTree) {
            ExpansionSequence114=new ExpansionSequence();
            Token start=getToken(1);
            ExpansionSequence114.setBeginLine(start.beginLine);
            ExpansionSequence114.setBeginColumn(start.beginColumn);
            ExpansionSequence114.setInputSource(this.getInputSource());
            openNodeScope(ExpansionSequence114);
            openNodeScopeHook(ExpansionSequence114);
        }
        ParseException parseException114=null;
        try {
            // Code for expansion specified on line 1358 of JavaCC.javacc
            if (phase2_65(INFINITY)) {
                // Code for expansion specified on line 1359 of JavaCC.javacc
                // Code for Lookahead specified on line 1360 of JavaCC.javacc
                la=Lookahead();
                // Code for expansion specified on line 1361 of JavaCC.javacc
                if (inLocalLA!=0&&la.getAmount()!=0) {
                    grammar.addWarning(t,"Only semantic lookahead specifications within other lookahead specifications is considered.  Syntactic lookahead is ignored.");
                }
            }
            // Code for expansion specified on line 1367 of JavaCC.javacc
            if (!(la instanceof ExplicitLookahead)) {
                pushNode(la);
            }
            // Code for expansion specified on line 1377 of JavaCC.javacc
            label_144:
            while (true) {
                // Code for expansion specified on line 1372 of JavaCC.javacc
                // Code for ExpansionUnit specified on line 1373 of JavaCC.javacc
                sub=ExpansionUnit();
                // Code for expansion specified on line 1374 of JavaCC.javacc
                pokeNode(sub);
                if (!(notTailOfExpansionUnit())) {
                    break label_144;
                }
            }
            // Code for expansion specified on line 1378 of JavaCC.javacc
            if (la.getNestedExpansion()==null) {
                la.setExpansion(ExpansionSequence114);
            }
            ExpansionSequence114.setLookahead(la);
            return ExpansionSequence114;
        }
        catch(ParseException e) {
            parseException114=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException114!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException114.getMessage());
                    clearNodeScope();
                }
                else {
                    ExpansionSequence114.setEndLine(current_token.getEndLine());
                    ExpansionSequence114.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(ExpansionSequence114,nodeArity()>1);
                }
            }
        }
    }

    // JavaCC.javacc, line 1484
    final public ExplicitLookahead Lookahead() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1484 of JavaCC.javacc");
        boolean commaAtEnd=false,emptyLA=true;
        inLocalLA++;
        Expansion expansion;
        token_source.inJavaCode=true;
        Expression semanticLookahead=null;
        // Code for expansion specified on line 1493 of JavaCC.javacc
        boolean Lookahead115forced=false;
        ExplicitLookahead Lookahead115=null;
        if (buildTree) {
            Lookahead115=new ExplicitLookahead();
            Token start=getToken(1);
            Lookahead115.setBeginLine(start.beginLine);
            Lookahead115.setBeginColumn(start.beginColumn);
            Lookahead115.setInputSource(this.getInputSource());
            openNodeScope(Lookahead115);
            openNodeScopeHook(Lookahead115);
        }
        ParseException parseException115=null;
        try {
            // Code for expansion specified on line 1493 of JavaCC.javacc
            consumeToken(4);
            // Code for expansion specified on line 1493 of JavaCC.javacc
            consumeToken(91);
            // Code for expansion specified on line 1494 of JavaCC.javacc
            int int117=nextTokenKind();
            if (int117==INTEGER_LITERAL) {
                // Code for expansion specified on line 1501 of JavaCC.javacc
                // Code for expansion specified on line 1502 of JavaCC.javacc
                consumeToken(INTEGER_LITERAL);
                // Code for expansion specified on line 1503 of JavaCC.javacc
                Lookahead115.setAmount(Integer.parseInt(current_token.toString()));
                emptyLA=false;
            }
            // Code for expansion specified on line 1508 of JavaCC.javacc
            if (!emptyLA&&(getToken(1).kind!=RPAREN)) {
                // Code for expansion specified on line 1508 of JavaCC.javacc
                // Code for expansion specified on line 1509 of JavaCC.javacc
                consumeToken(98);
                // Code for expansion specified on line 1510 of JavaCC.javacc
                commaAtEnd=true;
            }
            // Code for expansion specified on line 1514 of JavaCC.javacc
            if (getToken(1).kind!=RPAREN&&getToken(1).kind!=LBRACE) {
                // Code for expansion specified on line 1514 of JavaCC.javacc
                // Code for ExpansionChoice specified on line 1515 of JavaCC.javacc
                ExpansionChoice();
                // Code for expansion specified on line 1516 of JavaCC.javacc
                expansion=(Expansion) popNode();
                emptyLA=false;
                commaAtEnd=false;
                Lookahead115.setExpansion(expansion);
            }
            // Code for expansion specified on line 1522 of JavaCC.javacc
            if (!emptyLA&&!commaAtEnd&&(getToken(1).kind!=RPAREN)) {
                // Code for expansion specified on line 1522 of JavaCC.javacc
                // Code for expansion specified on line 1523 of JavaCC.javacc
                consumeToken(98);
                // Code for expansion specified on line 1524 of JavaCC.javacc
                commaAtEnd=true;
            }
            // Code for expansion specified on line 1528 of JavaCC.javacc
            if (emptyLA||commaAtEnd) {
                // Code for expansion specified on line 1528 of JavaCC.javacc
                // Code for expansion specified on line 1529 of JavaCC.javacc
                consumeToken(93);
                // Code for Expression specified on line 1530 of JavaCC.javacc
                semanticLookahead=Expression();
                // Code for expansion specified on line 1531 of JavaCC.javacc
                consumeToken(94);
                // Code for expansion specified on line 1532 of JavaCC.javacc
                Lookahead115.setSemanticLookahead(semanticLookahead);
                if (emptyLA) {
                    Lookahead115.setAmount(0);
                }
            }
            // Code for expansion specified on line 1539 of JavaCC.javacc
            consumeToken(92);
            // Code for expansion specified on line 1540 of JavaCC.javacc
            inLocalLA--;
            token_source.inJavaCode=false;
            return Lookahead115;
        }
        catch(ParseException e) {
            parseException115=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException115!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException115.getMessage());
                    clearNodeScope();
                }
                else {
                    Lookahead115.setEndLine(current_token.getEndLine());
                    Lookahead115.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(Lookahead115,true);
                }
            }
        }
    }

    // JavaCC.javacc, line 1553
    final public Expansion ExpansionUnit() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1553 of JavaCC.javacc");
        Expression lhs=null;
        CodeBlock act;
        Token t=current_token;
        Lookahead la=null;
        Expansion result=null;
        TreeBuildingAnnotation tba=null;
        // Code for expansion specified on line 1563 of JavaCC.javacc
        boolean ExpansionUnit116forced=false;
        ExpansionUnit ExpansionUnit116=null;
        if (buildTree) {
            ExpansionUnit116=new ExpansionUnit();
            Token start=getToken(1);
            ExpansionUnit116.setBeginLine(start.beginLine);
            ExpansionUnit116.setBeginColumn(start.beginColumn);
            ExpansionUnit116.setInputSource(this.getInputSource());
            openNodeScope(ExpansionUnit116);
            openNodeScopeHook(ExpansionUnit116);
        }
        ParseException parseException116=null;
        try {
            // Code for expansion specified on line 1564 of JavaCC.javacc
            switch(nextTokenKind()) {
                case 4:
                // Code for expansion specified on line 1564 of JavaCC.javacc
                // Code for Lookahead specified on line 1564 of JavaCC.javacc
                la=Lookahead();
                // Code for expansion specified on line 1565 of JavaCC.javacc
                // Now set the expansion field of la with a dummy
                // expansion (we use EOF).
                // la.setExpansion(new EndOfFile());
                // Create a singleton choice with an empty code snippet.
                ExpansionChoice ch=new ExpansionChoice();
                ch.setGrammar(grammar);
                ExpansionSequence seq=new ExpansionSequence(grammar);
                seq.addChild(la);
                seq.setLookahead(la);
                act=new CodeBlock();
                act.setGrammar(grammar);
                act.setBeginLine(t.getBeginLine());
                act.setBeginColumn(t.getBeginColumn());
                seq.addChild(act);
                ch.addChild(seq);
                if (la.getAmount()!=0) {
                    if (la.getSemanticLookahead()!=null) {
                        grammar.addWarning(t,"Encountered LOOKAHEAD(...) at a non-choice location. Only semantic lookahead will be considered here.");
                    }
                    else {
                        grammar.addWarning(t,"Encountered LOOKAHEAD(...) at a non-choice location. This will be ignored.");
                    }
                }
                result=ch;
                break;
                case 93:
                // Code for expansion specified on line 1591 of JavaCC.javacc
                // Code for CodeSnippet specified on line 1591 of JavaCC.javacc
                result=CodeSnippet();
                break;
                case 95:
                // Code for expansion specified on line 1593 of JavaCC.javacc
                // Code for ZeroOrOne specified on line 1593 of JavaCC.javacc
                result=ZeroOrOne();
                break;
                case 73:
                // Code for expansion specified on line 1595 of JavaCC.javacc
                // Code for TryBlock specified on line 1595 of JavaCC.javacc
                result=TryBlock();
                break;
                default:
                if (phase2_67(INFINITY)) {
                    // Code for expansion specified on line 1597 of JavaCC.javacc
                    // Code for expansion specified on line 1598 of JavaCC.javacc
                    if (phase2_66(INFINITY)) {
                        // Code for expansion specified on line 1599 of JavaCC.javacc
                        // Code for PrimaryExpression specified on line 1600 of JavaCC.javacc
                        lhs=PrimaryExpression();
                        // Code for expansion specified on line 1601 of JavaCC.javacc
                        consumeToken(100);
                    }
                    // Code for RegexpExpansion specified on line 1603 of JavaCC.javacc
                    RegexpExpansion();
                    // Code for expansion specified on line 1604 of JavaCC.javacc
                    RegularExpression re=(RegularExpression) peekNode();
                    result=re;
                    re.setLHS(lhs);
                    if (!(re instanceof EndOfFile)) {
                        TokenProduction tokenProduction=new TokenProduction();
                        tokenProduction.setGrammar(grammar);
                        tokenProduction.setExplicit(false);
                        tokenProduction.setLexicalState(grammar.getDefaultLexicalState());
                        RegexpSpec res=new RegexpSpec();
                        res.addChild(re);
                        re.tpContext=tokenProduction;
                        tokenProduction.addChild(res);
                        //            grammar.addChild(tokenProduction);
                        grammar.addTokenProduction(tokenProduction);
                    }
                    // Code for expansion specified on line 1621 of JavaCC.javacc
                    int int118=nextTokenKind();
                    if (int118==103) {
                        // Code for expansion specified on line 1621 of JavaCC.javacc
                        // Code for expansion specified on line 1621 of JavaCC.javacc
                        consumeToken(BANG);
                        // Code for expansion specified on line 1621 of JavaCC.javacc
                        result.setForced(true);
                    }
                }
                else if (phase2_68(INFINITY)) {
                    // Code for expansion specified on line 1623 of JavaCC.javacc
                    // Code for NonTerminal specified on line 1624 of JavaCC.javacc
                    result=NonTerminal();
                }
                else {
                    switch(nextTokenKind()) {
                        case 91:
                        // Code for expansion specified on line 1626 of JavaCC.javacc
                        // Code for expansion specified on line 1626 of JavaCC.javacc
                        consumeToken(91);
                        // Code for ExpansionChoice specified on line 1626 of JavaCC.javacc
                        ExpansionChoice();
                        // Code for expansion specified on line 1626 of JavaCC.javacc
                        result=(Expansion) peekNode();
                        // Code for expansion specified on line 1626 of JavaCC.javacc
                        consumeToken(92);
                        // Code for expansion specified on line 1627 of JavaCC.javacc
                        int int119=nextTokenKind();
                        if (int119==103||int119==105||int119==115||int119==117) {
                            // Code for expansion specified on line 1628 of JavaCC.javacc
                            switch(nextTokenKind()) {
                                case 103:
                                // Code for expansion specified on line 1628 of JavaCC.javacc
                                // Code for expansion specified on line 1628 of JavaCC.javacc
                                consumeToken(BANG);
                                // Code for expansion specified on line 1628 of JavaCC.javacc
                                result.setForced(true);
                                break;
                                case 115:
                                // Code for expansion specified on line 1630 of JavaCC.javacc
                                // Code for expansion specified on line 1630 of JavaCC.javacc
                                boolean ExpansionUnit117forced=false;
                                OneOrMore ExpansionUnit117=null;
                                if (buildTree) {
                                    ExpansionUnit117=new OneOrMore();
                                    Token start=getToken(1);
                                    ExpansionUnit117.setBeginLine(start.beginLine);
                                    ExpansionUnit117.setBeginColumn(start.beginColumn);
                                    ExpansionUnit117.setInputSource(this.getInputSource());
                                    openNodeScope(ExpansionUnit117);
                                    openNodeScopeHook(ExpansionUnit117);
                                }
                                ParseException parseException117=null;
                                try {
                                    consumeToken(115);
                                }
                                catch(ParseException e) {
                                    parseException117=e;
                                    throw e;
                                }
                                finally {
                                    if (buildTree) {
                                        if (parseException117!=null) {
                                            if (trace_enabled) LOGGER.warning("ParseException: "+parseException117.getMessage());
                                            clearNodeScope();
                                        }
                                        else {
                                            ExpansionUnit117.setEndLine(current_token.getEndLine());
                                            ExpansionUnit117.setEndColumn(current_token.getEndColumn());
                                            closeNodeScope(ExpansionUnit117,4);
                                        }
                                    }
                                }
                                // Code for expansion specified on line 1630 of JavaCC.javacc
                                result=(OneOrMore) peekNode();
                                break;
                                case 117:
                                // Code for expansion specified on line 1631 of JavaCC.javacc
                                // Code for expansion specified on line 1631 of JavaCC.javacc
                                boolean ExpansionUnit118forced=false;
                                ZeroOrMore ExpansionUnit118=null;
                                if (buildTree) {
                                    ExpansionUnit118=new ZeroOrMore();
                                    Token start=getToken(1);
                                    ExpansionUnit118.setBeginLine(start.beginLine);
                                    ExpansionUnit118.setBeginColumn(start.beginColumn);
                                    ExpansionUnit118.setInputSource(this.getInputSource());
                                    openNodeScope(ExpansionUnit118);
                                    openNodeScopeHook(ExpansionUnit118);
                                }
                                ParseException parseException118=null;
                                try {
                                    consumeToken(117);
                                }
                                catch(ParseException e) {
                                    parseException118=e;
                                    throw e;
                                }
                                finally {
                                    if (buildTree) {
                                        if (parseException118!=null) {
                                            if (trace_enabled) LOGGER.warning("ParseException: "+parseException118.getMessage());
                                            clearNodeScope();
                                        }
                                        else {
                                            ExpansionUnit118.setEndLine(current_token.getEndLine());
                                            ExpansionUnit118.setEndColumn(current_token.getEndColumn());
                                            closeNodeScope(ExpansionUnit118,4);
                                        }
                                    }
                                }
                                // Code for expansion specified on line 1631 of JavaCC.javacc
                                result=(ZeroOrMore) peekNode();
                                break;
                                case 105:
                                // Code for expansion specified on line 1632 of JavaCC.javacc
                                // Code for expansion specified on line 1632 of JavaCC.javacc
                                boolean ExpansionUnit119forced=false;
                                ZeroOrOne ExpansionUnit119=null;
                                if (buildTree) {
                                    ExpansionUnit119=new ZeroOrOne();
                                    Token start=getToken(1);
                                    ExpansionUnit119.setBeginLine(start.beginLine);
                                    ExpansionUnit119.setBeginColumn(start.beginColumn);
                                    ExpansionUnit119.setInputSource(this.getInputSource());
                                    openNodeScope(ExpansionUnit119);
                                    openNodeScopeHook(ExpansionUnit119);
                                }
                                ParseException parseException119=null;
                                try {
                                    consumeToken(105);
                                }
                                catch(ParseException e) {
                                    parseException119=e;
                                    throw e;
                                }
                                finally {
                                    if (buildTree) {
                                        if (parseException119!=null) {
                                            if (trace_enabled) LOGGER.warning("ParseException: "+parseException119.getMessage());
                                            clearNodeScope();
                                        }
                                        else {
                                            ExpansionUnit119.setEndLine(current_token.getEndLine());
                                            ExpansionUnit119.setEndColumn(current_token.getEndColumn());
                                            closeNodeScope(ExpansionUnit119,4);
                                        }
                                    }
                                }
                                // Code for expansion specified on line 1632 of JavaCC.javacc
                                result=(ZeroOrOne) peekNode();
                                break;
                                default:
                                consumeToken(-1);
                                throw new ParseException();
                            }
                        }
                        break;
                        default:
                        consumeToken(-1);
                        throw new ParseException();
                    }
                }
            }
            // Code for expansion specified on line 1635 of JavaCC.javacc
            int int120=nextTokenKind();
            if (int120==HASH_ID) {
                // Code for expansion specified on line 1636 of JavaCC.javacc
                // Code for TreeNodeDescriptor specified on line 1636 of JavaCC.javacc
                tba=TreeNodeDescriptor();
            }
            // Code for expansion specified on line 1638 of JavaCC.javacc
            result.setTreeNodeBehavior(tba);
            return result;
        }
        catch(ParseException e) {
            parseException116=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException116!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException116.getMessage());
                    clearNodeScope();
                }
                else {
                    ExpansionUnit116.setEndLine(current_token.getEndLine());
                    ExpansionUnit116.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(ExpansionUnit116,nodeArity()>1);
                }
            }
        }
    }

    // JavaCC.javacc, line 1644
    final public NonTerminal NonTerminal() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1644 of JavaCC.javacc");
        // Code for expansion specified on line 1647 of JavaCC.javacc
        boolean NonTerminal120forced=false;
        NonTerminal NonTerminal120=null;
        if (buildTree) {
            NonTerminal120=new NonTerminal();
            Token start=getToken(1);
            NonTerminal120.setBeginLine(start.beginLine);
            NonTerminal120.setBeginColumn(start.beginColumn);
            NonTerminal120.setInputSource(this.getInputSource());
            openNodeScope(NonTerminal120);
            openNodeScopeHook(NonTerminal120);
        }
        ParseException parseException120=null;
        try {
            // Code for expansion specified on line 1647 of JavaCC.javacc
            if (phase2_69(INFINITY)) {
                // Code for expansion specified on line 1648 of JavaCC.javacc
                // Code for PrimaryExpression specified on line 1649 of JavaCC.javacc
                PrimaryExpression();
                // Code for expansion specified on line 1650 of JavaCC.javacc
                consumeToken(100);
            }
            // Code for expansion specified on line 1652 of JavaCC.javacc
            consumeToken(IDENTIFIER);
            // Code for expansion specified on line 1653 of JavaCC.javacc
            if (phase2_70(INFINITY)) {
                // Code for expansion specified on line 1654 of JavaCC.javacc
                // Code for Arguments specified on line 1655 of JavaCC.javacc
                Arguments();
            }
            // Code for expansion specified on line 1657 of JavaCC.javacc
            int int121=nextTokenKind();
            if (int121==103) {
                // Code for expansion specified on line 1658 of JavaCC.javacc
                // Code for expansion specified on line 1658 of JavaCC.javacc
                consumeToken(BANG);
                // Code for expansion specified on line 1658 of JavaCC.javacc
                NonTerminal120.setForced(true);
            }
            // Code for expansion specified on line 1660 of JavaCC.javacc
            return NonTerminal120;
        }
        catch(ParseException e) {
            parseException120=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException120!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException120.getMessage());
                    clearNodeScope();
                }
                else {
                    NonTerminal120.setEndLine(current_token.getEndLine());
                    NonTerminal120.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(NonTerminal120,true);
                }
            }
        }
    }

    // JavaCC.javacc, line 1741
    final public ZeroOrOne ZeroOrOne() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1741 of JavaCC.javacc");
        // Code for expansion specified on line 1744 of JavaCC.javacc
        boolean ZeroOrOne121forced=false;
        ZeroOrOne ZeroOrOne121=null;
        if (buildTree) {
            ZeroOrOne121=new ZeroOrOne();
            Token start=getToken(1);
            ZeroOrOne121.setBeginLine(start.beginLine);
            ZeroOrOne121.setBeginColumn(start.beginColumn);
            ZeroOrOne121.setInputSource(this.getInputSource());
            openNodeScope(ZeroOrOne121);
            openNodeScopeHook(ZeroOrOne121);
        }
        ParseException parseException121=null;
        try {
            // Code for expansion specified on line 1744 of JavaCC.javacc
            consumeToken(95);
            // Code for ExpansionChoice specified on line 1745 of JavaCC.javacc
            ExpansionChoice();
            // Code for expansion specified on line 1746 of JavaCC.javacc
            consumeToken(96);
            // Code for expansion specified on line 1747 of JavaCC.javacc
            return ZeroOrOne121;
        }
        catch(ParseException e) {
            parseException121=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException121!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException121.getMessage());
                    clearNodeScope();
                }
                else {
                    ZeroOrOne121.setEndLine(current_token.getEndLine());
                    ZeroOrOne121.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(ZeroOrOne121,true);
                }
            }
        }
    }

    // JavaCC.javacc, line 1910
    final public TryBlock TryBlock() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1910 of JavaCC.javacc");
        // Code for expansion specified on line 1913 of JavaCC.javacc
        boolean TryBlock122forced=false;
        TryBlock TryBlock122=null;
        if (buildTree) {
            TryBlock122=new TryBlock();
            Token start=getToken(1);
            TryBlock122.setBeginLine(start.beginLine);
            TryBlock122.setBeginColumn(start.beginColumn);
            TryBlock122.setInputSource(this.getInputSource());
            openNodeScope(TryBlock122);
            openNodeScopeHook(TryBlock122);
        }
        ParseException parseException122=null;
        try {
            // Code for expansion specified on line 1913 of JavaCC.javacc
            consumeToken(73);
            // Code for expansion specified on line 1913 of JavaCC.javacc
            consumeToken(93);
            // Code for ExpansionChoice specified on line 1914 of JavaCC.javacc
            ExpansionChoice();
            // Code for expansion specified on line 1915 of JavaCC.javacc
            consumeToken(94);
            // Code for expansion specified on line 1916 of JavaCC.javacc
            token_source.inJavaCode=true;
            // Code for expansion specified on line 1921 of JavaCC.javacc
            label_157:
            while (true) {
                int int122=nextTokenKind();
                if (!(int122==30)) {
                    break label_157;
                }
                // Code for expansion specified on line 1920 of JavaCC.javacc
                // Code for CatchBlock specified on line 1920 of JavaCC.javacc
                CatchBlock();
            }
            // Code for expansion specified on line 1922 of JavaCC.javacc
            int int123=nextTokenKind();
            if (int123==43) {
                // Code for expansion specified on line 1923 of JavaCC.javacc
                // Code for FinallyBlock specified on line 1923 of JavaCC.javacc
                FinallyBlock();
                // Code for expansion specified on line 1924 of JavaCC.javacc
                token_source.inJavaCode=false;
            }
            // Code for expansion specified on line 1928 of JavaCC.javacc
            return TryBlock122;
        }
        catch(ParseException e) {
            parseException122=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException122!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException122.getMessage());
                    clearNodeScope();
                }
                else {
                    TryBlock122.setEndLine(current_token.getEndLine());
                    TryBlock122.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(TryBlock122,nodeArity()>1);
                }
            }
        }
    }

    // JavaCC.javacc, line 1974
    final public CodeBlock CodeSnippet() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 1974 of JavaCC.javacc");
        CodeBlock block;
        token_source.inJavaCode=true;
        // Code for expansion specified on line 1980 of JavaCC.javacc
        // Code for Block specified on line 1980 of JavaCC.javacc
        block=Block();
        // Code for expansion specified on line 1981 of JavaCC.javacc
        if (inLocalLA!=0) {
            grammar.addWarning(block,"Code snippet within lookahead specification will be ignored.");
        }
        token_source.inJavaCode=false;
        return block;
    }

    // JavaCC.javacc, line 2026
    final public void RegexpExpansion() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 2026 of JavaCC.javacc");
        // Code for expansion specified on line 2029 of JavaCC.javacc
        // Code for expansion specified on line 2030 of JavaCC.javacc
        switch(nextTokenKind()) {
            case STRING_LITERAL:
            // Code for expansion specified on line 2030 of JavaCC.javacc
            // Code for RegexpStringLiteral specified on line 2030 of JavaCC.javacc
            RegexpStringLiteral();
            break;
            default:
            if (phase2_71(3)) {
                // Code for expansion specified on line 2032 of JavaCC.javacc
                // Code for InPlaceRegexp specified on line 2033 of JavaCC.javacc
                InPlaceRegexp();
            }
            else if (phase2_72(2)) {
                // Code for expansion specified on line 2035 of JavaCC.javacc
                // Code for RegexpRef specified on line 2036 of JavaCC.javacc
                RegexpRef();
            }
            else {
                switch(nextTokenKind()) {
                    case 102:
                    // Code for expansion specified on line 2038 of JavaCC.javacc
                    // Code for EndOfFile specified on line 2038 of JavaCC.javacc
                    EndOfFile();
                    break;
                    default:
                    consumeToken(-1);
                    throw new ParseException();
                }
            }
        }
        if (trace_enabled) LOGGER.info("Exiting normally from RegexpExpansion");
    }

    //FIXME
    // JavaCC.javacc, line 2043
    final public void InPlaceRegexp() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 2043 of JavaCC.javacc");
        RegularExpression re,choice;
        String image="";
        Token t;
        boolean isPrivate=false;
        // Code for expansion specified on line 2051 of JavaCC.javacc
        // Code for expansion specified on line 2051 of JavaCC.javacc
        t=consumeToken(LT);
        // Code for expansion specified on line 2052 of JavaCC.javacc
        int int124=nextTokenKind();
        if (int124==HASH_ID||int124==IDENTIFIER) {
            // Code for expansion specified on line 2053 of JavaCC.javacc
            // Code for expansion specified on line 2054 of JavaCC.javacc
            switch(nextTokenKind()) {
                case IDENTIFIER:
                // Code for expansion specified on line 2054 of JavaCC.javacc
                // Code for expansion specified on line 2054 of JavaCC.javacc
                t=consumeToken(IDENTIFIER);
                // Code for expansion specified on line 2054 of JavaCC.javacc
                image=t.image;
                break;
                case HASH_ID:
                // Code for expansion specified on line 2056 of JavaCC.javacc
                // Code for expansion specified on line 2056 of JavaCC.javacc
                t=consumeToken(HASH_ID);
                // Code for expansion specified on line 2056 of JavaCC.javacc
                image=t.image.substring(1);
                isPrivate=true;
                break;
                default:
                consumeToken(-1);
                throw new ParseException();
            }
            // Code for expansion specified on line 2058 of JavaCC.javacc
            consumeToken(106);
        }
        // Code for expansion specified on line 2060 of JavaCC.javacc
        clearNodeScope();
        // Code for RegexpChoice specified on line 2061 of JavaCC.javacc
        RegexpChoice();
        // Code for expansion specified on line 2061 of JavaCC.javacc
        choice=(RegularExpression) peekNode();
        // Code for expansion specified on line 2062 of JavaCC.javacc
        consumeToken(GT);
        // Code for expansion specified on line 2063 of JavaCC.javacc
        if (choice instanceof RegexpRef) {
            RegexpSequence seq=new RegexpSequence();
            seq.addChild(choice);
            re=seq;
        }
        else {
            re=choice;
        }
        re.setLabel(image);
        re.setGeneratedClassName(image);
        re.setPrivate(isPrivate);
        re.setBeginLine(t.getBeginLine());
        re.setBeginColumn(t.getBeginColumn());
        pokeNode(re);
        if (trace_enabled) LOGGER.info("Exiting normally from InPlaceRegexp");
    }

    // JavaCC.javacc, line 2080
    final public RegexpStringLiteral RegexpStringLiteral() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 2080 of JavaCC.javacc");
        // Code for expansion specified on line 2083 of JavaCC.javacc
        boolean RegexpStringLiteral123forced=false;
        RegexpStringLiteral RegexpStringLiteral123=null;
        if (buildTree) {
            RegexpStringLiteral123=new RegexpStringLiteral();
            Token start=getToken(1);
            RegexpStringLiteral123.setBeginLine(start.beginLine);
            RegexpStringLiteral123.setBeginColumn(start.beginColumn);
            RegexpStringLiteral123.setInputSource(this.getInputSource());
            openNodeScope(RegexpStringLiteral123);
            openNodeScopeHook(RegexpStringLiteral123);
        }
        ParseException parseException123=null;
        try {
            // Code for expansion specified on line 2083 of JavaCC.javacc
            consumeToken(STRING_LITERAL);
            // Code for expansion specified on line 2084 of JavaCC.javacc
            String image=removeEscapesAndQuotes(current_token);
            RegexpStringLiteral123.setImage(image);
            return RegexpStringLiteral123;
        }
        catch(ParseException e) {
            parseException123=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException123!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException123.getMessage());
                    clearNodeScope();
                }
                else {
                    RegexpStringLiteral123.setEndLine(current_token.getEndLine());
                    RegexpStringLiteral123.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(RegexpStringLiteral123,true);
                }
            }
        }
    }

    // JavaCC.javacc, line 2113
    final public RegexpRef RegexpRef() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 2113 of JavaCC.javacc");
        Token t;
        // Code for expansion specified on line 2118 of JavaCC.javacc
        boolean RegexpRef124forced=false;
        RegexpRef RegexpRef124=null;
        if (buildTree) {
            RegexpRef124=new RegexpRef();
            Token start=getToken(1);
            RegexpRef124.setBeginLine(start.beginLine);
            RegexpRef124.setBeginColumn(start.beginColumn);
            RegexpRef124.setInputSource(this.getInputSource());
            openNodeScope(RegexpRef124);
            openNodeScopeHook(RegexpRef124);
        }
        ParseException parseException124=null;
        try {
            // Code for expansion specified on line 2118 of JavaCC.javacc
            consumeToken(102);
            // Code for expansion specified on line 2118 of JavaCC.javacc
            ++token_source.angleBracketNesting;
            // Code for expansion specified on line 2119 of JavaCC.javacc
            t=consumeToken(IDENTIFIER);
            // Code for expansion specified on line 2120 of JavaCC.javacc
            consumeToken(101);
            // Code for expansion specified on line 2120 of JavaCC.javacc
            --token_source.angleBracketNesting;
            // Code for expansion specified on line 2121 of JavaCC.javacc
            RegexpRef124.setLabel(t.image);
            return RegexpRef124;
        }
        catch(ParseException e) {
            parseException124=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException124!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException124.getMessage());
                    clearNodeScope();
                }
                else {
                    RegexpRef124.setEndLine(current_token.getEndLine());
                    RegexpRef124.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(RegexpRef124,nodeArity()>1);
                }
            }
        }
    }

    // JavaCC.javacc, line 2148
    final public void EndOfFile() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 2148 of JavaCC.javacc");
        // Code for expansion specified on line 2151 of JavaCC.javacc
        boolean EndOfFile125forced=false;
        EndOfFile EndOfFile125=null;
        if (buildTree) {
            EndOfFile125=new EndOfFile();
            Token start=getToken(1);
            EndOfFile125.setBeginLine(start.beginLine);
            EndOfFile125.setBeginColumn(start.beginColumn);
            EndOfFile125.setInputSource(this.getInputSource());
            openNodeScope(EndOfFile125);
            openNodeScopeHook(EndOfFile125);
        }
        ParseException parseException125=null;
        try {
            // Code for expansion specified on line 2151 of JavaCC.javacc
            consumeToken(102);
            // Code for expansion specified on line 2151 of JavaCC.javacc
            consumeToken(13);
            // Code for expansion specified on line 2151 of JavaCC.javacc
            consumeToken(101);
            if (trace_enabled) LOGGER.info("Exiting normally from EndOfFile");
        }
        catch(ParseException e) {
            parseException125=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException125!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException125.getMessage());
                    clearNodeScope();
                }
                else {
                    EndOfFile125.setEndLine(current_token.getEndLine());
                    EndOfFile125.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(EndOfFile125,nodeArity()>1);
                }
            }
        }
    }

    // JavaCC.javacc, line 2160
    final public void RegexpChoice() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 2160 of JavaCC.javacc");
        // Code for expansion specified on line 2163 of JavaCC.javacc
        boolean RegexpChoice126forced=false;
        RegexpChoice RegexpChoice126=null;
        if (buildTree) {
            RegexpChoice126=new RegexpChoice();
            Token start=getToken(1);
            RegexpChoice126.setBeginLine(start.beginLine);
            RegexpChoice126.setBeginColumn(start.beginColumn);
            RegexpChoice126.setInputSource(this.getInputSource());
            openNodeScope(RegexpChoice126);
            openNodeScopeHook(RegexpChoice126);
        }
        ParseException parseException126=null;
        try {
            // Code for RegexpSequence specified on line 2163 of JavaCC.javacc
            RegexpSequence();
            // Code for expansion specified on line 2164 of JavaCC.javacc
            label_160:
            while (true) {
                int int125=nextTokenKind();
                if (!(int125==120)) {
                    break label_160;
                }
                // Code for expansion specified on line 2164 of JavaCC.javacc
                // Code for expansion specified on line 2164 of JavaCC.javacc
                consumeToken(120);
                // Code for RegexpSequence specified on line 2164 of JavaCC.javacc
                RegexpSequence();
            }
            if (trace_enabled) LOGGER.info("Exiting normally from RegexpChoice");
        }
        catch(ParseException e) {
            parseException126=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException126!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException126.getMessage());
                    clearNodeScope();
                }
                else {
                    RegexpChoice126.setEndLine(current_token.getEndLine());
                    RegexpChoice126.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(RegexpChoice126,nodeArity()>1);
                }
            }
        }
    }

    // JavaCC.javacc, line 2167
    final public void RegexpChoiceInParen() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 2167 of JavaCC.javacc");
        // Code for expansion specified on line 2170 of JavaCC.javacc
        boolean RegexpChoiceInParen127forced=false;
        RegexpChoice RegexpChoiceInParen127=null;
        if (buildTree) {
            RegexpChoiceInParen127=new RegexpChoice();
            Token start=getToken(1);
            RegexpChoiceInParen127.setBeginLine(start.beginLine);
            RegexpChoiceInParen127.setBeginColumn(start.beginColumn);
            RegexpChoiceInParen127.setInputSource(this.getInputSource());
            openNodeScope(RegexpChoiceInParen127);
            openNodeScopeHook(RegexpChoiceInParen127);
        }
        ParseException parseException127=null;
        try {
            // Code for expansion specified on line 2170 of JavaCC.javacc
            consumeToken(91);
            // Code for RegexpSequence specified on line 2170 of JavaCC.javacc
            RegexpSequence();
            // Code for expansion specified on line 2170 of JavaCC.javacc
            label_161:
            while (true) {
                int int126=nextTokenKind();
                if (!(int126==120)) {
                    break label_161;
                }
                // Code for expansion specified on line 2170 of JavaCC.javacc
                // Code for expansion specified on line 2170 of JavaCC.javacc
                consumeToken(120);
                // Code for RegexpSequence specified on line 2170 of JavaCC.javacc
                RegexpSequence();
            }
            // Code for expansion specified on line 2170 of JavaCC.javacc
            consumeToken(92);
            if (trace_enabled) LOGGER.info("Exiting normally from RegexpChoiceInParen");
        }
        catch(ParseException e) {
            parseException127=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException127!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException127.getMessage());
                    clearNodeScope();
                }
                else {
                    RegexpChoiceInParen127.setEndLine(current_token.getEndLine());
                    RegexpChoiceInParen127.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(RegexpChoiceInParen127,true);
                }
            }
        }
    }

    // JavaCC.javacc, line 2185
    final public void RegexpSequence() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 2185 of JavaCC.javacc");
        // Code for expansion specified on line 2188 of JavaCC.javacc
        boolean RegexpSequence128forced=false;
        RegexpSequence RegexpSequence128=null;
        if (buildTree) {
            RegexpSequence128=new RegexpSequence();
            Token start=getToken(1);
            RegexpSequence128.setBeginLine(start.beginLine);
            RegexpSequence128.setBeginColumn(start.beginColumn);
            RegexpSequence128.setInputSource(this.getInputSource());
            openNodeScope(RegexpSequence128);
            openNodeScopeHook(RegexpSequence128);
        }
        ParseException parseException128=null;
        try {
            // Code for expansion specified on line 2196 of JavaCC.javacc
            label_162:
            while (true) {
                // Code for expansion specified on line 2189 of JavaCC.javacc
                switch(nextTokenKind()) {
                    case STRING_LITERAL:
                    // Code for expansion specified on line 2189 of JavaCC.javacc
                    // Code for RegexpStringLiteral specified on line 2189 of JavaCC.javacc
                    RegexpStringLiteral();
                    break;
                    case 102:
                    // Code for expansion specified on line 2191 of JavaCC.javacc
                    // Code for RegexpRef specified on line 2191 of JavaCC.javacc
                    RegexpRef();
                    break;
                    case 95:
                    case 104:
                    // Code for expansion specified on line 2193 of JavaCC.javacc
                    // Code for CharacterList specified on line 2193 of JavaCC.javacc
                    CharacterList();
                    break;
                    case 91:
                    // Code for expansion specified on line 2195 of JavaCC.javacc
                    // Code for RepeatedRegexp specified on line 2195 of JavaCC.javacc
                    RepeatedRegexp();
                    break;
                    default:
                    consumeToken(-1);
                    throw new ParseException();
                }
                int int127=nextTokenKind();
                if (!(int127==STRING_LITERAL||int127==91||int127==95||int127==102||int127==104)) {
                    break label_162;
                }
            }
            if (trace_enabled) LOGGER.info("Exiting normally from RegexpSequence");
        }
        catch(ParseException e) {
            parseException128=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException128!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException128.getMessage());
                    clearNodeScope();
                }
                else {
                    RegexpSequence128.setEndLine(current_token.getEndLine());
                    RegexpSequence128.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(RegexpSequence128,nodeArity()>1);
                }
            }
        }
    }

    // JavaCC.javacc, line 2211
    final public void RepeatedRegexp() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 2211 of JavaCC.javacc");
        int r1=0,r2=-1;
        boolean hasMax=false;
        // Code for expansion specified on line 2217 of JavaCC.javacc
        // Code for RegexpChoiceInParen specified on line 2217 of JavaCC.javacc
        RegexpChoiceInParen();
        // Code for expansion specified on line 2229 of JavaCC.javacc
        int int130=nextTokenKind();
        if (int130==93||int130==105||int130==115||int130==117) {
            // Code for expansion specified on line 2218 of JavaCC.javacc
            switch(nextTokenKind()) {
                case 115:
                // Code for expansion specified on line 2218 of JavaCC.javacc
                // Code for expansion specified on line 2218 of JavaCC.javacc
                boolean RepeatedRegexp129forced=false;
                OneOrMoreRegexp RepeatedRegexp129=null;
                if (buildTree) {
                    RepeatedRegexp129=new OneOrMoreRegexp();
                    Token start=getToken(1);
                    RepeatedRegexp129.setBeginLine(start.beginLine);
                    RepeatedRegexp129.setBeginColumn(start.beginColumn);
                    RepeatedRegexp129.setInputSource(this.getInputSource());
                    openNodeScope(RepeatedRegexp129);
                    openNodeScopeHook(RepeatedRegexp129);
                }
                ParseException parseException129=null;
                try {
                    consumeToken(115);
                }
                catch(ParseException e) {
                    parseException129=e;
                    throw e;
                }
                finally {
                    if (buildTree) {
                        if (parseException129!=null) {
                            if (trace_enabled) LOGGER.warning("ParseException: "+parseException129.getMessage());
                            clearNodeScope();
                        }
                        else {
                            RepeatedRegexp129.setEndLine(current_token.getEndLine());
                            RepeatedRegexp129.setEndColumn(current_token.getEndColumn());
                            closeNodeScope(RepeatedRegexp129,2);
                        }
                    }
                }
                break;
                case 117:
                // Code for expansion specified on line 2219 of JavaCC.javacc
                // Code for expansion specified on line 2219 of JavaCC.javacc
                boolean RepeatedRegexp130forced=false;
                ZeroOrMoreRegexp RepeatedRegexp130=null;
                if (buildTree) {
                    RepeatedRegexp130=new ZeroOrMoreRegexp();
                    Token start=getToken(1);
                    RepeatedRegexp130.setBeginLine(start.beginLine);
                    RepeatedRegexp130.setBeginColumn(start.beginColumn);
                    RepeatedRegexp130.setInputSource(this.getInputSource());
                    openNodeScope(RepeatedRegexp130);
                    openNodeScopeHook(RepeatedRegexp130);
                }
                ParseException parseException130=null;
                try {
                    consumeToken(117);
                }
                catch(ParseException e) {
                    parseException130=e;
                    throw e;
                }
                finally {
                    if (buildTree) {
                        if (parseException130!=null) {
                            if (trace_enabled) LOGGER.warning("ParseException: "+parseException130.getMessage());
                            clearNodeScope();
                        }
                        else {
                            RepeatedRegexp130.setEndLine(current_token.getEndLine());
                            RepeatedRegexp130.setEndColumn(current_token.getEndColumn());
                            closeNodeScope(RepeatedRegexp130,2);
                        }
                    }
                }
                break;
                case 105:
                // Code for expansion specified on line 2220 of JavaCC.javacc
                // Code for expansion specified on line 2220 of JavaCC.javacc
                boolean RepeatedRegexp131forced=false;
                ZeroOrOneRegexp RepeatedRegexp131=null;
                if (buildTree) {
                    RepeatedRegexp131=new ZeroOrOneRegexp();
                    Token start=getToken(1);
                    RepeatedRegexp131.setBeginLine(start.beginLine);
                    RepeatedRegexp131.setBeginColumn(start.beginColumn);
                    RepeatedRegexp131.setInputSource(this.getInputSource());
                    openNodeScope(RepeatedRegexp131);
                    openNodeScopeHook(RepeatedRegexp131);
                }
                ParseException parseException131=null;
                try {
                    consumeToken(105);
                }
                catch(ParseException e) {
                    parseException131=e;
                    throw e;
                }
                finally {
                    if (buildTree) {
                        if (parseException131!=null) {
                            if (trace_enabled) LOGGER.warning("ParseException: "+parseException131.getMessage());
                            clearNodeScope();
                        }
                        else {
                            RepeatedRegexp131.setEndLine(current_token.getEndLine());
                            RepeatedRegexp131.setEndColumn(current_token.getEndColumn());
                            closeNodeScope(RepeatedRegexp131,2);
                        }
                    }
                }
                break;
                case 93:
                // Code for expansion specified on line 2221 of JavaCC.javacc
                // Code for expansion specified on line 2221 of JavaCC.javacc
                consumeToken(93);
                // Code for IntegerLiteral specified on line 2221 of JavaCC.javacc
                r1=IntegerLiteral();
                // Code for expansion specified on line 2222 of JavaCC.javacc
                int int129=nextTokenKind();
                if (int129==98) {
                    // Code for expansion specified on line 2222 of JavaCC.javacc
                    // Code for expansion specified on line 2222 of JavaCC.javacc
                    consumeToken(98);
                    // Code for expansion specified on line 2222 of JavaCC.javacc
                    hasMax=true;
                    // Code for expansion specified on line 2222 of JavaCC.javacc
                    int int128=nextTokenKind();
                    if (int128==INTEGER_LITERAL) {
                        // Code for expansion specified on line 2222 of JavaCC.javacc
                        // Code for IntegerLiteral specified on line 2222 of JavaCC.javacc
                        r2=IntegerLiteral();
                    }
                }
                // Code for expansion specified on line 2223 of JavaCC.javacc
                boolean RepeatedRegexp132forced=false;
                RepetitionRange RepeatedRegexp132=null;
                if (buildTree) {
                    RepeatedRegexp132=new RepetitionRange();
                    Token start=getToken(1);
                    RepeatedRegexp132.setBeginLine(start.beginLine);
                    RepeatedRegexp132.setBeginColumn(start.beginColumn);
                    RepeatedRegexp132.setInputSource(this.getInputSource());
                    openNodeScope(RepeatedRegexp132);
                    openNodeScopeHook(RepeatedRegexp132);
                }
                ParseException parseException132=null;
                try {
                    consumeToken(94);
                }
                catch(ParseException e) {
                    parseException132=e;
                    throw e;
                }
                finally {
                    if (buildTree) {
                        if (parseException132!=null) {
                            if (trace_enabled) LOGGER.warning("ParseException: "+parseException132.getMessage());
                            clearNodeScope();
                        }
                        else {
                            RepeatedRegexp132.setEndLine(current_token.getEndLine());
                            RepeatedRegexp132.setEndColumn(current_token.getEndColumn());
                            closeNodeScope(RepeatedRegexp132,4+(hasMax?1:
                            0)+(r2!=-1?1:
                            0));
                        }
                    }
                }
                // Code for expansion specified on line 2224 of JavaCC.javacc
                RepetitionRange range=(RepetitionRange) peekNode();
                range.setMin(r1);
                range.setMax(r2);
                break;
                default:
                consumeToken(-1);
                throw new ParseException();
            }
        }
        if (trace_enabled) LOGGER.info("Exiting normally from RepeatedRegexp");
    }

    // JavaCC.javacc, line 2232
    final public int IntegerLiteral() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 2232 of JavaCC.javacc");
        // Code for expansion specified on line 2235 of JavaCC.javacc
        boolean IntegerLiteral133forced=false;
        IntegerLiteral IntegerLiteral133=null;
        if (buildTree) {
            IntegerLiteral133=new IntegerLiteral();
            Token start=getToken(1);
            IntegerLiteral133.setBeginLine(start.beginLine);
            IntegerLiteral133.setBeginColumn(start.beginColumn);
            IntegerLiteral133.setInputSource(this.getInputSource());
            openNodeScope(IntegerLiteral133);
            openNodeScopeHook(IntegerLiteral133);
        }
        ParseException parseException133=null;
        try {
            // Code for expansion specified on line 2235 of JavaCC.javacc
            consumeToken(INTEGER_LITERAL);
            // Code for expansion specified on line 2236 of JavaCC.javacc
            try {
                return Integer.parseInt(current_token.toString());
            }
            catch(NumberFormatException e) {
                throw new Error();
            }
        }
        catch(ParseException e) {
            parseException133=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException133!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException133.getMessage());
                    clearNodeScope();
                }
                else {
                    IntegerLiteral133.setEndLine(current_token.getEndLine());
                    IntegerLiteral133.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(IntegerLiteral133,nodeArity()>1);
                }
            }
        }
    }

    // JavaCC.javacc, line 2341
    final public CharacterList CharacterList() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 2341 of JavaCC.javacc");
        // Code for expansion specified on line 2344 of JavaCC.javacc
        boolean CharacterList134forced=false;
        CharacterList CharacterList134=null;
        if (buildTree) {
            CharacterList134=new CharacterList();
            Token start=getToken(1);
            CharacterList134.setBeginLine(start.beginLine);
            CharacterList134.setBeginColumn(start.beginColumn);
            CharacterList134.setInputSource(this.getInputSource());
            openNodeScope(CharacterList134);
            openNodeScopeHook(CharacterList134);
        }
        ParseException parseException134=null;
        try {
            // Code for expansion specified on line 2344 of JavaCC.javacc
            int int131=nextTokenKind();
            if (int131==104) {
                // Code for expansion specified on line 2344 of JavaCC.javacc
                // Code for expansion specified on line 2344 of JavaCC.javacc
                consumeToken(104);
            }
            // Code for expansion specified on line 2345 of JavaCC.javacc
            consumeToken(95);
            // Code for expansion specified on line 2345 of JavaCC.javacc
            int int133=nextTokenKind();
            if (int133==STRING_LITERAL) {
                // Code for expansion specified on line 2345 of JavaCC.javacc
                // Code for CharacterRange specified on line 2345 of JavaCC.javacc
                CharacterRange();
                // Code for expansion specified on line 2346 of JavaCC.javacc
                label_168:
                while (true) {
                    int int132=nextTokenKind();
                    if (!(int132==98)) {
                        break label_168;
                    }
                    // Code for expansion specified on line 2346 of JavaCC.javacc
                    // Code for expansion specified on line 2346 of JavaCC.javacc
                    consumeToken(98);
                    // Code for CharacterRange specified on line 2346 of JavaCC.javacc
                    CharacterRange();
                }
            }
            // Code for expansion specified on line 2348 of JavaCC.javacc
            consumeToken(96);
            // Code for expansion specified on line 2349 of JavaCC.javacc
            return CharacterList134;
        }
        catch(ParseException e) {
            parseException134=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException134!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException134.getMessage());
                    clearNodeScope();
                }
                else {
                    CharacterList134.setEndLine(current_token.getEndLine());
                    CharacterList134.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(CharacterList134,nodeArity()>1);
                }
            }
        }
    }

    // JavaCC.javacc, line 2378
    final public CharacterRange CharacterRange() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 2378 of JavaCC.javacc");
        Token imageL,imageR;
        // Code for expansion specified on line 2383 of JavaCC.javacc
        boolean CharacterRange135forced=false;
        CharacterRange CharacterRange135=null;
        if (buildTree) {
            CharacterRange135=new CharacterRange();
            Token start=getToken(1);
            CharacterRange135.setBeginLine(start.beginLine);
            CharacterRange135.setBeginColumn(start.beginColumn);
            CharacterRange135.setInputSource(this.getInputSource());
            openNodeScope(CharacterRange135);
            openNodeScopeHook(CharacterRange135);
        }
        ParseException parseException135=null;
        try {
            // Code for expansion specified on line 2383 of JavaCC.javacc
            imageL=consumeToken(STRING_LITERAL);
            // Code for expansion specified on line 2384 of JavaCC.javacc
            String lString=removeEscapesAndQuotes(imageL);
            CharacterRange135.left=character_descriptor_assign(current_token,lString);
            CharacterRange135.right=CharacterRange135.left;
            // Code for expansion specified on line 2389 of JavaCC.javacc
            int int134=nextTokenKind();
            if (int134==116) {
                // Code for expansion specified on line 2390 of JavaCC.javacc
                // Code for expansion specified on line 2390 of JavaCC.javacc
                consumeToken(116);
                // Code for expansion specified on line 2391 of JavaCC.javacc
                imageR=consumeToken(STRING_LITERAL);
                // Code for expansion specified on line 2392 of JavaCC.javacc
                String rString=removeEscapesAndQuotes(imageR);
                CharacterRange135.right=character_descriptor_assign(current_token,rString,lString);
            }
            // Code for expansion specified on line 2398 of JavaCC.javacc
            return CharacterRange135;
        }
        catch(ParseException e) {
            parseException135=e;
            throw e;
        }
        finally {
            if (buildTree) {
                if (parseException135!=null) {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException135.getMessage());
                    clearNodeScope();
                }
                else {
                    CharacterRange135.setEndLine(current_token.getEndLine());
                    CharacterRange135.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(CharacterRange135,true);
                }
            }
        }
    }

    //====================================
    // Start of methods for Phase 2 Lookaheads
    //====================================
    private boolean phase2_1(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_1();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_2(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_2();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_3(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_3();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_4(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_4();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_5(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_5();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_6(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_6();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_7(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_7();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_8(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_8();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_9(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_9();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_10(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_10();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_11(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_11();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_12(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_12();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_13(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_13();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_14(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_14();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_15(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_15();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_16(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_16();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_17(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_17();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_18(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_18();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_19(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_19();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_20(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_20();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_21(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_21();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_22(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_22();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_23(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_23();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_24(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_24();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_25(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_25();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_26(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_26();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_27(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_27();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_28(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_28();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_29(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_29();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_30(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_30();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_31(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_31();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_32(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_32();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_33(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_33();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_34(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_34();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_35(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_35();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_36(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_36();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_37(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_37();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_38(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_38();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_39(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_39();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_40(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_40();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_41(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_41();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_42(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_42();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_43(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_43();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_44(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_44();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_45(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_45();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_46(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_46();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_47(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_47();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_48(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_48();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_49(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_49();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_50(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_50();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_51(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_51();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_52(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_52();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_53(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_53();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_54(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_54();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_55(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_55();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_56(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_56();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_57(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_57();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_58(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_58();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_59(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_59();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_60(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_60();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_61(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_61();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_62(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_62();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_63(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_63();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_64(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_64();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_65(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_65();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_66(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_66();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_67(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_67();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_68(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_68();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_69(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_69();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_70(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_70();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_71(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_71();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_72(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_72();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    //====================================
    // Start of methods for Phase 3 Lookaheads
    //====================================
    private boolean phase3_1() {
        while (true) {
            Token token135=jj_scanpos;
            if (phase3R_170()) {
                jj_scanpos=token135;
                break;
            }
        }
        if (jj_scan_token(57)) return true;
        return false;
    }

    private boolean phase3_2() {
        Token token136=jj_scanpos;
        if (jj_scan_token(60)) {
            jj_scanpos=token136;
            if (jj_scan_token(63)) {
                jj_scanpos=token136;
                if (jj_scan_token(59)) {
                    jj_scanpos=token136;
                    if (jj_scan_token(58)) {
                        jj_scanpos=token136;
                        if (jj_scan_token(42)) {
                            jj_scanpos=token136;
                            if (jj_scan_token(24)) {
                                jj_scanpos=token136;
                                if (jj_scan_token(67)) {
                                    jj_scanpos=token136;
                                    if (jj_scan_token(54)) {
                                        jj_scanpos=token136;
                                        if (jj_scan_token(71)) {
                                            jj_scanpos=token136;
                                            if (jj_scan_token(75)) {
                                                jj_scanpos=token136;
                                                if (jj_scan_token(64)) {
                                                    jj_scanpos=token136;
                                                    if (phase3R_329()) return true;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean phase3_3() {
        Token token137=jj_scanpos;
        if (jj_scan_token(60)) {
            jj_scanpos=token137;
            if (jj_scan_token(63)) {
                jj_scanpos=token137;
                if (jj_scan_token(59)) {
                    jj_scanpos=token137;
                    if (jj_scan_token(58)) {
                        jj_scanpos=token137;
                        if (jj_scan_token(42)) {
                            jj_scanpos=token137;
                            if (jj_scan_token(24)) {
                                jj_scanpos=token137;
                                if (jj_scan_token(67)) {
                                    jj_scanpos=token137;
                                    if (jj_scan_token(54)) {
                                        jj_scanpos=token137;
                                        if (jj_scan_token(71)) {
                                            jj_scanpos=token137;
                                            if (jj_scan_token(75)) {
                                                jj_scanpos=token137;
                                                if (jj_scan_token(64)) {
                                                    jj_scanpos=token137;
                                                    if (jj_scan_token(35)) {
                                                        jj_scanpos=token137;
                                                        if (phase3R_742()) return true;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean phase3_4() {
        if (jj_scan_token(98)) return true;
        if (phase3R_805()) return true;
        return false;
    }

    private boolean phase3_5() {
        Token token138=jj_scanpos;
        if (phase3R_174()) jj_scanpos=token138;
        if (jj_scan_token(IDENTIFIER)) return true;
        if (jj_scan_token(91)) return true;
        return false;
    }

    private boolean phase3_6() {
        if (phase3R_887()) return true;
        if (jj_scan_token(IDENTIFIER)) return true;
        while (true) {
            Token token139=jj_scanpos;
            if (phase3R_176()) {
                jj_scanpos=token139;
                break;
            }
        }
        Token token140=jj_scanpos;
        if (jj_scan_token(98)) {
            jj_scanpos=token140;
            if (jj_scan_token(100)) {
                jj_scanpos=token140;
                if (jj_scan_token(97)) return true;
            }
        }
        return false;
    }

    private boolean phase3_7() {
        if (phase3R_712()) return true;
        return false;
    }

    private boolean phase3_8() {
        if (jj_scan_token(98)) return true;
        if (phase3R_669()) return true;
        return false;
    }

    private boolean phase3_9() {
        if (phase3R_772()) return true;
        return false;
    }

    private boolean phase3_10() {
        if (phase3R_879()) return true;
        if (jj_scan_token(99)) return true;
        return false;
    }

    private boolean phase3_11() {
        if (jj_scan_token(68)) return true;
        if (phase3R_828()) return true;
        if (jj_scan_token(97)) return true;
        return false;
    }

    private boolean phase3_12() {
        if (phase3R_704()) return true;
        return false;
    }

    private boolean phase3_13() {
        if (jj_scan_token(95)) return true;
        if (jj_scan_token(96)) return true;
        return false;
    }

    private boolean phase3_14() {
        if (phase3R_672()) return true;
        return false;
    }

    private boolean phase3_15() {
        if (phase3R_672()) return true;
        return false;
    }

    private boolean phase3_16() {
        if (jj_scan_token(99)) return true;
        if (jj_scan_token(IDENTIFIER)) return true;
        Token token141=jj_scanpos;
        if (phase3_15()) jj_scanpos=token141;
        return false;
    }

    private boolean phase3_17() {
        if (phase3R_671()) return true;
        return false;
    }

    private boolean phase3_18() {
        if (jj_scan_token(95)) return true;
        if (jj_scan_token(96)) return true;
        return false;
    }

    private boolean phase3_19() {
        if (jj_scan_token(99)) return true;
        if (jj_scan_token(IDENTIFIER)) return true;
        return false;
    }

    private boolean phase3_20() {
        if (phase3R_584()) return true;
        if (phase3R_670()) return true;
        return false;
    }

    private boolean phase3_21() {
        if (jj_scan_token(105)) return true;
        return false;
    }

    private boolean phase3_22() {
        if (jj_scan_token(111)) return true;
        return false;
    }

    private boolean phase3_23() {
        if (jj_scan_token(112)) return true;
        return false;
    }

    private boolean phase3_24() {
        if (jj_scan_token(120)) return true;
        return false;
    }

    private boolean phase3_25() {
        if (jj_scan_token(121)) return true;
        return false;
    }

    private boolean phase3_26() {
        if (jj_scan_token(119)) return true;
        return false;
    }

    private boolean phase3_27() {
        Token token142=jj_scanpos;
        if (jj_scan_token(123)) {
            jj_scanpos=token142;
            if (phase3R_799()) return true;
        }
        if (phase3R_800()) return true;
        return false;
    }

    private boolean phase3_28() {
        if (phase3R_869()) return true;
        return false;
    }

    private boolean phase3_29() {
        if (phase3R_191()) return true;
        return false;
    }

    private boolean phase3_30() {
        if (jj_scan_token(91)) return true;
        if (phase3R_548()) return true;
        if (jj_scan_token(92)) return true;
        return false;
    }

    private boolean phase3_31() {
        if (jj_scan_token(91)) return true;
        if (phase3R_887()) return true;
        if (jj_scan_token(95)) return true;
        return false;
    }

    private boolean phase3_32() {
        if (jj_scan_token(91)) return true;
        if (phase3R_548()) return true;
        if (jj_scan_token(92)) return true;
        return false;
    }

    private boolean phase3_33() {
        if (phase3R_363()) return true;
        return false;
    }

    private boolean phase3_34() {
        if (jj_scan_token(65)) return true;
        if (jj_scan_token(99)) return true;
        if (jj_scan_token(IDENTIFIER)) return true;
        return false;
    }

    private boolean phase3_35() {
        if (phase3R_548()) return true;
        if (jj_scan_token(99)) return true;
        if (jj_scan_token(32)) return true;
        return false;
    }

    private boolean phase3_36() {
        if (phase3R_755()) return true;
        if (jj_scan_token(99)) return true;
        if (jj_scan_token(32)) return true;
        return false;
    }

    private boolean phase3_37() {
        if (phase3R_442()) return true;
        return false;
    }

    private boolean phase3_38() {
        if (jj_scan_token(99)) return true;
        Token token143=jj_scanpos;
        if (jj_scan_token(68)) {
            jj_scanpos=token143;
            if (jj_scan_token(65)) return true;
        }
        return false;
    }

    private boolean phase3_39() {
        if (jj_scan_token(99)) return true;
        if (phase3R_494()) return true;
        return false;
    }

    private boolean phase3_40() {
        if (phase3R_495()) return true;
        return false;
    }

    private boolean phase3_41() {
        if (jj_scan_token(55)) return true;
        if (phase3R_548()) return true;
        if (phase3R_602()) return true;
        return false;
    }

    private boolean phase3_42() {
        if (jj_scan_token(95)) return true;
        if (phase3R_670()) return true;
        if (jj_scan_token(96)) return true;
        return false;
    }

    private boolean phase3_43() {
        if (jj_scan_token(95)) return true;
        if (jj_scan_token(96)) return true;
        return false;
    }

    private boolean phase3_44() {
        if (phase3_42()) return true;
        while (true) {
            Token token144=jj_scanpos;
            if (phase3_42()) {
                jj_scanpos=token144;
                break;
            }
        }
        while (true) {
            Token token145=jj_scanpos;
            if (phase3_43()) {
                jj_scanpos=token145;
                break;
            }
        }
        return false;
    }

    private boolean phase3_45() {
        if (phase3R_330()) return true;
        return false;
    }

    private boolean phase3_46() {
        if (jj_scan_token(73)) return true;
        if (jj_scan_token(93)) return true;
        return false;
    }

    private boolean phase3_47() {
        if (jj_scan_token(73)) return true;
        if (jj_scan_token(91)) return true;
        return false;
    }

    private boolean phase3_48() {
        if (phase3R_821()) return true;
        if (phase3R_887()) return true;
        if (jj_scan_token(IDENTIFIER)) return true;
        return false;
    }

    private boolean phase3_49() {
        if (phase3R_580()) return true;
        return false;
    }

    private boolean phase3_50() {
        if (phase3R_821()) return true;
        if (jj_scan_token(32)) return true;
        return false;
    }

    private boolean phase3_51() {
        if (phase3R_821()) return true;
        if (phase3R_887()) return true;
        if (jj_scan_token(IDENTIFIER)) return true;
        if (jj_scan_token(106)) return true;
        return false;
    }

    private boolean phase3_52() {
        if (phase3R_821()) return true;
        if (phase3R_887()) return true;
        if (jj_scan_token(IDENTIFIER)) return true;
        return false;
    }

    private boolean phase3_53() {
        if (phase3R_634()) return true;
        return false;
    }

    private boolean phase3_54() {
        if (phase3R_634()) return true;
        return false;
    }

    private boolean phase3_55() {
        if (jj_scan_token(138)) return true;
        if (phase3R_811()) return true;
        if (jj_scan_token(91)) return true;
        Token token146=jj_scanpos;
        if (phase3R_215()) {
            jj_scanpos=token146;
            if (jj_scan_token(92)) return true;
        }
        return false;
    }

    private boolean phase3_56() {
        if (jj_scan_token(138)) return true;
        if (phase3R_811()) return true;
        if (jj_scan_token(91)) return true;
        return false;
    }

    private boolean phase3_57() {
        if (jj_scan_token(98)) return true;
        if (phase3R_863()) return true;
        return false;
    }

    private boolean phase3_58() {
        if (jj_scan_token(93)) return true;
        if (jj_scan_token(94)) return true;
        return false;
    }

    private boolean phase3_59() {
        if (phase3R_887()) return true;
        if (jj_scan_token(IDENTIFIER)) return true;
        if (jj_scan_token(91)) return true;
        return false;
    }

    private boolean phase3_60() {
        if (phase3R_393()) return true;
        if (jj_scan_token(135)) return true;
        return false;
    }

    private boolean phase3_61() {
        if (phase3R_394()) return true;
        if (jj_scan_token(135)) return true;
        return false;
    }

    private boolean phase3_62() {
        if (jj_scan_token(_INJECT)) return true;
        if (jj_scan_token(LPAREN)) return true;
        return false;
    }

    private boolean phase3_63() {
        if (jj_scan_token(LPAREN)) return true;
        return false;
    }

    private boolean phase3_64() {
        if (jj_scan_token(102)) return true;
        if (jj_scan_token(117)) return true;
        return false;
    }

    private boolean phase3_65() {
        if (jj_scan_token(4)) return true;
        return false;
    }

    private boolean phase3_66() {
        if (phase3R_879()) return true;
        if (jj_scan_token(100)) return true;
        return false;
    }

    private boolean phase3_67() {
        Token token147=jj_scanpos;
        if (phase3R_222()) jj_scanpos=token147;
        Token token148=jj_scanpos;
        if (jj_scan_token(90)) {
            jj_scanpos=token148;
            if (jj_scan_token(102)) return true;
        }
        return false;
    }

    private boolean phase3_68() {
        Token token149=jj_scanpos;
        if (phase3R_223()) jj_scanpos=token149;
        if (jj_scan_token(IDENTIFIER)) return true;
        return false;
    }

    private boolean phase3_69() {
        if (phase3R_879()) return true;
        if (jj_scan_token(100)) return true;
        return false;
    }

    private boolean phase3_70() {
        if (jj_scan_token(91)) return true;
        return false;
    }

    private boolean phase3_71() {
        if (phase3R_225()) return true;
        return false;
    }

    private boolean phase3_72() {
        if (phase3R_557()) return true;
        return false;
    }

    private boolean phase3R_170() {
        if (phase3R_764()) return true;
        return false;
    }

    private boolean phase3R_329() {
        if (phase3R_764()) return true;
        return false;
    }

    private boolean phase3R_742() {
        if (phase3R_764()) return true;
        return false;
    }

    private boolean phase3R_805() {
        if (phase3R_821()) return true;
        if (jj_scan_token(IDENTIFIER)) return true;
        Token token150=jj_scanpos;
        if (phase3R_803()) jj_scanpos=token150;
        Token token151=jj_scanpos;
        if (phase3R_804()) jj_scanpos=token151;
        return false;
    }

    private boolean phase3R_174() {
        if (phase3R_775()) return true;
        return false;
    }

    private boolean phase3R_887() {
        Token token152=jj_scanpos;
        if (phase3_12()) {
            jj_scanpos=token152;
            if (phase3R_232()) return true;
        }
        return false;
    }

    private boolean phase3R_176() {
        if (jj_scan_token(95)) return true;
        if (jj_scan_token(96)) return true;
        return false;
    }

    private boolean phase3R_712() {
        Token token153=jj_scanpos;
        if (jj_scan_token(63)) jj_scanpos=token153;
        if (phase3R_779()) return true;
        return false;
    }

    private boolean phase3R_669() {
        Token token154=jj_scanpos;
        if (phase3R_491()) {
            jj_scanpos=token154;
            if (phase3R_492()) return true;
        }
        return false;
    }

    private boolean phase3R_772() {
        Token token155=jj_scanpos;
        if (phase3R_236()) {
            jj_scanpos=token155;
            if (phase3R_237()) return true;
        }
        return false;
    }

    private boolean phase3R_879() {
        if (phase3R_284()) return true;
        while (true) {
            Token token156=jj_scanpos;
            if (phase3_33()) {
                jj_scanpos=token156;
                break;
            }
        }
        return false;
    }

    private boolean phase3R_828() {
        if (jj_scan_token(91)) return true;
        Token token157=jj_scanpos;
        if (phase3R_239()) jj_scanpos=token157;
        if (jj_scan_token(92)) return true;
        return false;
    }

    private boolean phase3R_704() {
        Token token158=jj_scanpos;
        if (phase3R_373()) {
            jj_scanpos=token158;
            if (phase3R_374()) return true;
        }
        return false;
    }

    private boolean phase3R_672() {
        if (jj_scan_token(102)) return true;
        if (phase3R_652()) return true;
        while (true) {
            Token token159=jj_scanpos;
            if (phase3R_613()) {
                jj_scanpos=token159;
                break;
            }
        }
        if (jj_scan_token(101)) return true;
        return false;
    }

    private boolean phase3R_671() {
        if (jj_scan_token(102)) return true;
        if (jj_scan_token(101)) return true;
        return false;
    }

    private boolean phase3R_584() {
        Token token160=jj_scanpos;
        if (jj_scan_token(100)) {
            jj_scanpos=token160;
            if (jj_scan_token(126)) {
                jj_scanpos=token160;
                if (jj_scan_token(127)) {
                    jj_scanpos=token160;
                    if (jj_scan_token(131)) {
                        jj_scanpos=token160;
                        if (jj_scan_token(124)) {
                            jj_scanpos=token160;
                            if (jj_scan_token(125)) {
                                jj_scanpos=token160;
                                if (jj_scan_token(132)) {
                                    jj_scanpos=token160;
                                    if (jj_scan_token(133)) {
                                        jj_scanpos=token160;
                                        if (jj_scan_token(134)) {
                                            jj_scanpos=token160;
                                            if (jj_scan_token(128)) {
                                                jj_scanpos=token160;
                                                if (jj_scan_token(130)) {
                                                    jj_scanpos=token160;
                                                    if (jj_scan_token(129)) return true;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean phase3R_670() {
        if (phase3R_467()) return true;
        return false;
    }

    private boolean phase3R_799() {
        if (phase3R_820()) return true;
        return false;
    }

    private boolean phase3R_800() {
        if (phase3R_819()) return true;
        while (true) {
            Token token161=jj_scanpos;
            if (phase3R_798()) {
                jj_scanpos=token161;
                break;
            }
        }
        return false;
    }

    private boolean phase3R_869() {
        if (phase3R_246()) return true;
        if (jj_scan_token(135)) return true;
        if (phase3R_247()) return true;
        return false;
    }

    private boolean phase3R_191() {
        Token token162=jj_scanpos;
        if (phase3_30()) {
            jj_scanpos=token162;
            if (phase3R_248()) {
                jj_scanpos=token162;
                if (phase3R_249()) return true;
            }
        }
        return false;
    }

    private boolean phase3R_548() {
        Token token163=jj_scanpos;
        if (jj_scan_token(26)) {
            jj_scanpos=token163;
            if (jj_scan_token(31)) {
                jj_scanpos=token163;
                if (jj_scan_token(28)) {
                    jj_scanpos=token163;
                    if (jj_scan_token(62)) {
                        jj_scanpos=token163;
                        if (jj_scan_token(51)) {
                            jj_scanpos=token163;
                            if (jj_scan_token(53)) {
                                jj_scanpos=token163;
                                if (jj_scan_token(44)) {
                                    jj_scanpos=token163;
                                    if (jj_scan_token(37)) return true;
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean phase3R_363() {
        Token token164=jj_scanpos;
        if (phase3_38()) {
            jj_scanpos=token164;
            if (phase3_39()) {
                jj_scanpos=token164;
                if (phase3_40()) {
                    jj_scanpos=token164;
                    if (phase3R_444()) {
                        jj_scanpos=token164;
                        if (phase3R_445()) {
                            jj_scanpos=token164;
                            if (phase3R_446()) {
                                jj_scanpos=token164;
                                if (phase3R_447()) return true;
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean phase3R_755() {
        Token token165=jj_scanpos;
        if (jj_scan_token(74)) {
            jj_scanpos=token165;
            if (phase3R_254()) return true;
        }
        return false;
    }

    private boolean phase3R_442() {
        Token token166=jj_scanpos;
        if (phase3R_255()) {
            jj_scanpos=token166;
            if (jj_scan_token(65)) return true;
        }
        if (jj_scan_token(136)) return true;
        Token token167=jj_scanpos;
        if (jj_scan_token(141)) {
            jj_scanpos=token167;
            if (jj_scan_token(55)) return true;
        }
        return false;
    }

    private boolean phase3R_494() {
        Token token168=jj_scanpos;
        if (phase3_41()) {
            jj_scanpos=token168;
            if (phase3R_493()) return true;
        }
        return false;
    }

    private boolean phase3R_495() {
        if (jj_scan_token(99)) return true;
        if (phase3R_672()) return true;
        if (jj_scan_token(IDENTIFIER)) return true;
        return false;
    }

    private boolean phase3R_330() {
        if (jj_scan_token(IDENTIFIER)) return true;
        if (jj_scan_token(106)) return true;
        if (phase3R_580()) return true;
        return false;
    }

    private boolean phase3R_821() {
        while (true) {
            Token token169=jj_scanpos;
            if (phase3_2()) {
                jj_scanpos=token169;
                break;
            }
        }
        return false;
    }

    private boolean phase3R_580() {
        Token token170=jj_scanpos;
        if (phase3_45()) {
            jj_scanpos=token170;
            if (phase3R_258()) {
                jj_scanpos=token170;
                if (phase3R_259()) {
                    jj_scanpos=token170;
                    if (jj_scan_token(97)) {
                        jj_scanpos=token170;
                        if (phase3R_260()) {
                            jj_scanpos=token170;
                            if (phase3R_261()) {
                                jj_scanpos=token170;
                                if (phase3R_262()) {
                                    jj_scanpos=token170;
                                    if (phase3R_263()) {
                                        jj_scanpos=token170;
                                        if (phase3R_264()) {
                                            jj_scanpos=token170;
                                            if (phase3R_265()) {
                                                jj_scanpos=token170;
                                                if (phase3R_266()) {
                                                    jj_scanpos=token170;
                                                    if (phase3R_267()) {
                                                        jj_scanpos=token170;
                                                        if (phase3R_268()) {
                                                            jj_scanpos=token170;
                                                            if (phase3R_269()) {
                                                                jj_scanpos=token170;
                                                                if (phase3R_270()) {
                                                                    jj_scanpos=token170;
                                                                    if (phase3R_271()) {
                                                                        jj_scanpos=token170;
                                                                        if (phase3R_272()) return true;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean phase3R_634() {
        if (phase3R_821()) return true;
        if (phase3R_887()) return true;
        if (phase3R_774()) return true;
        while (true) {
            Token token171=jj_scanpos;
            if (phase3R_276()) {
                jj_scanpos=token171;
                break;
            }
        }
        return false;
    }

    private boolean phase3R_811() {
        if (jj_scan_token(IDENTIFIER)) return true;
        while (true) {
            Token token172=jj_scanpos;
            if (phase3_19()) {
                jj_scanpos=token172;
                break;
            }
        }
        return false;
    }

    private boolean phase3R_215() {
        if (jj_scan_token(IDENTIFIER)) return true;
        if (jj_scan_token(100)) return true;
        return false;
    }

    private boolean phase3R_863() {
        Token token173=jj_scanpos;
        if (phase3R_503()) {
            jj_scanpos=token173;
            if (phase3R_504()) {
                jj_scanpos=token173;
                if (phase3R_505()) return true;
            }
        }
        return false;
    }

    private boolean phase3R_393() {
        Token token174=jj_scanpos;
        if (jj_scan_token(141)) {
            jj_scanpos=token174;
            if (phase3R_280()) return true;
        }
        return false;
    }

    private boolean phase3R_394() {
        if (jj_scan_token(91)) return true;
        if (phase3R_887()) return true;
        if (phase3R_809()) return true;
        while (true) {
            Token token175=jj_scanpos;
            if (phase3R_283()) {
                jj_scanpos=token175;
                break;
            }
        }
        if (jj_scan_token(92)) return true;
        return false;
    }

    private boolean phase3R_222() {
        if (phase3R_879()) return true;
        if (jj_scan_token(100)) return true;
        return false;
    }

    private boolean phase3R_223() {
        if (phase3R_879()) return true;
        if (jj_scan_token(100)) return true;
        return false;
    }

    private boolean phase3R_225() {
        if (jj_scan_token(LT)) return true;
        Token token176=jj_scanpos;
        if (phase3R_287()) jj_scanpos=token176;
        if (phase3R_288()) return true;
        if (jj_scan_token(GT)) return true;
        return false;
    }

    private boolean phase3R_557() {
        if (jj_scan_token(102)) return true;
        if (jj_scan_token(IDENTIFIER)) return true;
        return false;
    }

    private boolean phase3R_764() {
        Token token177=jj_scanpos;
        if (phase3R_289()) {
            jj_scanpos=token177;
            if (phase3R_290()) {
                jj_scanpos=token177;
                if (phase3R_291()) return true;
            }
        }
        return false;
    }

    private boolean phase3R_775() {
        if (jj_scan_token(102)) return true;
        if (phase3R_372()) return true;
        while (true) {
            Token token178=jj_scanpos;
            if (phase3R_293()) {
                jj_scanpos=token178;
                break;
            }
        }
        if (jj_scan_token(101)) return true;
        return false;
    }

    private boolean phase3R_232() {
        if (phase3R_548()) return true;
        return false;
    }

    private boolean phase3R_779() {
        if (jj_scan_token(93)) return true;
        while (true) {
            Token token179=jj_scanpos;
            if (phase3R_404()) {
                jj_scanpos=token179;
                break;
            }
        }
        if (jj_scan_token(94)) return true;
        return false;
    }

    private boolean phase3R_491() {
        if (phase3R_641()) return true;
        return false;
    }

    private boolean phase3R_492() {
        if (phase3R_670()) return true;
        return false;
    }

    private boolean phase3R_236() {
        if (jj_scan_token(68)) return true;
        if (phase3R_828()) return true;
        if (jj_scan_token(97)) return true;
        return false;
    }

    private boolean phase3R_237() {
        Token token180=jj_scanpos;
        if (phase3_10()) jj_scanpos=token180;
        if (jj_scan_token(65)) return true;
        if (phase3R_828()) return true;
        if (jj_scan_token(97)) return true;
        return false;
    }

    private boolean phase3R_284() {
        Token token181=jj_scanpos;
        if (phase3R_356()) {
            jj_scanpos=token181;
            if (jj_scan_token(68)) {
                jj_scanpos=token181;
                if (phase3_34()) {
                    jj_scanpos=token181;
                    if (phase3R_357()) {
                        jj_scanpos=token181;
                        if (phase3R_358()) {
                            jj_scanpos=token181;
                            if (phase3R_359()) {
                                jj_scanpos=token181;
                                if (phase3R_360()) {
                                    jj_scanpos=token181;
                                    if (phase3R_361()) {
                                        jj_scanpos=token181;
                                        if (phase3R_362()) return true;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean phase3R_239() {
        if (phase3R_670()) return true;
        while (true) {
            Token token182=jj_scanpos;
            if (phase3R_309()) {
                jj_scanpos=token182;
                break;
            }
        }
        return false;
    }

    private boolean phase3R_373() {
        if (phase3R_455()) return true;
        return false;
    }

    private boolean phase3R_374() {
        if (phase3R_701()) return true;
        while (true) {
            Token token183=jj_scanpos;
            if (phase3_13()) {
                jj_scanpos=token183;
                break;
            }
        }
        return false;
    }

    private boolean phase3R_652() {
        Token token184=jj_scanpos;
        if (phase3R_650()) {
            jj_scanpos=token184;
            if (phase3R_651()) return true;
        }
        return false;
    }

    private boolean phase3R_467() {
        if (phase3R_564()) return true;
        Token token185=jj_scanpos;
        if (phase3_20()) jj_scanpos=token185;
        return false;
    }

    private boolean phase3R_820() {
        if (jj_scan_token(101)) return true;
        if (jj_scan_token(101)) return true;
        Token token186=jj_scanpos;
        if (jj_scan_token(101)) jj_scanpos=token186;
        return false;
    }

    private boolean phase3R_819() {
        if (phase3R_883()) return true;
        while (true) {
            Token token187=jj_scanpos;
            if (phase3R_818()) {
                jj_scanpos=token187;
                break;
            }
        }
        return false;
    }

    private boolean phase3R_246() {
        Token token188=jj_scanpos;
        if (phase3R_316()) {
            jj_scanpos=token188;
            if (phase3R_317()) return true;
        }
        return false;
    }

    private boolean phase3R_247() {
        Token token189=jj_scanpos;
        if (phase3R_318()) {
            jj_scanpos=token189;
            if (phase3R_319()) return true;
        }
        return false;
    }

    private boolean phase3R_248() {
        if (jj_scan_token(91)) return true;
        if (phase3R_887()) return true;
        if (jj_scan_token(95)) return true;
        if (jj_scan_token(96)) return true;
        return false;
    }

    private boolean phase3R_249() {
        if (jj_scan_token(91)) return true;
        if (phase3R_887()) return true;
        while (true) {
            Token token190=jj_scanpos;
            if (phase3R_323()) {
                jj_scanpos=token190;
                break;
            }
        }
        if (jj_scan_token(92)) return true;
        Token token191=jj_scanpos;
        if (jj_scan_token(104)) {
            jj_scanpos=token191;
            if (jj_scan_token(103)) {
                jj_scanpos=token191;
                if (jj_scan_token(91)) {
                    jj_scanpos=token191;
                    if (jj_scan_token(141)) {
                        jj_scanpos=token191;
                        if (jj_scan_token(68)) {
                            jj_scanpos=token191;
                            if (jj_scan_token(65)) {
                                jj_scanpos=token191;
                                if (jj_scan_token(55)) {
                                    jj_scanpos=token191;
                                    if (phase3R_324()) return true;
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean phase3R_444() {
        if (jj_scan_token(95)) return true;
        Token token192=jj_scanpos;
        if (phase3R_496()) jj_scanpos=token192;
        if (jj_scan_token(96)) return true;
        return false;
    }

    private boolean phase3R_445() {
        if (jj_scan_token(99)) return true;
        if (jj_scan_token(IDENTIFIER)) return true;
        return false;
    }

    private boolean phase3R_446() {
        if (jj_scan_token(136)) return true;
        Token token193=jj_scanpos;
        if (jj_scan_token(141)) {
            jj_scanpos=token193;
            if (jj_scan_token(55)) return true;
        }
        return false;
    }

    private boolean phase3R_447() {
        if (phase3R_828()) return true;
        return false;
    }

    private boolean phase3R_254() {
        if (phase3R_887()) return true;
        return false;
    }

    private boolean phase3R_255() {
        if (phase3R_887()) return true;
        return false;
    }

    private boolean phase3R_493() {
        if (jj_scan_token(55)) return true;
        if (phase3R_701()) return true;
        Token token194=jj_scanpos;
        if (phase3R_551()) jj_scanpos=token194;
        Token token195=jj_scanpos;
        if (phase3R_552()) {
            jj_scanpos=token195;
            if (phase3R_553()) return true;
        }
        return false;
    }

    private boolean phase3R_258() {
        if (phase3R_331()) return true;
        return false;
    }

    private boolean phase3R_259() {
        if (phase3R_779()) return true;
        return false;
    }

    private boolean phase3R_260() {
        if (phase3R_690()) return true;
        if (jj_scan_token(97)) return true;
        return false;
    }

    private boolean phase3R_261() {
        if (phase3R_334()) return true;
        return false;
    }

    private boolean phase3R_262() {
        if (phase3R_335()) return true;
        return false;
    }

    private boolean phase3R_263() {
        if (phase3R_336()) return true;
        return false;
    }

    private boolean phase3R_264() {
        if (phase3R_337()) return true;
        return false;
    }

    private boolean phase3R_265() {
        if (phase3R_338()) return true;
        return false;
    }

    private boolean phase3R_266() {
        if (phase3R_339()) return true;
        return false;
    }

    private boolean phase3R_267() {
        if (phase3R_340()) return true;
        return false;
    }

    private boolean phase3R_268() {
        if (phase3R_341()) return true;
        return false;
    }

    private boolean phase3R_269() {
        if (phase3R_342()) return true;
        return false;
    }

    private boolean phase3R_270() {
        if (phase3R_343()) return true;
        return false;
    }

    private boolean phase3R_271() {
        if (phase3R_344()) return true;
        return false;
    }

    private boolean phase3R_272() {
        if (phase3R_345()) return true;
        return false;
    }

    private boolean phase3R_774() {
        if (phase3R_809()) return true;
        Token token196=jj_scanpos;
        if (phase3R_347()) jj_scanpos=token196;
        return false;
    }

    private boolean phase3R_276() {
        if (jj_scan_token(98)) return true;
        if (phase3R_774()) return true;
        return false;
    }

    private boolean phase3R_503() {
        if (phase3R_764()) return true;
        return false;
    }

    private boolean phase3R_504() {
        if (phase3R_563()) return true;
        return false;
    }

    private boolean phase3R_505() {
        if (phase3R_564()) return true;
        return false;
    }

    private boolean phase3R_280() {
        if (jj_scan_token(91)) return true;
        Token token197=jj_scanpos;
        if (phase3R_352()) jj_scanpos=token197;
        if (jj_scan_token(92)) return true;
        return false;
    }

    private boolean phase3R_809() {
        if (jj_scan_token(IDENTIFIER)) return true;
        while (true) {
            Token token198=jj_scanpos;
            if (phase3R_433()) {
                jj_scanpos=token198;
                break;
            }
        }
        return false;
    }

    private boolean phase3R_283() {
        if (jj_scan_token(98)) return true;
        if (phase3R_887()) return true;
        if (phase3R_809()) return true;
        return false;
    }

    private boolean phase3R_287() {
        Token token199=jj_scanpos;
        if (phase3R_364()) {
            jj_scanpos=token199;
            if (phase3R_365()) return true;
        }
        if (jj_scan_token(106)) return true;
        return false;
    }

    private boolean phase3R_288() {
        if (phase3R_648()) return true;
        while (true) {
            Token token200=jj_scanpos;
            if (phase3R_367()) {
                jj_scanpos=token200;
                break;
            }
        }
        return false;
    }

    private boolean phase3R_289() {
        if (phase3R_368()) return true;
        return false;
    }

    private boolean phase3R_290() {
        if (phase3R_369()) return true;
        return false;
    }

    private boolean phase3R_291() {
        if (phase3R_370()) return true;
        return false;
    }

    private boolean phase3R_372() {
        if (jj_scan_token(IDENTIFIER)) return true;
        Token token201=jj_scanpos;
        if (phase3R_371()) jj_scanpos=token201;
        return false;
    }

    private boolean phase3R_293() {
        if (jj_scan_token(98)) return true;
        if (phase3R_372()) return true;
        return false;
    }

    private boolean phase3R_404() {
        if (phase3R_773()) return true;
        return false;
    }

    private boolean phase3R_641() {
        if (jj_scan_token(93)) return true;
        Token token202=jj_scanpos;
        if (phase3R_599()) jj_scanpos=token202;
        Token token203=jj_scanpos;
        if (jj_scan_token(98)) jj_scanpos=token203;
        if (jj_scan_token(94)) return true;
        return false;
    }

    private boolean phase3R_356() {
        if (phase3R_437()) return true;
        return false;
    }

    private boolean phase3R_357() {
        if (jj_scan_token(91)) return true;
        if (phase3R_670()) return true;
        if (jj_scan_token(92)) return true;
        return false;
    }

    private boolean phase3R_358() {
        if (phase3R_494()) return true;
        return false;
    }

    private boolean phase3R_359() {
        if (phase3R_548()) return true;
        if (jj_scan_token(99)) return true;
        if (jj_scan_token(32)) return true;
        return false;
    }

    private boolean phase3R_360() {
        if (phase3R_755()) return true;
        if (jj_scan_token(99)) return true;
        if (jj_scan_token(32)) return true;
        return false;
    }

    private boolean phase3R_361() {
        if (phase3R_442()) return true;
        return false;
    }

    private boolean phase3R_362() {
        if (phase3R_811()) return true;
        return false;
    }

    private boolean phase3R_309() {
        if (jj_scan_token(98)) return true;
        if (phase3R_670()) return true;
        return false;
    }

    private boolean phase3R_455() {
        if (phase3R_548()) return true;
        if (phase3_18()) return true;
        while (true) {
            Token token204=jj_scanpos;
            if (phase3_18()) {
                jj_scanpos=token204;
                break;
            }
        }
        return false;
    }

    private boolean phase3R_701() {
        if (jj_scan_token(IDENTIFIER)) return true;
        Token token205=jj_scanpos;
        if (phase3_14()) jj_scanpos=token205;
        while (true) {
            Token token206=jj_scanpos;
            if (phase3_16()) {
                jj_scanpos=token206;
                break;
            }
        }
        return false;
    }

    private boolean phase3R_650() {
        if (phase3R_704()) return true;
        return false;
    }

    private boolean phase3R_651() {
        if (jj_scan_token(105)) return true;
        Token token207=jj_scanpos;
        if (phase3R_677()) jj_scanpos=token207;
        return false;
    }

    private boolean phase3R_564() {
        if (phase3R_575()) return true;
        Token token208=jj_scanpos;
        if (phase3R_576()) jj_scanpos=token208;
        return false;
    }

    private boolean phase3R_883() {
        Token token209=jj_scanpos;
        if (phase3R_834()) {
            jj_scanpos=token209;
            if (phase3R_835()) {
                jj_scanpos=token209;
                if (phase3R_836()) {
                    jj_scanpos=token209;
                    if (phase3R_837()) return true;
                }
            }
        }
        return false;
    }

    private boolean phase3R_316() {
        if (phase3R_393()) return true;
        return false;
    }

    private boolean phase3R_317() {
        if (phase3R_394()) return true;
        return false;
    }

    private boolean phase3R_318() {
        if (phase3R_670()) return true;
        return false;
    }

    private boolean phase3R_319() {
        if (phase3R_779()) return true;
        return false;
    }

    private boolean phase3R_323() {
        if (jj_scan_token(119)) return true;
        if (phase3R_887()) return true;
        return false;
    }

    private boolean phase3R_324() {
        if (phase3R_437()) return true;
        return false;
    }

    private boolean phase3R_496() {
        if (phase3R_670()) return true;
        return false;
    }

    private boolean phase3R_331() {
        if (jj_scan_token(25)) return true;
        if (phase3R_670()) return true;
        Token token210=jj_scanpos;
        if (phase3R_403()) jj_scanpos=token210;
        if (jj_scan_token(97)) return true;
        return false;
    }

    private boolean phase3R_690() {
        Token token211=jj_scanpos;
        if (phase3R_405()) {
            jj_scanpos=token211;
            if (phase3R_406()) {
                jj_scanpos=token211;
                if (phase3R_407()) return true;
            }
        }
        return false;
    }

    private boolean phase3R_334() {
        if (jj_scan_token(66)) return true;
        if (jj_scan_token(91)) return true;
        if (phase3R_670()) return true;
        if (jj_scan_token(92)) return true;
        if (jj_scan_token(93)) return true;
        while (true) {
            Token token212=jj_scanpos;
            if (phase3R_409()) {
                jj_scanpos=token212;
                break;
            }
        }
        if (jj_scan_token(94)) return true;
        return false;
    }

    private boolean phase3R_335() {
        if (jj_scan_token(47)) return true;
        if (jj_scan_token(91)) return true;
        if (phase3R_670()) return true;
        if (jj_scan_token(92)) return true;
        if (phase3R_580()) return true;
        Token token213=jj_scanpos;
        if (phase3R_412()) jj_scanpos=token213;
        return false;
    }

    private boolean phase3R_336() {
        if (jj_scan_token(76)) return true;
        if (jj_scan_token(91)) return true;
        if (phase3R_670()) return true;
        if (jj_scan_token(92)) return true;
        if (phase3R_580()) return true;
        return false;
    }

    private boolean phase3R_337() {
        if (jj_scan_token(36)) return true;
        if (phase3R_580()) return true;
        if (jj_scan_token(76)) return true;
        if (jj_scan_token(91)) return true;
        if (phase3R_670()) return true;
        if (jj_scan_token(92)) return true;
        if (jj_scan_token(97)) return true;
        return false;
    }

    private boolean phase3R_338() {
        if (jj_scan_token(45)) return true;
        if (jj_scan_token(91)) return true;
        Token token214=jj_scanpos;
        if (phase3R_417()) {
            jj_scanpos=token214;
            if (phase3R_418()) return true;
        }
        if (jj_scan_token(92)) return true;
        if (phase3R_580()) return true;
        return false;
    }

    private boolean phase3R_339() {
        if (jj_scan_token(27)) return true;
        Token token215=jj_scanpos;
        if (jj_scan_token(141)) jj_scanpos=token215;
        if (jj_scan_token(97)) return true;
        return false;
    }

    private boolean phase3R_340() {
        if (jj_scan_token(34)) return true;
        Token token216=jj_scanpos;
        if (jj_scan_token(141)) jj_scanpos=token216;
        if (jj_scan_token(97)) return true;
        return false;
    }

    private boolean phase3R_341() {
        if (jj_scan_token(61)) return true;
        Token token217=jj_scanpos;
        if (phase3R_420()) jj_scanpos=token217;
        if (jj_scan_token(97)) return true;
        return false;
    }

    private boolean phase3R_342() {
        if (jj_scan_token(69)) return true;
        if (phase3R_670()) return true;
        if (jj_scan_token(97)) return true;
        return false;
    }

    private boolean phase3R_343() {
        if (jj_scan_token(67)) return true;
        if (jj_scan_token(91)) return true;
        if (phase3R_670()) return true;
        if (jj_scan_token(92)) return true;
        if (phase3R_779()) return true;
        return false;
    }

    private boolean phase3R_344() {
        if (jj_scan_token(73)) return true;
        if (phase3R_779()) return true;
        Token token218=jj_scanpos;
        if (phase3R_425()) {
            jj_scanpos=token218;
            if (phase3R_426()) return true;
        }
        return false;
    }

    private boolean phase3R_345() {
        if (jj_scan_token(73)) return true;
        if (jj_scan_token(91)) return true;
        Token token219=jj_scanpos;
        if (phase3R_427()) {
            jj_scanpos=token219;
            if (phase3R_428()) return true;
        }
        while (true) {
            Token token220=jj_scanpos;
            if (phase3R_429()) {
                jj_scanpos=token220;
                break;
            }
        }
        if (jj_scan_token(92)) return true;
        if (phase3R_779()) return true;
        while (true) {
            Token token221=jj_scanpos;
            if (phase3R_431()) {
                jj_scanpos=token221;
                break;
            }
        }
        Token token222=jj_scanpos;
        if (phase3R_432()) jj_scanpos=token222;
        return false;
    }

    private boolean phase3R_347() {
        if (jj_scan_token(100)) return true;
        if (phase3R_669()) return true;
        return false;
    }

    private boolean phase3R_563() {
        Token token223=jj_scanpos;
        if (phase3_58()) {
            jj_scanpos=token223;
            if (phase3R_611()) return true;
        }
        return false;
    }

    private boolean phase3R_352() {
        if (jj_scan_token(IDENTIFIER)) return true;
        while (true) {
            Token token224=jj_scanpos;
            if (phase3R_436()) {
                jj_scanpos=token224;
                break;
            }
        }
        return false;
    }

    private boolean phase3R_433() {
        if (jj_scan_token(95)) return true;
        if (jj_scan_token(96)) return true;
        return false;
    }

    private boolean phase3R_364() {
        if (jj_scan_token(IDENTIFIER)) return true;
        return false;
    }

    private boolean phase3R_365() {
        if (jj_scan_token(HASH_ID)) return true;
        return false;
    }

    private boolean phase3R_648() {
        if (phase3R_448()) return true;
        while (true) {
            Token token225=jj_scanpos;
            if (phase3R_448()) {
                jj_scanpos=token225;
                break;
            }
        }
        return false;
    }

    private boolean phase3R_367() {
        if (jj_scan_token(120)) return true;
        return false;
    }

    private boolean phase3R_368() {
        if (jj_scan_token(138)) return true;
        if (phase3R_811()) return true;
        if (jj_scan_token(91)) return true;
        Token token226=jj_scanpos;
        if (phase3R_450()) jj_scanpos=token226;
        if (jj_scan_token(92)) return true;
        return false;
    }

    private boolean phase3R_369() {
        if (jj_scan_token(138)) return true;
        if (phase3R_811()) return true;
        if (jj_scan_token(91)) return true;
        if (phase3R_863()) return true;
        if (jj_scan_token(92)) return true;
        return false;
    }

    private boolean phase3R_370() {
        if (jj_scan_token(138)) return true;
        if (phase3R_811()) return true;
        return false;
    }

    private boolean phase3R_371() {
        if (phase3R_454()) return true;
        return false;
    }

    private boolean phase3R_773() {
        Token token227=jj_scanpos;
        if (phase3R_525()) {
            jj_scanpos=token227;
            if (phase3R_526()) {
                jj_scanpos=token227;
                if (phase3R_527()) {
                    jj_scanpos=token227;
                    if (phase3R_528()) return true;
                }
            }
        }
        return false;
    }

    private boolean phase3R_437() {
        Token token228=jj_scanpos;
        if (jj_scan_token(78)) {
            jj_scanpos=token228;
            if (jj_scan_token(77)) {
                jj_scanpos=token228;
                if (jj_scan_token(83)) {
                    jj_scanpos=token228;
                    if (jj_scan_token(89)) {
                        jj_scanpos=token228;
                        if (jj_scan_token(90)) {
                            jj_scanpos=token228;
                            if (jj_scan_token(72)) {
                                jj_scanpos=token228;
                                if (jj_scan_token(41)) {
                                    jj_scanpos=token228;
                                    if (jj_scan_token(56)) return true;
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean phase3R_575() {
        if (phase3R_659()) return true;
        while (true) {
            Token token229=jj_scanpos;
            if (phase3R_623()) {
                jj_scanpos=token229;
                break;
            }
        }
        return false;
    }

    private boolean phase3R_834() {
        Token token230=jj_scanpos;
        if (jj_scan_token(115)) {
            jj_scanpos=token230;
            if (jj_scan_token(116)) return true;
        }
        if (phase3R_883()) return true;
        return false;
    }

    private boolean phase3R_835() {
        if (phase3R_851()) return true;
        return false;
    }

    private boolean phase3R_836() {
        if (phase3R_852()) return true;
        return false;
    }

    private boolean phase3R_837() {
        if (phase3R_886()) return true;
        return false;
    }

    private boolean phase3R_403() {
        if (jj_scan_token(106)) return true;
        if (phase3R_670()) return true;
        return false;
    }

    private boolean phase3R_405() {
        if (phase3R_851()) return true;
        return false;
    }

    private boolean phase3R_406() {
        if (phase3R_852()) return true;
        return false;
    }

    private boolean phase3R_407() {
        if (phase3R_879()) return true;
        Token token231=jj_scanpos;
        if (phase3R_473()) jj_scanpos=token231;
        return false;
    }

    private boolean phase3R_409() {
        if (phase3R_474()) return true;
        return false;
    }

    private boolean phase3R_412() {
        if (jj_scan_token(38)) return true;
        if (phase3R_580()) return true;
        return false;
    }

    private boolean phase3R_417() {
        if (phase3R_821()) return true;
        if (phase3R_887()) return true;
        if (jj_scan_token(IDENTIFIER)) return true;
        if (jj_scan_token(106)) return true;
        if (phase3R_670()) return true;
        return false;
    }

    private boolean phase3R_418() {
        Token token232=jj_scanpos;
        if (phase3R_479()) jj_scanpos=token232;
        if (jj_scan_token(97)) return true;
        Token token233=jj_scanpos;
        if (phase3R_480()) jj_scanpos=token233;
        if (jj_scan_token(97)) return true;
        Token token234=jj_scanpos;
        if (phase3R_481()) jj_scanpos=token234;
        return false;
    }

    private boolean phase3R_420() {
        if (phase3R_670()) return true;
        return false;
    }

    private boolean phase3R_425() {
        if (phase3R_539()) return true;
        return false;
    }

    private boolean phase3R_426() {
        if (phase3R_484()) return true;
        while (true) {
            Token token235=jj_scanpos;
            if (phase3R_484()) {
                jj_scanpos=token235;
                break;
            }
        }
        Token token236=jj_scanpos;
        if (phase3R_485()) jj_scanpos=token236;
        return false;
    }

    private boolean phase3R_427() {
        if (phase3R_634()) return true;
        return false;
    }

    private boolean phase3R_428() {
        if (phase3R_811()) return true;
        return false;
    }

    private boolean phase3R_429() {
        if (jj_scan_token(97)) return true;
        Token token237=jj_scanpos;
        if (phase3R_488()) jj_scanpos=token237;
        return false;
    }

    private boolean phase3R_431() {
        if (phase3R_538()) return true;
        return false;
    }

    private boolean phase3R_432() {
        if (phase3R_539()) return true;
        return false;
    }

    private boolean phase3R_611() {
        if (jj_scan_token(93)) return true;
        if (phase3R_863()) return true;
        while (true) {
            Token token238=jj_scanpos;
            if (phase3_57()) {
                jj_scanpos=token238;
                break;
            }
        }
        Token token239=jj_scanpos;
        if (jj_scan_token(98)) jj_scanpos=token239;
        if (jj_scan_token(94)) return true;
        return false;
    }

    private boolean phase3R_436() {
        if (jj_scan_token(98)) return true;
        if (jj_scan_token(IDENTIFIER)) return true;
        return false;
    }

    private boolean phase3R_448() {
        Token token240=jj_scanpos;
        if (phase3R_498()) {
            jj_scanpos=token240;
            if (phase3R_499()) {
                jj_scanpos=token240;
                if (phase3R_500()) {
                    jj_scanpos=token240;
                    if (phase3R_501()) return true;
                }
            }
        }
        return false;
    }

    private boolean phase3R_450() {
        if (phase3R_502()) return true;
        return false;
    }

    private boolean phase3R_454() {
        if (jj_scan_token(40)) return true;
        if (phase3R_701()) return true;
        while (true) {
            Token token241=jj_scanpos;
            if (phase3R_507()) {
                jj_scanpos=token241;
                break;
            }
        }
        return false;
    }

    private boolean phase3R_525() {
        if (phase3R_634()) return true;
        if (jj_scan_token(97)) return true;
        return false;
    }

    private boolean phase3R_526() {
        if (phase3R_580()) return true;
        return false;
    }

    private boolean phase3R_527() {
        if (phase3R_821()) return true;
        if (phase3R_841()) return true;
        return false;
    }

    private boolean phase3R_528() {
        if (phase3R_842()) return true;
        return false;
    }

    private boolean phase3R_659() {
        if (phase3R_684()) return true;
        while (true) {
            Token token242=jj_scanpos;
            if (phase3R_658()) {
                jj_scanpos=token242;
                break;
            }
        }
        return false;
    }

    private boolean phase3R_851() {
        if (jj_scan_token(113)) return true;
        if (phase3R_879()) return true;
        return false;
    }

    private boolean phase3R_852() {
        if (jj_scan_token(114)) return true;
        if (phase3R_879()) return true;
        return false;
    }

    private boolean phase3R_886() {
        Token token243=jj_scanpos;
        if (phase3R_859()) {
            jj_scanpos=token243;
            if (phase3R_860()) {
                jj_scanpos=token243;
                if (phase3R_861()) {
                    jj_scanpos=token243;
                    if (phase3R_862()) return true;
                }
            }
        }
        return false;
    }

    private boolean phase3R_473() {
        Token token244=jj_scanpos;
        if (jj_scan_token(113)) {
            jj_scanpos=token244;
            if (jj_scan_token(114)) {
                jj_scanpos=token244;
                if (phase3R_531()) return true;
            }
        }
        return false;
    }

    private boolean phase3R_474() {
        if (phase3R_532()) return true;
        while (true) {
            Token token245=jj_scanpos;
            if (phase3R_533()) {
                jj_scanpos=token245;
                break;
            }
        }
        return false;
    }

    private boolean phase3R_479() {
        if (phase3R_534()) return true;
        return false;
    }

    private boolean phase3R_480() {
        if (phase3R_670()) return true;
        return false;
    }

    private boolean phase3R_481() {
        if (phase3R_536()) return true;
        return false;
    }

    private boolean phase3R_539() {
        if (jj_scan_token(43)) return true;
        if (phase3R_779()) return true;
        return false;
    }

    private boolean phase3R_484() {
        if (phase3R_538()) return true;
        return false;
    }

    private boolean phase3R_485() {
        if (phase3R_539()) return true;
        return false;
    }

    private boolean phase3R_488() {
        Token token246=jj_scanpos;
        if (phase3R_540()) {
            jj_scanpos=token246;
            if (phase3R_541()) return true;
        }
        return false;
    }

    private boolean phase3R_538() {
        if (jj_scan_token(30)) return true;
        if (jj_scan_token(91)) return true;
        Token token247=jj_scanpos;
        if (jj_scan_token(42)) jj_scanpos=token247;
        if (phase3R_701()) return true;
        while (true) {
            Token token248=jj_scanpos;
            if (phase3R_593()) {
                jj_scanpos=token248;
                break;
            }
        }
        if (phase3R_809()) return true;
        if (jj_scan_token(92)) return true;
        if (phase3R_779()) return true;
        return false;
    }

    private boolean phase3R_498() {
        if (phase3R_556()) return true;
        return false;
    }

    private boolean phase3R_499() {
        if (phase3R_557()) return true;
        return false;
    }

    private boolean phase3R_500() {
        if (phase3R_558()) return true;
        return false;
    }

    private boolean phase3R_501() {
        if (phase3R_559()) return true;
        return false;
    }

    private boolean phase3R_502() {
        if (phase3R_610()) return true;
        while (true) {
            Token token249=jj_scanpos;
            if (phase3R_561()) {
                jj_scanpos=token249;
                break;
            }
        }
        return false;
    }

    private boolean phase3R_507() {
        if (jj_scan_token(119)) return true;
        if (phase3R_701()) return true;
        return false;
    }

    private boolean phase3R_841() {
        if (jj_scan_token(32)) return true;
        if (jj_scan_token(IDENTIFIER)) return true;
        Token token250=jj_scanpos;
        if (phase3R_626()) jj_scanpos=token250;
        Token token251=jj_scanpos;
        if (phase3R_627()) jj_scanpos=token251;
        Token token252=jj_scanpos;
        if (phase3R_628()) jj_scanpos=token252;
        if (phase3R_829()) return true;
        return false;
    }

    private boolean phase3R_842() {
        if (jj_scan_token(52)) return true;
        if (jj_scan_token(IDENTIFIER)) return true;
        Token token253=jj_scanpos;
        if (phase3R_630()) jj_scanpos=token253;
        Token token254=jj_scanpos;
        if (phase3R_631()) jj_scanpos=token254;
        if (phase3R_829()) return true;
        return false;
    }

    private boolean phase3R_576() {
        if (jj_scan_token(105)) return true;
        if (phase3R_670()) return true;
        if (jj_scan_token(106)) return true;
        if (phase3R_670()) return true;
        return false;
    }

    private boolean phase3R_684() {
        if (phase3R_699()) return true;
        while (true) {
            Token token255=jj_scanpos;
            if (phase3R_683()) {
                jj_scanpos=token255;
                break;
            }
        }
        return false;
    }

    private boolean phase3R_859() {
        Token token256=jj_scanpos;
        if (jj_scan_token(104)) {
            jj_scanpos=token256;
            if (jj_scan_token(103)) return true;
        }
        if (phase3R_883()) return true;
        return false;
    }

    private boolean phase3R_860() {
        if (phase3R_869()) return true;
        return false;
    }

    private boolean phase3R_861() {
        if (phase3R_870()) return true;
        return false;
    }

    private boolean phase3R_862() {
        if (phase3R_871()) return true;
        return false;
    }

    private boolean phase3R_531() {
        if (phase3R_584()) return true;
        if (phase3R_670()) return true;
        return false;
    }

    private boolean phase3R_532() {
        Token token257=jj_scanpos;
        if (phase3R_586()) {
            jj_scanpos=token257;
            if (phase3R_587()) return true;
        }
        return false;
    }

    private boolean phase3R_533() {
        if (phase3R_773()) return true;
        return false;
    }

    private boolean phase3R_534() {
        Token token258=jj_scanpos;
        if (phase3R_589()) {
            jj_scanpos=token258;
            if (phase3R_590()) return true;
        }
        return false;
    }

    private boolean phase3R_536() {
        if (phase3R_635()) return true;
        return false;
    }

    private boolean phase3R_540() {
        if (phase3R_634()) return true;
        return false;
    }

    private boolean phase3R_541() {
        if (phase3R_811()) return true;
        return false;
    }

    private boolean phase3R_593() {
        if (jj_scan_token(120)) return true;
        if (phase3R_701()) return true;
        return false;
    }

    private boolean phase3R_602() {
        Token token259=jj_scanpos;
        if (phase3_44()) {
            jj_scanpos=token259;
            if (phase3R_600()) return true;
        }
        return false;
    }

    private boolean phase3R_551() {
        if (phase3R_601()) return true;
        return false;
    }

    private boolean phase3R_552() {
        if (phase3R_602()) return true;
        return false;
    }

    private boolean phase3R_553() {
        if (phase3R_828()) return true;
        Token token260=jj_scanpos;
        if (phase3R_604()) jj_scanpos=token260;
        return false;
    }

    private boolean phase3R_556() {
        if (jj_scan_token(STRING_LITERAL)) return true;
        return false;
    }

    private boolean phase3R_558() {
        Token token261=jj_scanpos;
        if (jj_scan_token(104)) jj_scanpos=token261;
        if (jj_scan_token(95)) return true;
        Token token262=jj_scanpos;
        if (phase3R_607()) jj_scanpos=token262;
        if (jj_scan_token(96)) return true;
        return false;
    }

    private boolean phase3R_559() {
        if (phase3R_608()) return true;
        return false;
    }

    private boolean phase3R_610() {
        if (jj_scan_token(IDENTIFIER)) return true;
        if (jj_scan_token(100)) return true;
        if (phase3R_863()) return true;
        return false;
    }

    private boolean phase3R_561() {
        if (jj_scan_token(98)) return true;
        if (phase3R_610()) return true;
        return false;
    }

    private boolean phase3R_623() {
        if (jj_scan_token(111)) return true;
        if (phase3R_659()) return true;
        return false;
    }

    private boolean phase3R_699() {
        if (phase3R_711()) return true;
        while (true) {
            Token token263=jj_scanpos;
            if (phase3R_698()) {
                jj_scanpos=token263;
                break;
            }
        }
        return false;
    }

    private boolean phase3R_870() {
        Token token264=jj_scanpos;
        if (phase3R_877()) {
            jj_scanpos=token264;
            if (phase3R_878()) return true;
        }
        return false;
    }

    private boolean phase3R_871() {
        if (phase3R_879()) return true;
        Token token265=jj_scanpos;
        if (phase3R_880()) jj_scanpos=token265;
        return false;
    }

    private boolean phase3R_586() {
        if (jj_scan_token(29)) return true;
        if (phase3R_670()) return true;
        if (jj_scan_token(106)) return true;
        return false;
    }

    private boolean phase3R_587() {
        if (jj_scan_token(35)) return true;
        if (jj_scan_token(106)) return true;
        return false;
    }

    private boolean phase3R_589() {
        if (phase3R_634()) return true;
        return false;
    }

    private boolean phase3R_590() {
        if (phase3R_635()) return true;
        return false;
    }

    private boolean phase3R_635() {
        if (phase3R_690()) return true;
        while (true) {
            Token token266=jj_scanpos;
            if (phase3R_667()) {
                jj_scanpos=token266;
                break;
            }
        }
        return false;
    }

    private boolean phase3R_599() {
        if (phase3R_669()) return true;
        while (true) {
            Token token267=jj_scanpos;
            if (phase3_8()) {
                jj_scanpos=token267;
                break;
            }
        }
        return false;
    }

    private boolean phase3R_600() {
        if (phase3R_640()) return true;
        while (true) {
            Token token268=jj_scanpos;
            if (phase3R_640()) {
                jj_scanpos=token268;
                break;
            }
        }
        if (phase3R_641()) return true;
        return false;
    }

    private boolean phase3R_601() {
        Token token269=jj_scanpos;
        if (phase3_17()) {
            jj_scanpos=token269;
            if (phase3R_642()) return true;
        }
        return false;
    }

    private boolean phase3R_604() {
        if (phase3R_829()) return true;
        return false;
    }

    private boolean phase3R_613() {
        if (jj_scan_token(98)) return true;
        if (phase3R_652()) return true;
        return false;
    }

    private boolean phase3R_607() {
        if (phase3R_647()) return true;
        return false;
    }

    private boolean phase3R_608() {
        if (jj_scan_token(91)) return true;
        if (phase3R_648()) return true;
        return false;
    }

    private boolean phase3R_658() {
        if (jj_scan_token(112)) return true;
        if (phase3R_684()) return true;
        return false;
    }

    private boolean phase3R_711() {
        if (phase3R_727()) return true;
        while (true) {
            Token token270=jj_scanpos;
            if (phase3R_710()) {
                jj_scanpos=token270;
                break;
            }
        }
        return false;
    }

    private boolean phase3R_877() {
        if (jj_scan_token(91)) return true;
        if (phase3R_887()) return true;
        if (jj_scan_token(92)) return true;
        if (phase3R_883()) return true;
        return false;
    }

    private boolean phase3R_878() {
        if (jj_scan_token(91)) return true;
        if (phase3R_887()) return true;
        while (true) {
            Token token271=jj_scanpos;
            if (phase3R_885()) {
                jj_scanpos=token271;
                break;
            }
        }
        if (jj_scan_token(92)) return true;
        if (phase3R_886()) return true;
        return false;
    }

    private boolean phase3R_626() {
        if (phase3R_775()) return true;
        return false;
    }

    private boolean phase3R_627() {
        if (phase3R_665()) return true;
        return false;
    }

    private boolean phase3R_628() {
        if (phase3R_766()) return true;
        return false;
    }

    private boolean phase3R_829() {
        if (jj_scan_token(93)) return true;
        while (true) {
            Token token272=jj_scanpos;
            if (phase3R_663()) {
                jj_scanpos=token272;
                break;
            }
        }
        if (jj_scan_token(94)) return true;
        return false;
    }

    private boolean phase3R_630() {
        if (phase3R_775()) return true;
        return false;
    }

    private boolean phase3R_631() {
        if (phase3R_665()) return true;
        return false;
    }

    private boolean phase3R_667() {
        if (jj_scan_token(98)) return true;
        if (phase3R_690()) return true;
        return false;
    }

    private boolean phase3R_640() {
        if (jj_scan_token(95)) return true;
        if (jj_scan_token(96)) return true;
        return false;
    }

    private boolean phase3R_642() {
        if (phase3R_672()) return true;
        return false;
    }

    private boolean phase3R_647() {
        if (jj_scan_token(STRING_LITERAL)) return true;
        return false;
    }

    private boolean phase3R_683() {
        if (jj_scan_token(120)) return true;
        if (phase3R_699()) return true;
        return false;
    }

    private boolean phase3R_727() {
        if (phase3R_741()) return true;
        while (true) {
            Token token273=jj_scanpos;
            if (phase3R_726()) {
                jj_scanpos=token273;
                break;
            }
        }
        return false;
    }

    private boolean phase3R_665() {
        if (jj_scan_token(40)) return true;
        if (phase3R_701()) return true;
        while (true) {
            Token token274=jj_scanpos;
            if (phase3R_686()) {
                jj_scanpos=token274;
                break;
            }
        }
        return false;
    }

    private boolean phase3R_766() {
        if (jj_scan_token(48)) return true;
        if (phase3R_701()) return true;
        while (true) {
            Token token275=jj_scanpos;
            if (phase3R_688()) {
                jj_scanpos=token275;
                break;
            }
        }
        return false;
    }

    private boolean phase3R_663() {
        if (phase3R_806()) return true;
        return false;
    }

    private boolean phase3R_677() {
        if (phase3R_692()) return true;
        return false;
    }

    private boolean phase3R_698() {
        if (jj_scan_token(121)) return true;
        if (phase3R_711()) return true;
        return false;
    }

    private boolean phase3R_741() {
        if (phase3R_739()) return true;
        Token token276=jj_scanpos;
        if (phase3R_740()) jj_scanpos=token276;
        return false;
    }

    private boolean phase3R_686() {
        if (jj_scan_token(98)) return true;
        if (phase3R_701()) return true;
        return false;
    }

    private boolean phase3R_688() {
        if (jj_scan_token(98)) return true;
        if (phase3R_701()) return true;
        return false;
    }

    private boolean phase3R_806() {
        Token token277=jj_scanpos;
        if (phase3_7()) {
            jj_scanpos=token277;
            if (phase3R_702()) {
                jj_scanpos=token277;
                if (jj_scan_token(97)) return true;
            }
        }
        return false;
    }

    private boolean phase3R_692() {
        Token token278=jj_scanpos;
        if (jj_scan_token(40)) {
            jj_scanpos=token278;
            if (jj_scan_token(65)) return true;
        }
        if (phase3R_704()) return true;
        return false;
    }

    private boolean phase3R_710() {
        if (jj_scan_token(119)) return true;
        if (phase3R_727()) return true;
        return false;
    }

    private boolean phase3R_739() {
        if (phase3R_785()) return true;
        while (true) {
            Token token279=jj_scanpos;
            if (phase3R_762()) {
                jj_scanpos=token279;
                break;
            }
        }
        return false;
    }

    private boolean phase3R_702() {
        if (phase3R_713()) return true;
        Token token280=jj_scanpos;
        if (phase3R_714()) {
            jj_scanpos=token280;
            if (phase3R_715()) {
                jj_scanpos=token280;
                if (phase3R_716()) {
                    jj_scanpos=token280;
                    if (phase3R_717()) {
                        jj_scanpos=token280;
                        if (phase3R_718()) {
                            jj_scanpos=token280;
                            if (phase3R_719()) {
                                jj_scanpos=token280;
                                if (phase3R_720()) return true;
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean phase3R_726() {
        Token token281=jj_scanpos;
        if (jj_scan_token(107)) {
            jj_scanpos=token281;
            if (jj_scan_token(110)) return true;
        }
        if (phase3R_741()) return true;
        return false;
    }

    private boolean phase3R_785() {
        if (phase3R_800()) return true;
        while (true) {
            Token token282=jj_scanpos;
            if (phase3_27()) {
                jj_scanpos=token282;
                break;
            }
        }
        return false;
    }

    private boolean phase3R_713() {
        while (true) {
            Token token283=jj_scanpos;
            if (phase3_3()) {
                jj_scanpos=token283;
                break;
            }
        }
        return false;
    }

    private boolean phase3R_714() {
        if (phase3R_841()) return true;
        return false;
    }

    private boolean phase3R_715() {
        if (phase3R_842()) return true;
        return false;
    }

    private boolean phase3R_716() {
        if (phase3R_844()) return true;
        return false;
    }

    private boolean phase3R_717() {
        if (phase3R_843()) return true;
        return false;
    }

    private boolean phase3R_718() {
        if (phase3R_733()) return true;
        return false;
    }

    private boolean phase3R_719() {
        if (phase3R_845()) return true;
        return false;
    }

    private boolean phase3R_720() {
        if (phase3R_735()) return true;
        return false;
    }

    private boolean phase3R_740() {
        if (jj_scan_token(50)) return true;
        if (phase3R_887()) return true;
        return false;
    }

    private boolean phase3R_844() {
        if (jj_scan_token(138)) return true;
        if (jj_scan_token(52)) return true;
        if (jj_scan_token(IDENTIFIER)) return true;
        if (phase3R_743()) return true;
        return false;
    }

    private boolean phase3R_843() {
        if (jj_scan_token(39)) return true;
        if (jj_scan_token(IDENTIFIER)) return true;
        Token token284=jj_scanpos;
        if (phase3R_744()) jj_scanpos=token284;
        if (phase3R_745()) return true;
        return false;
    }

    private boolean phase3R_733() {
        Token token285=jj_scanpos;
        if (phase3R_746()) jj_scanpos=token285;
        if (jj_scan_token(IDENTIFIER)) return true;
        if (phase3R_776()) return true;
        Token token286=jj_scanpos;
        if (phase3R_748()) jj_scanpos=token286;
        if (jj_scan_token(93)) return true;
        Token token287=jj_scanpos;
        if (phase3R_749()) jj_scanpos=token287;
        while (true) {
            Token token288=jj_scanpos;
            if (phase3R_750()) {
                jj_scanpos=token288;
                break;
            }
        }
        if (jj_scan_token(94)) return true;
        return false;
    }

    private boolean phase3R_845() {
        if (phase3R_887()) return true;
        if (phase3R_774()) return true;
        while (true) {
            Token token289=jj_scanpos;
            if (phase3R_753()) {
                jj_scanpos=token289;
                break;
            }
        }
        if (jj_scan_token(97)) return true;
        return false;
    }

    private boolean phase3R_735() {
        Token token290=jj_scanpos;
        if (phase3R_754()) jj_scanpos=token290;
        if (phase3R_755()) return true;
        if (phase3R_756()) return true;
        Token token291=jj_scanpos;
        if (phase3R_757()) jj_scanpos=token291;
        Token token292=jj_scanpos;
        if (phase3R_758()) {
            jj_scanpos=token292;
            if (jj_scan_token(97)) return true;
        }
        return false;
    }

    private boolean phase3R_762() {
        Token token293=jj_scanpos;
        if (jj_scan_token(102)) {
            jj_scanpos=token293;
            if (jj_scan_token(101)) {
                jj_scanpos=token293;
                if (jj_scan_token(108)) {
                    jj_scanpos=token293;
                    if (jj_scan_token(109)) return true;
                }
            }
        }
        if (phase3R_785()) return true;
        return false;
    }

    private boolean phase3R_743() {
        if (jj_scan_token(93)) return true;
        while (true) {
            Token token294=jj_scanpos;
            if (phase3R_765()) {
                jj_scanpos=token294;
                break;
            }
        }
        if (jj_scan_token(94)) return true;
        return false;
    }

    private boolean phase3R_744() {
        if (phase3R_766()) return true;
        return false;
    }

    private boolean phase3R_745() {
        if (jj_scan_token(93)) return true;
        Token token295=jj_scanpos;
        if (phase3R_767()) jj_scanpos=token295;
        Token token296=jj_scanpos;
        if (jj_scan_token(98)) jj_scanpos=token296;
        Token token297=jj_scanpos;
        if (phase3R_768()) jj_scanpos=token297;
        if (jj_scan_token(94)) return true;
        return false;
    }

    private boolean phase3R_746() {
        if (phase3R_775()) return true;
        return false;
    }

    private boolean phase3R_776() {
        if (jj_scan_token(91)) return true;
        Token token298=jj_scanpos;
        if (phase3R_770()) jj_scanpos=token298;
        if (jj_scan_token(92)) return true;
        return false;
    }

    private boolean phase3R_748() {
        if (phase3R_778()) return true;
        return false;
    }

    private boolean phase3R_749() {
        if (phase3R_772()) return true;
        return false;
    }

    private boolean phase3R_750() {
        if (phase3R_773()) return true;
        return false;
    }

    private boolean phase3R_753() {
        if (jj_scan_token(98)) return true;
        if (phase3R_774()) return true;
        return false;
    }

    private boolean phase3R_754() {
        if (phase3R_775()) return true;
        return false;
    }

    private boolean phase3R_756() {
        if (jj_scan_token(IDENTIFIER)) return true;
        if (phase3R_776()) return true;
        while (true) {
            Token token299=jj_scanpos;
            if (phase3R_777()) {
                jj_scanpos=token299;
                break;
            }
        }
        return false;
    }

    private boolean phase3R_757() {
        if (phase3R_778()) return true;
        return false;
    }

    private boolean phase3R_758() {
        if (phase3R_779()) return true;
        return false;
    }

    private boolean phase3R_765() {
        if (phase3R_786()) return true;
        return false;
    }

    private boolean phase3R_767() {
        if (phase3R_805()) return true;
        while (true) {
            Token token300=jj_scanpos;
            if (phase3_4()) {
                jj_scanpos=token300;
                break;
            }
        }
        return false;
    }

    private boolean phase3R_768() {
        if (jj_scan_token(97)) return true;
        while (true) {
            Token token301=jj_scanpos;
            if (phase3R_788()) {
                jj_scanpos=token301;
                break;
            }
        }
        return false;
    }

    private boolean phase3R_770() {
        if (phase3R_810()) return true;
        while (true) {
            Token token302=jj_scanpos;
            if (phase3R_790()) {
                jj_scanpos=token302;
                break;
            }
        }
        return false;
    }

    private boolean phase3R_778() {
        if (jj_scan_token(70)) return true;
        if (phase3R_811()) return true;
        while (true) {
            Token token303=jj_scanpos;
            if (phase3R_792()) {
                jj_scanpos=token303;
                break;
            }
        }
        return false;
    }

    private boolean phase3R_777() {
        if (jj_scan_token(95)) return true;
        if (jj_scan_token(96)) return true;
        return false;
    }

    private boolean phase3R_798() {
        Token token304=jj_scanpos;
        if (jj_scan_token(115)) {
            jj_scanpos=token304;
            if (jj_scan_token(116)) return true;
        }
        if (phase3R_819()) return true;
        return false;
    }

    private boolean phase3R_786() {
        Token token305=jj_scanpos;
        if (phase3R_801()) {
            jj_scanpos=token305;
            if (jj_scan_token(97)) return true;
        }
        return false;
    }

    private boolean phase3R_788() {
        if (phase3R_806()) return true;
        return false;
    }

    private boolean phase3R_810() {
        if (phase3R_821()) return true;
        if (phase3R_887()) return true;
        Token token306=jj_scanpos;
        if (jj_scan_token(137)) jj_scanpos=token306;
        if (phase3R_809()) return true;
        return false;
    }

    private boolean phase3R_790() {
        if (jj_scan_token(98)) return true;
        if (phase3R_810()) return true;
        return false;
    }

    private boolean phase3R_792() {
        if (jj_scan_token(98)) return true;
        if (phase3R_811()) return true;
        return false;
    }

    private boolean phase3R_818() {
        Token token307=jj_scanpos;
        if (jj_scan_token(117)) {
            jj_scanpos=token307;
            if (jj_scan_token(118)) {
                jj_scanpos=token307;
                if (jj_scan_token(122)) return true;
            }
        }
        if (phase3R_883()) return true;
        return false;
    }

    private boolean phase3R_801() {
        if (phase3R_821()) return true;
        Token token308=jj_scanpos;
        if (phase3R_822()) {
            jj_scanpos=token308;
            if (phase3R_823()) {
                jj_scanpos=token308;
                if (phase3R_824()) {
                    jj_scanpos=token308;
                    if (phase3R_825()) {
                        jj_scanpos=token308;
                        if (phase3R_826()) {
                            jj_scanpos=token308;
                            if (phase3R_827()) return true;
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean phase3R_803() {
        if (phase3R_828()) return true;
        return false;
    }

    private boolean phase3R_804() {
        if (phase3R_829()) return true;
        return false;
    }

    private boolean phase3R_822() {
        if (phase3R_887()) return true;
        if (jj_scan_token(IDENTIFIER)) return true;
        if (jj_scan_token(91)) return true;
        if (jj_scan_token(92)) return true;
        Token token309=jj_scanpos;
        if (phase3R_840()) jj_scanpos=token309;
        if (jj_scan_token(97)) return true;
        return false;
    }

    private boolean phase3R_823() {
        if (phase3R_841()) return true;
        return false;
    }

    private boolean phase3R_824() {
        if (phase3R_842()) return true;
        return false;
    }

    private boolean phase3R_825() {
        if (phase3R_843()) return true;
        return false;
    }

    private boolean phase3R_826() {
        if (phase3R_844()) return true;
        return false;
    }

    private boolean phase3R_827() {
        if (phase3R_845()) return true;
        return false;
    }

    private boolean phase3R_840() {
        if (phase3R_854()) return true;
        return false;
    }

    private boolean phase3R_854() {
        if (jj_scan_token(35)) return true;
        if (phase3R_863()) return true;
        return false;
    }

    private boolean phase3R_880() {
        Token token310=jj_scanpos;
        if (jj_scan_token(113)) {
            jj_scanpos=token310;
            if (jj_scan_token(114)) return true;
        }
        return false;
    }

    private boolean phase3R_885() {
        if (jj_scan_token(119)) return true;
        if (phase3R_887()) return true;
        return false;
    }

    Token current_token;
    private Token jj_scanpos,jj_lastpos;
    private int jj_la;
    private boolean semanticLookahead;
    public JavaCCParser(java.io.InputStream stream) {
        this(new InputStreamReader(stream));
    }

    public JavaCCParser(Reader reader) {
        token_source=new JavaCCLexer(this,reader);
        current_token=new Token();
    }

    /** Constructor with generated Token Manager. */
    public JavaCCParser(JavaCCLexer lexer) {
        token_source=lexer;
        current_token=new Token();
    }

    private Token consumeToken(int expectedType) throws ParseException {
        boolean forced=false;
        Token oldToken=current_token;
        current_token=current_token.next;
        if (current_token==null) {
            current_token=token_source.getNextToken();
        }
        if (current_token.kind!=expectedType) {
            handleUnexpectedTokenType(expectedType,forced,oldToken);
        }
        if (buildTree&&tokensAreNodes) {
            openNodeScopeHook(current_token);
            pushNode(current_token);
        }
        if (trace_enabled) LOGGER.info("Consumed token of type "+tokenImage[current_token.kind]+" from "+current_token.getLocation());
        return current_token;
    }

    private void handleUnexpectedTokenType(int expectedType,boolean forced,Token oldToken) throws ParseException {
        if (!tolerantParsing) {
            //	    current_token = oldToken;
            throw new ParseException(current_token);
        }
    }

    private String generateErrorMessage(Token t) {
        return"Encountered an error on (or somewhere around) line "+t.getBeginLine()+", column "+t.getBeginColumn()+" of "+t.getInputSource();
    }

    @SuppressWarnings("serial")
    static private final class LookaheadSuccess extends java.lang.Error {
    }
    final private LookaheadSuccess LOOKAHEAD_SUCCESS=new LookaheadSuccess();
    private boolean jj_scan_token(int kind) {
        if (jj_scanpos==jj_lastpos) {
            jj_la--;
            if (jj_scanpos.next==null) {
                jj_lastpos=jj_scanpos=jj_scanpos.next=token_source.getNextToken();
            }
            else {
                jj_lastpos=jj_scanpos=jj_scanpos.next;
            }
        }
        else {
            jj_scanpos=jj_scanpos.next;
        }
        if (jj_scanpos.kind!=kind) return true;
        if (jj_la==0&&jj_scanpos==jj_lastpos) throw LOOKAHEAD_SUCCESS;
        return false;
    }

    final public Token getNextToken() {
        if (current_token.next!=null) current_token=current_token.next;
        else current_token=current_token.next=token_source.getNextToken();
        return current_token;
    }

    /** Get the specific Token index ahead in the stream. */
    final public Token getToken(int index) {
        Token t=current_token;
        for (int i=0; i<index; i++) {
            if (t.next!=null) t=t.next;
            else t=t.next=token_source.getNextToken();
        }
        return t;
    }

    private int nextTokenKind() {
        if (current_token.next==null) {
            current_token.next=token_source.getNextToken();
        }
        return current_token.next.kind;
    }

    private List<Token>getTokensToEOL(int...desiredTokenTypes) {
        ArrayList<Token>result=new ArrayList<>();
        int currentLine=current_token.getBeginLine();
        Token tok=current_token;
        do {
            Token prevToken=tok;
            if (tok.next!=null) {
                tok=tok.next;
            }
            else {
                tok=token_source.getNextToken();
                prevToken.next=tok;
            }
            result.add(tok);
        }
        while (tok.getBeginLine()==currentLine&&!intArrayContains(desiredTokenTypes,tok.kind)&&tok.kind!=EOF);
        return result;
    }

    static private boolean intArrayContains(int[] array,int elem) {
        for (int i=0; i<array.length; i++) {
            if (array[i]==elem) {
                return true;
            }
        }
        return false;
    }

    private boolean trace_enabled=false;
    public void setTracingEnabled(boolean tracingEnabled) {
        trace_enabled=tracingEnabled;
    }

    /**
 * @deprecated Use #setTracingEnabled
 */
    @Deprecated public void enable_tracing() {
        setTracingEnabled(true);
    }

    /**
 * @deprecated Use #setTracingEnabled
 */
    @Deprecated public void disable_tracing() {
        setTracingEnabled(false);
    }

}
