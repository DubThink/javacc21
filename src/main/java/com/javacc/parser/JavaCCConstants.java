/* Generated by: JavaCC 21 Parser Generator. Do not edit. JavaCCConstants.java */
package com.javacc.parser;

/**
 * Token literal values and constants.
 */
public interface JavaCCConstants {
    int INVALID=-1;
    // Used for Lexically invalid input
    int EOF=0;
    // End of file
    int _OPTIONS=1;
    int _INJECT=2;
    int _INCLUDE=3;
    int _LOOKAHEAD=4;
    int _IGNORE_CASE=5;
    int _PARSER_BEGIN=6;
    int _PARSER_END=7;
    int _TOKEN=8;
    int _SPECIAL_TOKEN=9;
    int _MORE=10;
    int _SKIP=11;
    int _TOKEN_MGR_DECLS=12;
    int _EOF=13;
    int HASH=14;
    int HASH_ID=15;
    int WHITESPACE=16;
    int SINGLE_LINE_COMMENT=20;
    int FORMAL_COMMENT=21;
    int MULTI_LINE_COMMENT=22;
    int ABSTRACT=24;
    int ASSERT=25;
    int BOOLEAN=26;
    int BREAK=27;
    int BYTE=28;
    int CASE=29;
    int CATCH=30;
    int CHAR=31;
    int CLASS=32;
    int CONST=33;
    int CONTINUE=34;
    int _DEFAULT=35;
    int DO=36;
    int DOUBLE=37;
    int ELSE=38;
    int ENUM=39;
    int EXTENDS=40;
    int FALSE=41;
    int FINAL=42;
    int FINALLY=43;
    int FLOAT=44;
    int FOR=45;
    int GOTO=46;
    int IF=47;
    int IMPLEMENTS=48;
    int IMPORT=49;
    int INSTANCEOF=50;
    int INT=51;
    int INTERFACE=52;
    int LONG=53;
    int NATIVE=54;
    int NEW=55;
    int NULL=56;
    int PACKAGE=57;
    int PRIVATE=58;
    int PROTECTED=59;
    int PUBLIC=60;
    int RETURN=61;
    int SHORT=62;
    int STATIC=63;
    int STRICTFP=64;
    int SUPER=65;
    int SWITCH=66;
    int SYNCHRONIZED=67;
    int THIS=68;
    int THROW=69;
    int THROWS=70;
    int TRANSIENT=71;
    int TRUE=72;
    int TRY=73;
    int VOID=74;
    int VOLATILE=75;
    int WHILE=76;
    int LONG_LITERAL=77;
    int INTEGER_LITERAL=78;
    int DECIMAL_LITERAL=79;
    int HEX_LITERAL=80;
    int OCTAL_LITERAL=81;
    int BINARY_LITERAL=82;
    int FLOATING_POINT_LITERAL=83;
    int DECIMAL_FLOATING_POINT_LITERAL=84;
    int DECIMAL_EXPONENT=85;
    int HEXADECIMAL_FLOATING_POINT_LITERAL=86;
    int HEXADECIMAL_EXPONENT=87;
    int HEX_DIGITS=88;
    int CHARACTER_LITERAL=89;
    int STRING_LITERAL=90;
    int LPAREN=91;
    int RPAREN=92;
    int LBRACE=93;
    int RBRACE=94;
    int LBRACKET=95;
    int RBRACKET=96;
    int SEMICOLON=97;
    int COMMA=98;
    int DOT=99;
    int ASSIGN=100;
    int GT=101;
    int LT=102;
    int BANG=103;
    int TILDE=104;
    int HOOK=105;
    int COLON=106;
    int EQ=107;
    int LE=108;
    int GE=109;
    int NE=110;
    int SC_OR=111;
    int SC_AND=112;
    int INCR=113;
    int DECR=114;
    int PLUS=115;
    int MINUS=116;
    int STAR=117;
    int SLASH=118;
    int BIT_AND=119;
    int BIT_OR=120;
    int XOR=121;
    int REM=122;
    int LSHIFT=123;
    int PLUSASSIGN=124;
    int MINUSASSIGN=125;
    int STARASSIGN=126;
    int SLASHASSIGN=127;
    int ANDASSIGN=128;
    int ORASSIGN=129;
    int XORASSIGN=130;
    int REMASSIGN=131;
    int LSHIFTASSIGN=132;
    int RSIGNEDSHIFTASSIGN=133;
    int RUNSIGNEDSHIFTASSIGN=134;
    int LAMBDA=135;
    int DOUBLE_COLON=136;
    int VAR_ARGS=137;
    int AT=138;
    int RSIGNEDSHIFT=139;
    int RUNSIGNEDSHIFT=140;
    int IDENTIFIER=141;
    int LETTER=142;
    int PART_LETTER=143;
    /**
   * Lexical States
   */
    int JAVA=0;
    int IN_SINGLE_LINE_COMMENT=1;
    int IN_FORMAL_COMMENT=2;
    int IN_MULTI_LINE_COMMENT=3;
    int PHONY=4;
    String[] tokenImage={"<EOF>","<_OPTIONS>","<_INJECT>","<_INCLUDE>","\"LOOKAHEAD\"","\"IGNORE_CASE\"","\"PARSER_BEGIN\"","\"PARSER_END\"","<_TOKEN>","<_SPECIAL_TOKEN>","<_MORE>","\"SKIP\"","\"TOKEN_MGR_DECLS\"","\"EOF\"","\"#\"","<HASH_ID>","<WHITESPACE>","\"//\"","<18>","\"/*\"","<SINGLE_LINE_COMMENT>","\"*/\"","\"*/\"","<23>","\"abstract\"","\"assert\"","\"boolean\"","\"break\"","\"byte\"","\"case\"","\"catch\"","\"char\"","\"class\"","\"const\"","\"continue\"","\"default\"","\"do\"","\"double\"","\"else\"","\"enum\"","\"extends\"","\"false\"","\"final\"","\"finally\"","\"float\"","\"for\"","\"goto\"","\"if\"","\"implements\"","\"import\"","\"instanceof\"","\"int\"","\"interface\"","\"long\"","\"native\"","\"new\"","\"null\"","\"package\"","\"private\"","\"protected\"","\"public\"","\"return\"","\"short\"","\"static\"","\"strictfp\"","\"super\"","\"switch\"","\"synchronized\"","\"this\"","\"throw\"","\"throws\"","\"transient\"","\"true\"","\"try\"","\"void\"","\"volatile\"","\"while\"","<LONG_LITERAL>","<INTEGER_LITERAL>","<DECIMAL_LITERAL>","<HEX_LITERAL>","<OCTAL_LITERAL>","<BINARY_LITERAL>","<FLOATING_POINT_LITERAL>","<DECIMAL_FLOATING_POINT_LITERAL>","<DECIMAL_EXPONENT>","<HEXADECIMAL_FLOATING_POINT_LITERAL>","<HEXADECIMAL_EXPONENT>","<HEX_DIGITS>","<CHARACTER_LITERAL>","<STRING_LITERAL>","\"(\"","\")\"","\"{\"","\"}\"","\"[\"","\"]\"","\";\"","\",\"","\".\"","\"=\"","\">\"","\"<\"","\"!\"","\"~\"","\"?\"","\":\"","\"==\"","\"<=\"","\">=\"","\"!=\"","\"||\"","\"&&\"","\"++\"","\"--\"","\"+\"","\"-\"","\"*\"","\"/\"","\"&\"","\"|\"","\"^\"","\"%\"","\"<<\"","\"+=\"","\"-=\"","\"*=\"","\"/=\"","\"&=\"","\"|=\"","\"^=\"","\"%=\"","\"<<=\"","\">>=\"","\">>>=\"","\"->\"","\"::\"","\"...\"","\"@\"","\">>\"","\">>>\"","<IDENTIFIER>","<LETTER>","<PART_LETTER>",};
    String[] nodeNames={"EOF","_OPTIONS","_INJECT","_INCLUDE","_LOOKAHEAD","_IGNORE_CASE","_PARSER_BEGIN","_PARSER_END","_TOKEN","_SPECIAL_TOKEN","_MORE","_SKIP","_TOKEN_MGR_DECLS","_EOF","HASH","HASH_ID","WHITESPACE","SINGLE_LINE_COMMENT","FORMAL_COMMENT","MULTI_LINE_COMMENT","ABSTRACT","ASSERT","BOOLEAN","BREAK","BYTE","CASE","CATCH","CHAR","CLASS","CONST","CONTINUE","_DEFAULT","DO","DOUBLE","ELSE","ENUM","EXTENDS","FALSE","FINAL","FINALLY","FLOAT","FOR","GOTO","IF","IMPLEMENTS","IMPORT","INSTANCEOF","INT","INTERFACE","LONG","NATIVE","NEW","NULL","PACKAGE","PRIVATE","PROTECTED","PUBLIC","RETURN","SHORT","STATIC","STRICTFP","SUPER","SWITCH","SYNCHRONIZED","THIS","THROW","THROWS","TRANSIENT","TRUE","TRY","VOID","VOLATILE","WHILE","LONG_LITERAL","INTEGER_LITERAL","DECIMAL_LITERAL","HEX_LITERAL","OCTAL_LITERAL","BINARY_LITERAL","FLOATING_POINT_LITERAL","DECIMAL_FLOATING_POINT_LITERAL","DECIMAL_EXPONENT","HEXADECIMAL_FLOATING_POINT_LITERAL","HEXADECIMAL_EXPONENT","HEX_DIGITS","CHARACTER_LITERAL","STRING_LITERAL","LPAREN","RPAREN","LBRACE","RBRACE","LBRACKET","RBRACKET","SEMICOLON","COMMA","DOT","ASSIGN","GT","LT","BANG","TILDE","HOOK","COLON","EQ","LE","GE","NE","SC_OR","SC_AND","INCR","DECR","PLUS","MINUS","STAR","SLASH","BIT_AND","BIT_OR","XOR","REM","LSHIFT","PLUSASSIGN","MINUSASSIGN","STARASSIGN","SLASHASSIGN","ANDASSIGN","ORASSIGN","XORASSIGN","REMASSIGN","LSHIFTASSIGN","RSIGNEDSHIFTASSIGN","RUNSIGNEDSHIFTASSIGN","LAMBDA","DOUBLE_COLON","VAR_ARGS","AT","RSIGNEDSHIFT","RUNSIGNEDSHIFT","IDENTIFIER","LETTER","PART_LETTER","CompilationUnit","PackageDeclaration","ImportDeclaration","TypeDeclaration","ExtendsList","ImplementsList","EnumDeclaration","EnumBody","EnumConstant","TypeParameterList","TypeParameter","TypeBound","ClassOrInterfaceBody","ClassOrInterfaceBodyDeclaration","FieldDeclaration","VariableDeclarator","VariableDeclaratorId","VariableInitializer","ArrayInitializer","MethodDeclaration","FormalParams","FormalParameter","ConstructorDeclaration","ExplicitConstructorInvocation","Initializer","Type","ReferenceType","ObjectType","DiamondOperator","TypeArguments","TypeArgument","WildcardBounds","PrimitiveArrayType","ReturnType","Name","ThrowsList","Expression","AssignmentExpression","TernaryExpression","ConditionalOrExpression","ConditionalAndExpression","InclusiveOrExpression","ExclusiveOrExpression","AndExpression","EqualityExpression","InstanceOfExpression","RelationalExpression","ShiftExpression","AdditiveExpression","MultiplicativeExpression","UnaryExpression","PreIncrementExpression","PreDecrementExpression","UnaryExpressionNotPlusMinus","PostfixExpression","CastExpression","PrimaryExpression","MemberSelector","PrimaryPrefix","MethodReference","PrimarySuffix","InvocationArgs","AllocationExpression","ArrayDimsAndInits","AssertStatement","LabeledStatement","CodeBlock","LocalVariableDeclaration","EmptyStatement","StatementExpression","SwitchStatement","CaseStatement","IfStatement","WhileStatement","DoStatement","ForStatement","ForInit","StatementExpressionList","ForUpdate","BreakStatement","ContinueStatement","ReturnStatement","ThrowStatement","SynchronizedStatement","ClassicTryStatement","TryWithResources","CatchBlock","FinallyBlock","Annotation","MemberValuePairs","MemberValuePair","MemberValue","MemberValueArrayInitializer","AnnotationTypeDeclaration","AnnotationTypeBody","AnnotationTypeMemberDeclaration","DefaultValue","LambdaExpression","LambdaLHS","FormalParameters","LambdaRHS","GrammarFile","ParserCodeDecls","GrammarInclusion","CodeInjection","CodeInjection2","Options","BNFProduction","TreeBuildingAnnotation","TokenProduction","TokenManagerDecls","RegexpSpec","ExpansionChoice","ExpansionSequence","ExplicitLookahead","OneOrMore","ZeroOrMore","ZeroOrOne","ExpansionUnit","NonTerminal","TryBlock","RegexpStringLiteral","RegexpRef","EndOfFile","RegexpChoice","RegexpSequence","OneOrMoreRegexp","ZeroOrMoreRegexp","ZeroOrOneRegexp","RepetitionRange","IntegerLiteral","CharacterList","CharacterRange",};
}
