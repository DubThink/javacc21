/* Generated by: JavaCC 21 Parser Generator. Do not edit. ExpansionSequence.java */
package com.javacc.parser.tree;

import java.util.*;

import com.javacc.Grammar;
import com.javacc.lexgen.TokenSet;
import com.javacc.parsegen.Expansion;
import com.javacc.parsegen.Lookahead;
import com.javacc.parser.*;
@SuppressWarnings("unused")
public class ExpansionSequence extends Expansion {
    public ExpansionSequence(Grammar grammar) {
        setGrammar(grammar);
    }

    public ExpansionSequence() {
    }

    public List<Expansion>getUnits() {
        return childrenOfType(Expansion.class);
    }

    public TokenSet getFirstSet() {
        if (firstSet==null) {
            firstSet=new TokenSet(getGrammar());
            for (Expansion child : getUnits()) {
                firstSet.or(child.getFirstSet());
                if (!child.isPossiblyEmpty()) {
                    break;
                }
            }
        }
        return firstSet;
    }

    public TokenSet getFinalSet() {
        if (finalSet==null) {
            finalSet=new TokenSet(getGrammar());
            List<Expansion>children=getUnits();
            Collections.reverse(children);
            for (Expansion child : children) {
                finalSet.or(child.getFinalSet());
                if (!child.isPossiblyEmpty()) {
                    break;
                }
            }
        }
        return finalSet;
    }

    public boolean isPossiblyEmpty() {
        for (Expansion e : getUnits()) {
            if (!e.isPossiblyEmpty()) {
                return false;
            }
        }
        return true;
    }

    public boolean requiresPhase2Routine() {
        Lookahead lookahead=getLookahead();
        if (lookahead.hasSemanticLookahead()) {
            return true;
        }
        for (Expansion unit : getUnits()) {
            if (unit.requiresPhase2Routine()) {
                return true;
            }
            if (unit.isPossiblyEmpty()) {
                break;
            }
        }
        return false;
    }

    public int minimumSize(int oldMin) {
        int min=0;
        // We skip the first element in the following iteration since it is
        // the
        // Lookahead object.
        for (Expansion eseq : getUnits()) {
            if (eseq instanceof Lookahead) continue;
            int mineseq=eseq.getMinimumSize();
            if (min==Integer.MAX_VALUE||mineseq==Integer.MAX_VALUE) {
                min=Integer.MAX_VALUE;
                // Adding infinity to something results in infinity.
            }
            else {
                min+=mineseq;
                if (min>oldMin) break;
            }
        }
        return min;
    }

}
