/* Generated by: JavaCC 21 Parser Generator. JavaCCLexer.java */
package com.javacc.parser;

import java.io.Reader;
import java.io.IOException;
import java.util.logging.Logger;
import java.util.*;
@SuppressWarnings("unused")
public class JavaCCLexer implements JavaCCConstants {
    Set<String>javaccReservedWords=new HashSet<String>();
     {
        javaccReservedWords.add("options");
        javaccReservedWords.add("OPTIONS");
        javaccReservedWords.add("INCLUDE");
        javaccReservedWords.add("LOOKAHEAD");
        javaccReservedWords.add("IGNORE_CASE");
        javaccReservedWords.add("PARSER_BEGIN");
        javaccReservedWords.add("TOKEN");
        javaccReservedWords.add("REGULAR_TOKEN");
        javaccReservedWords.add("SPECIAL_TOKEN");
        javaccReservedWords.add("UNPARSED_TOKEN");
        javaccReservedWords.add("MORE");
        javaccReservedWords.add("INCOMPLETE_TOKEN");
        javaccReservedWords.add("SKIP");
        javaccReservedWords.add("TOKEN_MGR_DECLS");
        javaccReservedWords.add("EOF");
        //        javaccReservedWords.add("INJECT"); //REVISIT
        //        javaccReservedWords.add("PARSER_END");
    }
    // This keeps track of the level of nesting of
    // < and > characters. Note that this is when
    // they are being used as delimiters, not as
    // less-than/greater-than operators.
    int angleBracketNesting;
    boolean inJavaCode;
    boolean optionsSeen;
    private Token tokenHook(Token t) {
        t.setGrammar(parser.getGrammar());
        if (angleBracketNesting>0&&t.image.length()>1&&t.image.charAt(0)=='>') {
            input_stream.backup(t.image.length()-1);
            Token gt=Token.newToken(GT,">");
            Nodes.copyLocationInfo(t,gt);
            gt.setEndColumn(gt.getEndColumn()-1);
            gt.setGrammar(parser.getGrammar());
            return gt;
        }
        if (javaccReservedWords.contains(t.image)) {
            if (inJavaCode||(t.kind==_OPTIONS&&optionsSeen)) {
                Token id=Token.newToken(IDENTIFIER,t.image);
                Nodes.copyLocationInfo(t,id);
                id.setGrammar(parser.getGrammar());
                return id;
            }
        }
        return t;
    }

    private static final Logger LOGGER=Logger.getLogger("JavaCCParser");
    public JavaCCParser parser;
    int[] jjemptyLineNo=new int[5];
    int[] jjemptyColNo=new int[5];
    boolean[] jjbeenHere=new boolean[5];
    private int jjnewStateCnt;
    private int jjround;
    private int jjmatchedPos;
    private int jjmatchedKind;
    private String inputSource="input";
    private boolean trace_enabled=false;
    private void setTracingEnabled(boolean trace_enabled) {
        this.trace_enabled=trace_enabled;
    }

    public String getInputSource() {
        return inputSource;
    }

    public void setInputSource(String inputSource) {
        this.inputSource=inputSource;
    }

    private LexicalState lexicalState=LexicalState.JAVA;
    public enum LexicalState {
        JAVA,IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT,PHONY,
    }
    void doLexicalStateSwitch(int tokenType) {
        LexicalState newLexState=newLexicalStates[tokenType];
        if (newLexState!=null) {
            switchTo(newLexState);
        }
    }

    private static final LexicalState[] newLexicalStates={null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,LexicalState.IN_SINGLE_LINE_COMMENT,LexicalState.IN_FORMAL_COMMENT,LexicalState.IN_MULTI_LINE_COMMENT,LexicalState.JAVA,LexicalState.JAVA,LexicalState.JAVA,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,};
    // Bit vector for TOKEN
    static final long[] jjtoToken={0xffffffffff00ffffL,0xfffffffffe087fffL,0x3fffL,};
    // Bit vector for SKIP
    static final long[] jjtoSkip={0x710000L,0x0L,0x0L,};
    // Bit vector for SPECIAL
    static final long[] jjtoSpecial={0x710000L,0x0L,0x0L,};
    // Bit vector for MORE
    static final long[] jjtoMore={0x8e0000L,0x0L,0x0L,};
    private final int[] jjrounds=new int[231];
    private final int[] jjstateSet=new int[462];
    private final StringBuilder image=new StringBuilder();
    private int matchedCharsLength;
    char curChar;
    FileLineMap input_stream;
    public final void backup(int amount) {
        input_stream.backup(amount);
    }

    public JavaCCLexer(JavaCCParser parser,Reader reader) {
        this(parser,reader,0,1,1);
        this.parser=parser;
    }

    public JavaCCLexer(JavaCCParser parser,Reader reader,int lexState,int line,int column) {
        this.parser=parser;
        input_stream=new FileLineMap(reader,line,column);
        SwitchTo(lexState);
    }

    // Method to reinitialize the jjrounds array.
    private void ReInitRounds() {
        int i;
        jjround=0x80000001;
        for (i=231; i-->0; ) jjrounds[i]=0x80000000;
    }

    /** Switch to specified lexical state. */
    public void switchTo(LexicalState lexState) {
        if (this.lexicalState!=lexState) {
            if (trace_enabled) LOGGER.info("Switching from lexical state "+this.lexicalState+" to "+lexState);
        }
        this.lexicalState=lexState;
    }

    /**
      * @deprecated Use the switchTo method that takes an Enum
      */
    @Deprecated public void SwitchTo(int lexState) {
        switchTo(LexicalState.values()[lexState]);
    }

    public Token getNextToken() {
        Token specialToken=null;
        Token matchedToken;
        int curPos=0;
        EOFLoop:
        while (true) {
            int retval1=input_stream.beginToken();
            curChar=(char)(retval1);
            if (retval1==-1) {
                // Handle end of file
                if (trace_enabled) LOGGER.info("Returning the <EOF> token.");
                jjmatchedKind=0;
                Token eof=jjFillToken();
                tokenLexicalActions(eof);
                eof=tokenHook(eof);
                eof.specialToken=specialToken;
                return eof;
            }
            image.setLength(0);
            matchedCharsLength=0;
            while (true) {
                switch(lexicalState) {
                    case JAVA:
                    jjmatchedKind=0x7FFFFFFF;
                    jjmatchedPos=0;
                    if (trace_enabled) LOGGER.info("<"+lexicalState+">"+"Current character : "+ParseException.addEscapes(String.valueOf(curChar))+" ("+(int) curChar+") "+"at line "+input_stream.getEndLine()+" column "+input_stream.getEndColumn());
                    curPos=jjMoveStringLiteralDfa0_JAVA();
                    break;
                    case IN_SINGLE_LINE_COMMENT:
                    jjmatchedKind=0x7FFFFFFF;
                    jjmatchedPos=0;
                    if (trace_enabled) LOGGER.info("<"+lexicalState+">"+"Current character : "+ParseException.addEscapes(String.valueOf(curChar))+" ("+(int) curChar+") "+"at line "+input_stream.getEndLine()+" column "+input_stream.getEndColumn());
                    curPos=jjMoveStringLiteralDfa0_IN_SINGLE_LINE_COMMENT();
                    break;
                    case IN_FORMAL_COMMENT:
                    jjmatchedKind=0x7FFFFFFF;
                    jjmatchedPos=0;
                    if (trace_enabled) LOGGER.info("<"+lexicalState+">"+"Current character : "+ParseException.addEscapes(String.valueOf(curChar))+" ("+(int) curChar+") "+"at line "+input_stream.getEndLine()+" column "+input_stream.getEndColumn());
                    curPos=jjMoveStringLiteralDfa0_IN_FORMAL_COMMENT();
                    break;
                    case IN_MULTI_LINE_COMMENT:
                    jjmatchedKind=0x7FFFFFFF;
                    jjmatchedPos=0;
                    if (trace_enabled) LOGGER.info("<"+lexicalState+">"+"Current character : "+ParseException.addEscapes(String.valueOf(curChar))+" ("+(int) curChar+") "+"at line "+input_stream.getEndLine()+" column "+input_stream.getEndColumn());
                    curPos=jjMoveStringLiteralDfa0_IN_MULTI_LINE_COMMENT();
                    break;
                    case PHONY:
                    jjmatchedKind=0x7FFFFFFF;
                    jjmatchedPos=0;
                    if (trace_enabled) LOGGER.info("<"+lexicalState+">"+"Current character : "+ParseException.addEscapes(String.valueOf(curChar))+" ("+(int) curChar+") "+"at line "+input_stream.getEndLine()+" column "+input_stream.getEndColumn());
                    curPos=jjMoveStringLiteralDfa0_PHONY();
                    break;
                }
                if (jjmatchedKind!=0x7FFFFFFF) {
                    if (jjmatchedPos+1<curPos) {
                        if (trace_enabled) LOGGER.info("   Putting back "+(curPos-jjmatchedPos-1)+" characters into the input stream.");
                        input_stream.backup(curPos-jjmatchedPos-1);
                    }
                    if (trace_enabled) LOGGER.info("****** FOUND A "+tokenImage[jjmatchedKind]+" MATCH ("+ParseException.addEscapes(input_stream.getSuffix(jjmatchedPos+1))+") ******\n");
                    if ((jjtoToken[jjmatchedKind>>6]&(1L<<(jjmatchedKind&077)))!=0L) {
                        matchedToken=jjFillToken();
                        matchedToken=tokenHook(matchedToken);
                        matchedToken.specialToken=specialToken;
                        tokenLexicalActions(matchedToken);
                        jjmatchedKind=matchedToken.kind;
                        if (newLexicalStates[jjmatchedKind]!=null) {
                            switchTo(newLexicalStates[jjmatchedKind]);
                        }
                        return matchedToken;
                    }
                    else if ((jjtoSkip[jjmatchedKind>>6]&(1L<<(jjmatchedKind&077)))!=0L) {
                        if ((jjtoSpecial[jjmatchedKind>>6]&(1L<<(jjmatchedKind&077)))!=0L) {
                            matchedToken=jjFillToken();
                            matchedToken.setUnparsed(true);
                            if (specialToken==null) {
                                specialToken=matchedToken;
                            }
                            else {
                                matchedToken.specialToken=specialToken;
                                specialToken=(specialToken.next=matchedToken);
                            }
                            tokenLexicalActions(matchedToken);
                        }
                        else tokenLexicalActions(null);
                        if (newLexicalStates[jjmatchedKind]!=null) {
                            this.lexicalState=newLexicalStates[jjmatchedKind];
                        }
                        continue EOFLoop;
                    }
                    tokenLexicalActions(null);
                    doLexicalStateSwitch(jjmatchedKind);
                    curPos=0;
                    jjmatchedKind=0x7FFFFFFF;
                    int retval=input_stream.readChar();
                    if (retval>=0) {
                        curChar=(char) retval;
                        if (trace_enabled) LOGGER.info("<"+lexicalState+">"+"Current character : "+ParseException.addEscapes(String.valueOf(curChar))+" ("+(int) curChar+") "+"at line "+input_stream.getEndLine()+" column "+input_stream.getEndColumn());
                        continue;
                    }
                }
                int error_line=input_stream.getEndLine();
                int error_column=input_stream.getEndColumn();
                String error_after=null;
                //    input_stream.backup(1);
                error_after=curPos<=1?"":
                input_stream.getImage();
                Token invalidToken=new InvalidToken(""+curChar);
                invalidToken.specialToken=specialToken;
                invalidToken.setBeginLine(error_line);
                invalidToken.setEndLine(error_line);
                invalidToken.setBeginColumn(error_column);
                invalidToken.setEndColumn(error_column);
                return invalidToken;
            }
        }
    }

    void tokenLexicalActions(Token matchedToken) {
        //       int matchedKind = (matchedToken != null) ? matchedToken.kind : jjmatchedKind; // REVISIT
        matchedToken=null;
        switch(jjmatchedKind) {
            case 18:
            image.append(input_stream.getSuffix(matchedCharsLength+jjmatchedPos+1));
            input_stream.backup(1);
            break;
            default:
            break;
        }
    }

    private Token jjFillToken() {
        final Token t;
        final String curTokenImage;
        final int beginLine;
        final int endLine;
        final int beginColumn;
        final int endColumn;
        curTokenImage=input_stream.getImage();
        beginLine=input_stream.getBeginLine();
        beginColumn=input_stream.getBeginColumn();
        endLine=input_stream.getEndLine();
        endColumn=input_stream.getEndColumn();
        t=Token.newToken(jjmatchedKind,curTokenImage);
        t.beginLine=beginLine;
        t.endLine=endLine;
        t.beginColumn=beginColumn;
        t.endColumn=endColumn;
        t.setInputSource(this.inputSource);
        return t;
    }

    private void jjCheckNAdd(int state) {
        if (jjrounds[state]!=jjround) {
            jjstateSet[jjnewStateCnt++]=state;
            jjrounds[state]=jjround;
        }
    }

    private void jjAddStates(int start,int end) {
        do {
            jjstateSet[jjnewStateCnt++]=jjnextStates[start];
        }
        while (start++!=end);
    }

    private void jjCheckNAddTwoStates(int state1,int state2) {
        jjCheckNAdd(state1);
        jjCheckNAdd(state2);
    }

    private void jjCheckNAddStates(int start,int end) {
        do {
            jjCheckNAdd(jjnextStates[start]);
        }
        while (start++!=end);
    }

    private void jjCheckNAddStates(int start) {
        jjCheckNAdd(jjnextStates[start]);
        jjCheckNAdd(jjnextStates[start+1]);
    }

    private static boolean jjCanMove_0(int hiByte,int i1,int i2,long l1,long l2) {
        switch(hiByte) {
            case 0:
            return(jjbitVec2[i2]&l2)!=0L;
            case 2:
            return(jjbitVec3[i2]&l2)!=0L;
            case 3:
            return(jjbitVec4[i2]&l2)!=0L;
            case 4:
            return(jjbitVec5[i2]&l2)!=0L;
            case 5:
            return(jjbitVec6[i2]&l2)!=0L;
            case 6:
            return(jjbitVec7[i2]&l2)!=0L;
            case 7:
            return(jjbitVec8[i2]&l2)!=0L;
            case 9:
            return(jjbitVec9[i2]&l2)!=0L;
            case 10:
            return(jjbitVec10[i2]&l2)!=0L;
            case 11:
            return(jjbitVec11[i2]&l2)!=0L;
            case 12:
            return(jjbitVec12[i2]&l2)!=0L;
            case 13:
            return(jjbitVec13[i2]&l2)!=0L;
            case 14:
            return(jjbitVec14[i2]&l2)!=0L;
            case 15:
            return(jjbitVec15[i2]&l2)!=0L;
            case 16:
            return(jjbitVec16[i2]&l2)!=0L;
            case 17:
            return(jjbitVec17[i2]&l2)!=0L;
            case 18:
            return(jjbitVec18[i2]&l2)!=0L;
            case 19:
            return(jjbitVec19[i2]&l2)!=0L;
            case 20:
            return(jjbitVec20[i2]&l2)!=0L;
            case 22:
            return(jjbitVec21[i2]&l2)!=0L;
            case 23:
            return(jjbitVec22[i2]&l2)!=0L;
            case 24:
            return(jjbitVec23[i2]&l2)!=0L;
            case 30:
            return(jjbitVec24[i2]&l2)!=0L;
            case 31:
            return(jjbitVec25[i2]&l2)!=0L;
            case 32:
            return(jjbitVec26[i2]&l2)!=0L;
            case 33:
            return(jjbitVec27[i2]&l2)!=0L;
            case 48:
            return(jjbitVec28[i2]&l2)!=0L;
            case 49:
            return(jjbitVec29[i2]&l2)!=0L;
            case 77:
            return(jjbitVec30[i2]&l2)!=0L;
            case 159:
            return(jjbitVec31[i2]&l2)!=0L;
            case 164:
            return(jjbitVec32[i2]&l2)!=0L;
            case 215:
            return(jjbitVec33[i2]&l2)!=0L;
            case 250:
            return(jjbitVec34[i2]&l2)!=0L;
            case 251:
            return(jjbitVec35[i2]&l2)!=0L;
            case 253:
            return(jjbitVec36[i2]&l2)!=0L;
            case 254:
            return(jjbitVec37[i2]&l2)!=0L;
            case 255:
            return(jjbitVec38[i2]&l2)!=0L;
            default:
            if ((jjbitVec0[i1]&l1)!=0L) {
                return(jjbitVec1[i2]&l2)!=0L;
            }
            return false;
        }
    }

    private static boolean jjCanMove_1(int hiByte,int i1,int i2,long l1,long l2) {
        switch(hiByte) {
            case 0:
            return(jjbitVec39[i2]&l2)!=0L;
            case 2:
            return(jjbitVec3[i2]&l2)!=0L;
            case 3:
            return(jjbitVec40[i2]&l2)!=0L;
            case 4:
            return(jjbitVec41[i2]&l2)!=0L;
            case 5:
            return(jjbitVec42[i2]&l2)!=0L;
            case 6:
            return(jjbitVec43[i2]&l2)!=0L;
            case 7:
            return(jjbitVec44[i2]&l2)!=0L;
            case 9:
            return(jjbitVec45[i2]&l2)!=0L;
            case 10:
            return(jjbitVec46[i2]&l2)!=0L;
            case 11:
            return(jjbitVec47[i2]&l2)!=0L;
            case 12:
            return(jjbitVec48[i2]&l2)!=0L;
            case 13:
            return(jjbitVec49[i2]&l2)!=0L;
            case 14:
            return(jjbitVec50[i2]&l2)!=0L;
            case 15:
            return(jjbitVec51[i2]&l2)!=0L;
            case 16:
            return(jjbitVec52[i2]&l2)!=0L;
            case 17:
            return(jjbitVec17[i2]&l2)!=0L;
            case 18:
            return(jjbitVec18[i2]&l2)!=0L;
            case 19:
            return(jjbitVec53[i2]&l2)!=0L;
            case 20:
            return(jjbitVec20[i2]&l2)!=0L;
            case 22:
            return(jjbitVec21[i2]&l2)!=0L;
            case 23:
            return(jjbitVec54[i2]&l2)!=0L;
            case 24:
            return(jjbitVec55[i2]&l2)!=0L;
            case 30:
            return(jjbitVec24[i2]&l2)!=0L;
            case 31:
            return(jjbitVec25[i2]&l2)!=0L;
            case 32:
            return(jjbitVec56[i2]&l2)!=0L;
            case 33:
            return(jjbitVec27[i2]&l2)!=0L;
            case 48:
            return(jjbitVec57[i2]&l2)!=0L;
            case 49:
            return(jjbitVec29[i2]&l2)!=0L;
            case 77:
            return(jjbitVec30[i2]&l2)!=0L;
            case 159:
            return(jjbitVec31[i2]&l2)!=0L;
            case 164:
            return(jjbitVec32[i2]&l2)!=0L;
            case 215:
            return(jjbitVec33[i2]&l2)!=0L;
            case 250:
            return(jjbitVec34[i2]&l2)!=0L;
            case 251:
            return(jjbitVec58[i2]&l2)!=0L;
            case 253:
            return(jjbitVec36[i2]&l2)!=0L;
            case 254:
            return(jjbitVec59[i2]&l2)!=0L;
            case 255:
            return(jjbitVec60[i2]&l2)!=0L;
            default:
            if ((jjbitVec0[i1]&l1)!=0L) {
                return(jjbitVec1[i2]&l2)!=0L;
            }
            return false;
        }
    }

    private static boolean jjCanMove_2(int hiByte,int i1,int i2,long l1,long l2) {
        switch(hiByte) {
            case 0:
            return(jjbitVec62[i2]&l2)!=0L;
            default:
            if ((jjbitVec61[i1]&l1)!=0L) {
                return(jjbitVec1[i2]&l2)!=0L;
            }
            return false;
        }
    }

    private int jjStopAtPos(int pos,int kind) {
        jjmatchedKind=kind;
        jjmatchedPos=pos;
        if (trace_enabled) LOGGER.info("   No more string literal token matches are possible.");
        if (trace_enabled) LOGGER.info("   Currently matched the first "+(jjmatchedPos+1)+" characters as a "+tokenImage[jjmatchedKind]+" token.");
        return pos+1;
    }

    static final long[] jjbitVec0={0xfff0000000200002L,0xffffffffffffdfffL,0xfffff00f7fffffffL,0x12000000007fffffL};
    static final long[] jjbitVec1={0xffffffffffffffffL,0xffffffffffffffffL,0xffffffffffffffffL,0xffffffffffffffffL};
    static final long[] jjbitVec2={0x0L,0x0L,0x420043c00000000L,0xff7fffffff7fffffL};
    static final long[] jjbitVec3={0xffffcffffffffL,0xffffffffffff0000L,0xf9ff3fffffffffffL,0x401f00030003L};
    static final long[] jjbitVec4={0x0L,0x400000000000000L,0xfffffffbffffd740L,0xffffffcff7fffL};
    static final long[] jjbitVec5={0xffffffffffffffffL,0xffffffffffffffffL,0xfffffffffffff003L,0x33fffffffff199fL};
    static final long[] jjbitVec6={0xfffe000000000000L,0xfffffffe027fffffL,0xffL,0x707ffffff0000L};
    static final long[] jjbitVec7={0x7fffffe00000000L,0xfffe0000000007ffL,0xffffffffffffffffL,0x1c000060002fffffL};
    static final long[] jjbitVec8={0x1ffffffd0000L,0x0L,0x3fffffffffL,0x0L};
    static final long[] jjbitVec9={0x23ffffffffffffe0L,0x3ff010000L,0x3c5fdfffff99fe0L,0xf0003b0000000L};
    static final long[] jjbitVec10={0x36dfdfffff987e0L,0x1c00005e000000L,0x23edfdfffffbafe0L,0x100010000L};
    static final long[] jjbitVec11={0x23cdfdfffff99fe0L,0x3b0000000L,0x3bfc718d63dc7e0L,0x0L};
    static final long[] jjbitVec12={0x3effdfffffddfe0L,0x300000000L,0x3effdfffffddfe0L,0x340000000L};
    static final long[] jjbitVec13={0x3fffdfffffddfe0L,0x300000000L,0x2ffbfffffc7fffe0L,0x7fL};
    static final long[] jjbitVec14={0x800dfffffffffffeL,0x7fL,0x200decaefef02596L,0x3000005fL};
    static final long[] jjbitVec15={0x1L,0x7fffffffeffL,0xf00L,0x0L};
    static final long[] jjbitVec16={0x6fbffffffffL,0x3f0000L,0xffffffff00000000L,0x7fffffffff003fL};
    static final long[] jjbitVec17={0xffffffffffffffffL,0xffffffff83ffffffL,0xffffff07ffffffffL,0x3ffffffffffffffL};
    static final long[] jjbitVec18={0xffffffffffffff7fL,0xffffffff3d7f3d7fL,0x7f3d7fffffff3d7fL,0xffff7fffff7f7f3dL};
    static final long[] jjbitVec19={0xffffffff7f3d7fffL,0x7ffff7fL,0xffffffff00000000L,0x1fffffffffffffL};
    static final long[] jjbitVec20={0xfffffffffffffffeL,0xffffffffffffffffL,0xffffffffffffffffL,0xffffffffffffffffL};
    static final long[] jjbitVec21={0xffffffffffffffffL,0x7f9fffffffffffL,0xffffffff07fffffeL,0x7ffffffffffL};
    static final long[] jjbitVec22={0x0L,0x0L,0xfffffffffffffL,0x8000000L};
    static final long[] jjbitVec23={0xffffffff00000000L,0xffffffffffffffL,0x1ffffffffffL,0x0L};
    static final long[] jjbitVec24={0xffffffffffffffffL,0xffffffffffffffffL,0xffffffff0fffffffL,0x3ffffffffffffffL};
    static final long[] jjbitVec25={0xffffffff3f3fffffL,0x3fffffffaaff3f3fL,0x5fdfffffffffffffL,0x1fdc1fff0fcf1fdcL};
    static final long[] jjbitVec26={0x8000000000000000L,0x8000000000000001L,0xffff00000000L,0x0L};
    static final long[] jjbitVec27={0x3fbbd503e2ffc84L,0xffffffff00000000L,0xfL,0x0L};
    static final long[] jjbitVec28={0x73e03fe000000e0L,0xfffffffffffffffeL,0xfffffffe601fffffL,0x7fffffffffffffffL};
    static final long[] jjbitVec29={0xfffe1fffffffffe0L,0xffffffffffffffffL,0xffffff00007fffL,0x0L};
    static final long[] jjbitVec30={0xffffffffffffffffL,0xffffffffffffffffL,0x3fffffffffffffL,0x0L};
    static final long[] jjbitVec31={0xffffffffffffffffL,0xffffffffffffffffL,0x3fffffffffL,0x0L};
    static final long[] jjbitVec32={0xffffffffffffffffL,0xffffffffffffffffL,0x1fffL,0x0L};
    static final long[] jjbitVec33={0xffffffffffffffffL,0xffffffffffffffffL,0xfffffffffL,0x0L};
    static final long[] jjbitVec34={0x3fffffffffffL,0x0L,0x0L,0x0L};
    static final long[] jjbitVec35={0x5f7ffdffa0f8007fL,0xffffffffffffffdbL,0x3ffffffffffffL,0xfffffffffff80000L};
    static final long[] jjbitVec36={0x3fffffffffffffffL,0xffffffffffff0000L,0xfffffffffffcffffL,0xfff0000000000ffL};
    static final long[] jjbitVec37={0x18000000000000L,0xffd702000000e000L,0xffffffffffffffffL,0x1fffffffffffffffL};
    static final long[] jjbitVec38={0x87fffffe00000010L,0xffffffe007fffffeL,0x7fffffffffffffffL,0x631cfcfcfcL};
    static final long[] jjbitVec39={0x0L,0x0L,0x420043cffffffffL,0xff7fffffff7fffffL};
    static final long[] jjbitVec40={0xffffffffffffffffL,0x400000700007fffL,0xfffffffbffffd740L,0xffffffcff7fffL};
    static final long[] jjbitVec41={0xffffffffffffffffL,0xffffffffffffffffL,0xfffffffffffff07bL,0x33fffffffff199fL};
    static final long[] jjbitVec42={0xfffe000000000000L,0xfffffffe027fffffL,0xbbfffffbfffe00ffL,0x707ffffff0016L};
    static final long[] jjbitVec43={0x7fffffe00000000L,0xffff03ff003fffffL,0xffffffffffffffffL,0x1fff3dff9fefffffL};
    static final long[] jjbitVec44={0xffff1fffffff8000L,0x7ffL,0x1ffffffffffffL,0x0L};
    static final long[] jjbitVec45={0xf3ffffffffffffeeL,0xffcfff1f3fffL,0xd3c5fdfffff99feeL,0xfffcfb080399fL};
    static final long[] jjbitVec46={0xd36dfdfffff987e4L,0x1fffc05e003987L,0xf3edfdfffffbafeeL,0xffc100013bbfL};
    static final long[] jjbitVec47={0xf3cdfdfffff99feeL,0xffc3b0c0398fL,0xc3bfc718d63dc7ecL,0xff8000803dc7L};
    static final long[] jjbitVec48={0xc3effdfffffddfeeL,0xffc300603ddfL,0xc3effdfffffddfecL,0xffc340603ddfL};
    static final long[] jjbitVec49={0xc3fffdfffffddfecL,0xffc300803dcfL,0x2ffbfffffc7fffecL,0xc0000ff5f847fL};
    static final long[] jjbitVec50={0x87fffffffffffffeL,0x3ff7fffL,0x3bffecaefef02596L,0x33ff3f5fL};
    static final long[] jjbitVec51={0xc2a003ff03000001L,0xfffe07fffffffeffL,0x1ffffffffeff0fdfL,0x40L};
    static final long[] jjbitVec52={0x3c7f6fbffffffffL,0x3ff03ffL,0xffffffff00000000L,0x7fffffffff003fL};
    static final long[] jjbitVec53={0xffffffff7f3d7fffL,0x3fe0007ffff7fL,0xffffffff00000000L,0x1fffffffffffffL};
    static final long[] jjbitVec54={0x0L,0x0L,0xffffffffffffffffL,0x3ff080fffffL};
    static final long[] jjbitVec55={0xffffffff03ff7800L,0xffffffffffffffL,0x3ffffffffffL,0x0L};
    static final long[] jjbitVec56={0x80007c000000f000L,0x8000fc0000000001L,0xffff00000000L,0x21fff0000L};
    static final long[] jjbitVec57={0x73efffe000000e0L,0xfffffffffffffffeL,0xfffffffe661fffffL,0x7fffffffffffffffL};
    static final long[] jjbitVec58={0x5f7ffdffe0f8007fL,0xffffffffffffffdbL,0x3ffffffffffffL,0xfffffffffff80000L};
    static final long[] jjbitVec59={0x18000f00000000L,0xffd702000000e000L,0xffffffffffffffffL,0x9fffffffffffffffL};
    static final long[] jjbitVec60={0x87fffffe03ff0010L,0xffffffe007fffffeL,0x7fffffffffffffffL,0xe0000631cfcfcfcL};
    static final long[] jjbitVec61={0xfffffffffffffffeL,0xffffffffffffffffL,0xffffffffffffffffL,0xffffffffffffffffL};
    static final long[] jjbitVec62={0x0L,0x0L,0xffffffffffffffffL,0xffffffffffffffffL};
    private int jjStartNfa_JAVA(int pos,long active0,long active1,long active2) {
        return jjMoveNfa_JAVA(jjStopStringLiteralDfa_JAVA(pos,active0,active1,active2),pos+1);
    }

    private final int jjStopStringLiteralDfa_JAVA(int pos,long active0,long active1,long active2) {
        if (trace_enabled) LOGGER.info("   No more string literal token matches are possible.");
        switch(pos) {
            case 0:
            if ((active0&0x20L)!=0L) {
                jjmatchedKind=141;
                return 105;
            }
            if ((active0&0x4000L)!=0L) return 62;
            if ((active0&0xffffffffff0020d0L)!=0L||(active1&0x1fffL)!=0L) {
                jjmatchedKind=141;
                return 99;
            }
            if ((active0&0xa0000L)!=0L||(active1&0x8040000000000000L)!=0L) return 67;
            if ((active1&0x800000000L)!=0L||(active2&0x200L)!=0L) return 70;
            if ((active0&0x1000L)!=0L) {
                jjmatchedKind=141;
                return 17;
            }
            if ((active0&0x800L)!=0L) {
                jjmatchedKind=141;
                return 42;
            }
            return-1;
            case 1:
            if ((active0&0x80000L)!=0L) return 65;
            if ((active0&0x1000L)!=0L) {
                if (jjmatchedPos!=1) {
                    jjmatchedKind=141;
                    jjmatchedPos=1;
                }
                return 16;
            }
            if ((active0&0xffff7fcfff0028f0L)!=0L||(active1&0x1fffL)!=0L) {
                if (jjmatchedPos!=1) {
                    jjmatchedKind=141;
                    jjmatchedPos=1;
                }
                return 99;
            }
            if ((active0&0x803000000000L)!=0L) return 99;
            return-1;
            case 2:
            if ((active0&0x1000L)!=0L) {
                if (jjmatchedPos!=2) {
                    jjmatchedKind=141;
                    jjmatchedPos=2;
                }
                return 15;
            }
            if ((active0&0xff675fefff0008f0L)!=0L||(active1&0x1dffL)!=0L) {
                if (jjmatchedPos!=2) {
                    jjmatchedKind=141;
                    jjmatchedPos=2;
                }
                return 99;
            }
            if ((active0&0x98200000002000L)!=0L||(active1&0x200L)!=0L) return 99;
            return-1;
            case 3:
            if ((active0&0x1000L)!=0L) {
                jjmatchedKind=141;
                jjmatchedPos=3;
                return 231;
            }
            if ((active0&0xfe571f2f4f0000f0L)!=0L||(active1&0x18efL)!=0L) {
                jjmatchedKind=141;
                jjmatchedPos=3;
                return 99;
            }
            if ((active0&0x12040c0b0000800L)!=0L||(active1&0x510L)!=0L) return 99;
            return-1;
            case 4:
            if ((active0&0x1000L)!=0L) {
                if (jjmatchedPos!=4) {
                    jjmatchedKind=8;
                    jjmatchedPos=4;
                }
                return 99;
            }
            if ((active0&0xbe57012c070000f0L)!=0L||(active1&0x88dL)!=0L) {
                if (jjmatchedPos!=4) {
                    jjmatchedKind=141;
                    jjmatchedPos=4;
                }
                return 99;
            }
            if ((active0&0x40001e0348000000L)!=0L||(active1&0x1062L)!=0L) return 99;
            return-1;
            case 5:
            if ((active0&0xe15090c050010f0L)!=0L||(active1&0x889L)!=0L) {
                jjmatchedKind=141;
                jjmatchedPos=5;
                return 99;
            }
            if ((active0&0xb042002002000000L)!=0L||(active1&0x44L)!=0L) return 99;
            return-1;
            case 6:
            if ((active0&0x8150004010010f0L)!=0L||(active1&0x889L)!=0L) {
                jjmatchedKind=141;
                jjmatchedPos=6;
                return 99;
            }
            if ((active0&0x600090804000000L)!=0L) return 99;
            return-1;
            case 7:
            if ((active0&0x8150000000010f0L)!=0L||(active1&0x88L)!=0L) {
                jjmatchedKind=141;
                jjmatchedPos=7;
                return 99;
            }
            if ((active0&0x401000000L)!=0L||(active1&0x801L)!=0L) return 99;
            return-1;
            case 8:
            if ((active0&0x50000000010e0L)!=0L||(active1&0x8L)!=0L) {
                jjmatchedKind=141;
                jjmatchedPos=8;
                return 99;
            }
            if ((active0&0x810000000000010L)!=0L||(active1&0x80L)!=0L) return 99;
            return-1;
            case 9:
            if ((active0&0x1060L)!=0L||(active1&0x8L)!=0L) {
                jjmatchedKind=141;
                jjmatchedPos=9;
                return 99;
            }
            if ((active0&0x5000000000080L)!=0L) return 99;
            return-1;
            case 10:
            if ((active0&0x1040L)!=0L||(active1&0x8L)!=0L) {
                jjmatchedKind=141;
                jjmatchedPos=10;
                return 99;
            }
            if ((active0&0x20L)!=0L) return 99;
            return-1;
            case 11:
            if ((active0&0x1000L)!=0L) {
                jjmatchedKind=141;
                jjmatchedPos=11;
                return 99;
            }
            if ((active0&0x40L)!=0L||(active1&0x8L)!=0L) return 99;
            return-1;
            case 12:
            if ((active0&0x1000L)!=0L) {
                jjmatchedKind=141;
                jjmatchedPos=12;
                return 99;
            }
            return-1;
            case 13:
            if ((active0&0x1000L)!=0L) {
                jjmatchedKind=141;
                jjmatchedPos=13;
                return 99;
            }
            return-1;
            case 14:
            if ((active0&0x1000L)!=0L) return 99;
            return-1;
            default:
            return-1;
        }
    }

    private int jjStartNfaWithStates_JAVA(int pos,int kind,int state) {
        jjmatchedKind=kind;
        jjmatchedPos=pos;
        if (trace_enabled) LOGGER.info("   No more string literal token matches are possible.");
        if (trace_enabled) LOGGER.info("   Currently matched the first "+(jjmatchedPos+1)+" characters as a "+tokenImage[jjmatchedKind]+" token.");
        int retval=input_stream.readChar();
        if (retval>=0) {
            curChar=(char) retval;
        }
        else {
            return pos+1;
        }
        if (trace_enabled) LOGGER.info(""+"<JAVA>"+"Current character : "+ParseException.addEscapes(String.valueOf(curChar))+" ("+(int) curChar+") "+"at line "+input_stream.getEndLine()+" column "+input_stream.getEndColumn());
        return jjMoveNfa_JAVA(state,pos+1);
    }

    private int jjMoveStringLiteralDfa0_JAVA() {
        switch(curChar) {
            case 33:
            jjmatchedKind=103;
            return jjMoveStringLiteralDfa1_JAVA(0x0L,0x400000000000L,0x0L);
            case 35:
            return jjStartNfaWithStates_JAVA(0,14,62);
            case 37:
            jjmatchedKind=122;
            return jjMoveStringLiteralDfa1_JAVA(0x0L,0x0L,0x8L);
            case 38:
            jjmatchedKind=119;
            return jjMoveStringLiteralDfa1_JAVA(0x0L,0x1000000000000L,0x1L);
            case 40:
            return jjStopAtPos(0,91);
            case 41:
            return jjStopAtPos(0,92);
            case 42:
            jjmatchedKind=117;
            return jjMoveStringLiteralDfa1_JAVA(0x0L,0x4000000000000000L,0x0L);
            case 43:
            jjmatchedKind=115;
            return jjMoveStringLiteralDfa1_JAVA(0x0L,0x1002000000000000L,0x0L);
            case 44:
            return jjStopAtPos(0,98);
            case 45:
            jjmatchedKind=116;
            return jjMoveStringLiteralDfa1_JAVA(0x0L,0x2004000000000000L,0x80L);
            case 46:
            jjmatchedKind=99;
            return jjMoveStringLiteralDfa1_JAVA(0x0L,0x0L,0x200L);
            case 47:
            jjmatchedKind=118;
            return jjMoveStringLiteralDfa1_JAVA(0xa0000L,0x8000000000000000L,0x0L);
            case 58:
            jjmatchedKind=106;
            return jjMoveStringLiteralDfa1_JAVA(0x0L,0x0L,0x100L);
            case 59:
            return jjStopAtPos(0,97);
            case 60:
            jjmatchedKind=102;
            return jjMoveStringLiteralDfa1_JAVA(0x0L,0x800100000000000L,0x10L);
            case 61:
            jjmatchedKind=100;
            return jjMoveStringLiteralDfa1_JAVA(0x0L,0x80000000000L,0x0L);
            case 62:
            jjmatchedKind=101;
            return jjMoveStringLiteralDfa1_JAVA(0x0L,0x200000000000L,0x60L);
            case 63:
            return jjStopAtPos(0,105);
            case 64:
            return jjStopAtPos(0,138);
            case 69:
            return jjMoveStringLiteralDfa1_JAVA(0x2000L,0x0L,0x0L);
            case 73:
            return jjMoveStringLiteralDfa1_JAVA(0x20L,0x0L,0x0L);
            case 76:
            return jjMoveStringLiteralDfa1_JAVA(0x10L,0x0L,0x0L);
            case 80:
            return jjMoveStringLiteralDfa1_JAVA(0xc0L,0x0L,0x0L);
            case 83:
            return jjMoveStringLiteralDfa1_JAVA(0x800L,0x0L,0x0L);
            case 84:
            return jjMoveStringLiteralDfa1_JAVA(0x1000L,0x0L,0x0L);
            case 91:
            return jjStopAtPos(0,95);
            case 93:
            return jjStopAtPos(0,96);
            case 94:
            jjmatchedKind=121;
            return jjMoveStringLiteralDfa1_JAVA(0x0L,0x0L,0x4L);
            case 97:
            return jjMoveStringLiteralDfa1_JAVA(0x3000000L,0x0L,0x0L);
            case 98:
            return jjMoveStringLiteralDfa1_JAVA(0x1c000000L,0x0L,0x0L);
            case 99:
            return jjMoveStringLiteralDfa1_JAVA(0x7e0000000L,0x0L,0x0L);
            case 100:
            return jjMoveStringLiteralDfa1_JAVA(0x3800000000L,0x0L,0x0L);
            case 101:
            return jjMoveStringLiteralDfa1_JAVA(0x1c000000000L,0x0L,0x0L);
            case 102:
            return jjMoveStringLiteralDfa1_JAVA(0x3e0000000000L,0x0L,0x0L);
            case 103:
            return jjMoveStringLiteralDfa1_JAVA(0x400000000000L,0x0L,0x0L);
            case 105:
            return jjMoveStringLiteralDfa1_JAVA(0x1f800000000000L,0x0L,0x0L);
            case 108:
            return jjMoveStringLiteralDfa1_JAVA(0x20000000000000L,0x0L,0x0L);
            case 110:
            return jjMoveStringLiteralDfa1_JAVA(0x1c0000000000000L,0x0L,0x0L);
            case 112:
            return jjMoveStringLiteralDfa1_JAVA(0x1e00000000000000L,0x0L,0x0L);
            case 114:
            return jjMoveStringLiteralDfa1_JAVA(0x2000000000000000L,0x0L,0x0L);
            case 115:
            return jjMoveStringLiteralDfa1_JAVA(0xc000000000000000L,0xfL,0x0L);
            case 116:
            return jjMoveStringLiteralDfa1_JAVA(0x0L,0x3f0L,0x0L);
            case 118:
            return jjMoveStringLiteralDfa1_JAVA(0x0L,0xc00L,0x0L);
            case 119:
            return jjMoveStringLiteralDfa1_JAVA(0x0L,0x1000L,0x0L);
            case 123:
            return jjStopAtPos(0,93);
            case 124:
            jjmatchedKind=120;
            return jjMoveStringLiteralDfa1_JAVA(0x0L,0x800000000000L,0x2L);
            case 125:
            return jjStopAtPos(0,94);
            case 126:
            return jjStopAtPos(0,104);
            default:
            if (trace_enabled) LOGGER.info("   No string literal matches possible.");
            return jjMoveNfa_JAVA(6,0);
        }
    }

    private int jjMoveStringLiteralDfa1_JAVA(long active0,long active1,long active2) {
        int retval=input_stream.readChar();
        if (retval>=0) {
            curChar=(char) retval;
        }
        else {
            jjStopStringLiteralDfa_JAVA(0,active0,active1,active2);
            if (trace_enabled&&jjmatchedKind!=0&&jjmatchedKind!=0x7fffffff) {
                LOGGER.info("    Currently matched the first "+(jjmatchedPos+1)+" characters as a "+tokenImage[jjmatchedKind]+" token. ");
            }
            return 1;
        }
        if (trace_enabled) LOGGER.info(""+"<JAVA>"+"Current character : "+ParseException.addEscapes(String.valueOf(curChar))+" ("+(int) curChar+") at line "+input_stream.getEndLine()+" column "+input_stream.getEndColumn());
        switch(curChar) {
            case 38:
            if ((active1&0x1000000000000L)!=0L) return jjStopAtPos(1,112);
            break;
            case 42:
            if ((active0&0x80000L)!=0L) return jjStartNfaWithStates_JAVA(1,19,65);
            break;
            case 43:
            if ((active1&0x2000000000000L)!=0L) return jjStopAtPos(1,113);
            break;
            case 45:
            if ((active1&0x4000000000000L)!=0L) return jjStopAtPos(1,114);
            break;
            case 46:
            return jjMoveStringLiteralDfa2_JAVA(active0,0x0L,active1,0x0L,active2,0x200L);
            case 47:
            if ((active0&0x20000L)!=0L) return jjStopAtPos(1,17);
            break;
            case 58:
            if ((active2&0x100L)!=0L) return jjStopAtPos(1,136);
            break;
            case 60:
            if ((active1&0x800000000000000L)!=0L) {
                jjmatchedKind=123;
                jjmatchedPos=1;
            }
            return jjMoveStringLiteralDfa2_JAVA(active0,0x0L,active1,0x0L,active2,0x10L);
            case 61:
            if ((active1&0x80000000000L)!=0L) return jjStopAtPos(1,107);
            else if ((active1&0x100000000000L)!=0L) return jjStopAtPos(1,108);
            else if ((active1&0x200000000000L)!=0L) return jjStopAtPos(1,109);
            else if ((active1&0x400000000000L)!=0L) return jjStopAtPos(1,110);
            else if ((active1&0x1000000000000000L)!=0L) return jjStopAtPos(1,124);
            else if ((active1&0x2000000000000000L)!=0L) return jjStopAtPos(1,125);
            else if ((active1&0x4000000000000000L)!=0L) return jjStopAtPos(1,126);
            else if ((active1&0x8000000000000000L)!=0L) return jjStopAtPos(1,127);
            else if ((active2&0x1L)!=0L) return jjStopAtPos(1,128);
            else if ((active2&0x2L)!=0L) return jjStopAtPos(1,129);
            else if ((active2&0x4L)!=0L) return jjStopAtPos(1,130);
            else if ((active2&0x8L)!=0L) return jjStopAtPos(1,131);
            break;
            case 62:
            if ((active2&0x80L)!=0L) return jjStopAtPos(1,135);
            return jjMoveStringLiteralDfa2_JAVA(active0,0x0L,active1,0x0L,active2,0x60L);
            case 65:
            return jjMoveStringLiteralDfa2_JAVA(active0,0xc0L,active1,0x0L,active2,0x0L);
            case 71:
            return jjMoveStringLiteralDfa2_JAVA(active0,0x20L,active1,0x0L,active2,0x0L);
            case 75:
            return jjMoveStringLiteralDfa2_JAVA(active0,0x800L,active1,0x0L,active2,0x0L);
            case 79:
            return jjMoveStringLiteralDfa2_JAVA(active0,0x3010L,active1,0x0L,active2,0x0L);
            case 97:
            return jjMoveStringLiteralDfa2_JAVA(active0,0x240020060000000L,active1,0x0L,active2,0x0L);
            case 98:
            return jjMoveStringLiteralDfa2_JAVA(active0,0x1000000L,active1,0x0L,active2,0x0L);
            case 101:
            return jjMoveStringLiteralDfa2_JAVA(active0,0x2080000800000000L,active1,0x0L,active2,0x0L);
            case 102:
            if ((active0&0x800000000000L)!=0L) return jjStartNfaWithStates_JAVA(1,47,99);
            break;
            case 104:
            return jjMoveStringLiteralDfa2_JAVA(active0,0x4000000080000000L,active1,0x1070L,active2,0x0L);
            case 105:
            return jjMoveStringLiteralDfa2_JAVA(active0,0xc0000000000L,active1,0x0L,active2,0x0L);
            case 108:
            return jjMoveStringLiteralDfa2_JAVA(active0,0x104100000000L,active1,0x0L,active2,0x0L);
            case 109:
            return jjMoveStringLiteralDfa2_JAVA(active0,0x3000000000000L,active1,0x0L,active2,0x0L);
            case 110:
            return jjMoveStringLiteralDfa2_JAVA(active0,0x1c008000000000L,active1,0x0L,active2,0x0L);
            case 111:
            if ((active0&0x1000000000L)!=0L) {
                jjmatchedKind=36;
                jjmatchedPos=1;
            }
            return jjMoveStringLiteralDfa2_JAVA(active0,0x20602604000000L,active1,0xc00L,active2,0x0L);
            case 114:
            return jjMoveStringLiteralDfa2_JAVA(active0,0xc00000008000000L,active1,0x380L,active2,0x0L);
            case 115:
            return jjMoveStringLiteralDfa2_JAVA(active0,0x2000000L,active1,0x0L,active2,0x0L);
            case 116:
            return jjMoveStringLiteralDfa2_JAVA(active0,0x8000000000000000L,active1,0x1L,active2,0x0L);
            case 117:
            return jjMoveStringLiteralDfa2_JAVA(active0,0x1100000000000000L,active1,0x2L,active2,0x0L);
            case 119:
            return jjMoveStringLiteralDfa2_JAVA(active0,0x0L,active1,0x4L,active2,0x0L);
            case 120:
            return jjMoveStringLiteralDfa2_JAVA(active0,0x10000000000L,active1,0x0L,active2,0x0L);
            case 121:
            return jjMoveStringLiteralDfa2_JAVA(active0,0x10000000L,active1,0x8L,active2,0x0L);
            case 124:
            if ((active1&0x800000000000L)!=0L) return jjStopAtPos(1,111);
            break;
            default:
            if (trace_enabled) LOGGER.info("   No string literal matches possible.");
            break;
        }
        return jjStartNfa_JAVA(0,active0,active1,active2);
    }

    private int jjMoveStringLiteralDfa2_JAVA(long old0,long active0,long old1,long active1,long old2,long active2) {
        active0=active0&old0;
        active1=active1&old1;
        active2=active2&old2;
        if ((active0|active1|active2)==0L) return jjStartNfa_JAVA(0,old0,old1,old2);
        int retval=input_stream.readChar();
        if (retval>=0) {
            curChar=(char) retval;
        }
        else {
            jjStopStringLiteralDfa_JAVA(1,active0,active1,active2);
            if (trace_enabled&&jjmatchedKind!=0&&jjmatchedKind!=0x7fffffff) {
                LOGGER.info("    Currently matched the first "+(jjmatchedPos+1)+" characters as a "+tokenImage[jjmatchedKind]+" token. ");
            }
            return 2;
        }
        if (trace_enabled) LOGGER.info(""+"<JAVA>"+"Current character : "+ParseException.addEscapes(String.valueOf(curChar))+" ("+(int) curChar+") at line "+input_stream.getEndLine()+" column "+input_stream.getEndColumn());
        switch(curChar) {
            case 46:
            if ((active2&0x200L)!=0L) return jjStopAtPos(2,137);
            break;
            case 61:
            if ((active2&0x10L)!=0L) return jjStopAtPos(2,132);
            else if ((active2&0x20L)!=0L) return jjStopAtPos(2,133);
            break;
            case 62:
            return jjMoveStringLiteralDfa3_JAVA(active0,0x0L,active1,0x0L,active2,0x40L);
            case 70:
            if ((active0&0x2000L)!=0L) return jjStartNfaWithStates_JAVA(2,13,99);
            break;
            case 73:
            return jjMoveStringLiteralDfa3_JAVA(active0,0x800L,active1,0x0L,active2,0x0L);
            case 75:
            return jjMoveStringLiteralDfa3_JAVA(active0,0x1000L,active1,0x0L,active2,0x0L);
            case 78:
            return jjMoveStringLiteralDfa3_JAVA(active0,0x20L,active1,0x0L,active2,0x0L);
            case 79:
            return jjMoveStringLiteralDfa3_JAVA(active0,0x10L,active1,0x0L,active2,0x0L);
            case 82:
            return jjMoveStringLiteralDfa3_JAVA(active0,0xc0L,active1,0x0L,active2,0x0L);
            case 97:
            return jjMoveStringLiteralDfa3_JAVA(active0,0x8000000180000000L,active1,0x80L,active2,0x0L);
            case 98:
            return jjMoveStringLiteralDfa3_JAVA(active0,0x1000000000000000L,active1,0x0L,active2,0x0L);
            case 99:
            return jjMoveStringLiteralDfa3_JAVA(active0,0x200000000000000L,active1,0x0L,active2,0x0L);
            case 101:
            return jjMoveStringLiteralDfa3_JAVA(active0,0x8000000L,active1,0x0L,active2,0x0L);
            case 102:
            return jjMoveStringLiteralDfa3_JAVA(active0,0x800000000L,active1,0x0L,active2,0x0L);
            case 105:
            return jjMoveStringLiteralDfa3_JAVA(active0,0x400000000000000L,active1,0x1414L,active2,0x0L);
            case 108:
            return jjMoveStringLiteralDfa3_JAVA(active0,0x100020000000000L,active1,0x800L,active2,0x0L);
            case 110:
            return jjMoveStringLiteralDfa3_JAVA(active0,0x200c0600000000L,active1,0x8L,active2,0x0L);
            case 111:
            return jjMoveStringLiteralDfa3_JAVA(active0,0x4800100004000000L,active1,0x0L,active2,0x0L);
            case 112:
            return jjMoveStringLiteralDfa3_JAVA(active0,0x3000000000000L,active1,0x2L,active2,0x0L);
            case 114:
            if ((active0&0x200000000000L)!=0L) return jjStartNfaWithStates_JAVA(2,45,99);
            return jjMoveStringLiteralDfa3_JAVA(active0,0x0L,active1,0x61L,active2,0x0L);
            case 115:
            return jjMoveStringLiteralDfa3_JAVA(active0,0x4004023000000L,active1,0x0L,active2,0x0L);
            case 116:
            if ((active0&0x8000000000000L)!=0L) {
                jjmatchedKind=51;
                jjmatchedPos=2;
            }
            return jjMoveStringLiteralDfa3_JAVA(active0,0x2050410050000000L,active1,0x0L,active2,0x0L);
            case 117:
            return jjMoveStringLiteralDfa3_JAVA(active0,0xa000000000L,active1,0x100L,active2,0x0L);
            case 119:
            if ((active0&0x80000000000000L)!=0L) return jjStartNfaWithStates_JAVA(2,55,99);
            break;
            case 121:
            if ((active1&0x200L)!=0L) return jjStartNfaWithStates_JAVA(2,73,99);
            break;
            default:
            if (trace_enabled) LOGGER.info("   No string literal matches possible.");
            break;
        }
        return jjStartNfa_JAVA(1,active0,active1,active2);
    }

    private int jjMoveStringLiteralDfa3_JAVA(long old0,long active0,long old1,long active1,long old2,long active2) {
        active0=active0&old0;
        active1=active1&old1;
        active2=active2&old2;
        if ((active0|active1|active2)==0L) return jjStartNfa_JAVA(1,old0,old1,old2);
        int retval=input_stream.readChar();
        if (retval>=0) {
            curChar=(char) retval;
        }
        else {
            jjStopStringLiteralDfa_JAVA(2,active0,active1,active2);
            if (trace_enabled&&jjmatchedKind!=0&&jjmatchedKind!=0x7fffffff) {
                LOGGER.info("    Currently matched the first "+(jjmatchedPos+1)+" characters as a "+tokenImage[jjmatchedKind]+" token. ");
            }
            return 3;
        }
        if (trace_enabled) LOGGER.info(""+"<JAVA>"+"Current character : "+ParseException.addEscapes(String.valueOf(curChar))+" ("+(int) curChar+") at line "+input_stream.getEndLine()+" column "+input_stream.getEndColumn());
        switch(curChar) {
            case 61:
            if ((active2&0x40L)!=0L) return jjStopAtPos(3,134);
            break;
            case 69:
            return jjMoveStringLiteralDfa4_JAVA(active0,0x1000L,active1,0x0L,active2,0x0L);
            case 75:
            return jjMoveStringLiteralDfa4_JAVA(active0,0x10L,active1,0x0L,active2,0x0L);
            case 79:
            return jjMoveStringLiteralDfa4_JAVA(active0,0x20L,active1,0x0L,active2,0x0L);
            case 80:
            if ((active0&0x800L)!=0L) return jjStartNfaWithStates_JAVA(3,11,99);
            break;
            case 83:
            return jjMoveStringLiteralDfa4_JAVA(active0,0xc0L,active1,0x0L,active2,0x0L);
            case 97:
            return jjMoveStringLiteralDfa4_JAVA(active0,0x1c0808000000L,active1,0x800L,active2,0x0L);
            case 98:
            return jjMoveStringLiteralDfa4_JAVA(active0,0x2000000000L,active1,0x0L,active2,0x0L);
            case 99:
            return jjMoveStringLiteralDfa4_JAVA(active0,0x40000000L,active1,0x8L,active2,0x0L);
            case 100:
            if ((active1&0x400L)!=0L) return jjStartNfaWithStates_JAVA(3,74,99);
            break;
            case 101:
            if ((active0&0x10000000L)!=0L) return jjStartNfaWithStates_JAVA(3,28,99);
            else if ((active0&0x20000000L)!=0L) return jjStartNfaWithStates_JAVA(3,29,99);
            else if ((active0&0x4000000000L)!=0L) return jjStartNfaWithStates_JAVA(3,38,99);
            else if ((active1&0x100L)!=0L) return jjStartNfaWithStates_JAVA(3,72,99);
            return jjMoveStringLiteralDfa4_JAVA(active0,0x10010002000000L,active1,0x2L,active2,0x0L);
            case 103:
            if ((active0&0x20000000000000L)!=0L) return jjStartNfaWithStates_JAVA(3,53,99);
            break;
            case 105:
            return jjMoveStringLiteralDfa4_JAVA(active0,0x40000000000000L,active1,0x1L,active2,0x0L);
            case 107:
            return jjMoveStringLiteralDfa4_JAVA(active0,0x200000000000000L,active1,0x0L,active2,0x0L);
            case 108:
            if ((active0&0x100000000000000L)!=0L) return jjStartNfaWithStates_JAVA(3,56,99);
            return jjMoveStringLiteralDfa4_JAVA(active0,0x1001000004000000L,active1,0x1000L,active2,0x0L);
            case 109:
            if ((active0&0x8000000000L)!=0L) return jjStartNfaWithStates_JAVA(3,39,99);
            break;
            case 110:
            return jjMoveStringLiteralDfa4_JAVA(active0,0x0L,active1,0x80L,active2,0x0L);
            case 111:
            if ((active0&0x400000000000L)!=0L) return jjStartNfaWithStates_JAVA(3,46,99);
            return jjMoveStringLiteralDfa4_JAVA(active0,0x2000000000000L,active1,0x60L,active2,0x0L);
            case 114:
            if ((active0&0x80000000L)!=0L) return jjStartNfaWithStates_JAVA(3,31,99);
            return jjMoveStringLiteralDfa4_JAVA(active0,0x4000000000000000L,active1,0x0L,active2,0x0L);
            case 115:
            if ((active1&0x10L)!=0L) return jjStartNfaWithStates_JAVA(3,68,99);
            return jjMoveStringLiteralDfa4_JAVA(active0,0x20300000000L,active1,0x0L,active2,0x0L);
            case 116:
            return jjMoveStringLiteralDfa4_JAVA(active0,0x8804000401000000L,active1,0x4L,active2,0x0L);
            case 117:
            return jjMoveStringLiteralDfa4_JAVA(active0,0x2000000000000000L,active1,0x0L,active2,0x0L);
            case 118:
            return jjMoveStringLiteralDfa4_JAVA(active0,0x400000000000000L,active1,0x0L,active2,0x0L);
            default:
            if (trace_enabled) LOGGER.info("   No string literal matches possible.");
            break;
        }
        return jjStartNfa_JAVA(2,active0,active1,active2);
    }

    private int jjMoveStringLiteralDfa4_JAVA(long old0,long active0,long old1,long active1,long old2,long active2) {
        active0=active0&old0;
        active1=active1&old1;
        active2=active2&old2;
        if ((active0|active1|active2)==0L) return jjStartNfa_JAVA(2,old0,old1,old2);
        int retval=input_stream.readChar();
        if (retval>=0) {
            curChar=(char) retval;
        }
        else {
            jjStopStringLiteralDfa_JAVA(3,active0,active1,0L);
            if (trace_enabled&&jjmatchedKind!=0&&jjmatchedKind!=0x7fffffff) {
                LOGGER.info("    Currently matched the first "+(jjmatchedPos+1)+" characters as a "+tokenImage[jjmatchedKind]+" token. ");
            }
            return 4;
        }
        if (trace_enabled) LOGGER.info(""+"<JAVA>"+"Current character : "+ParseException.addEscapes(String.valueOf(curChar))+" ("+(int) curChar+") at line "+input_stream.getEndLine()+" column "+input_stream.getEndColumn());
        switch(curChar) {
            case 65:
            return jjMoveStringLiteralDfa5_JAVA(active0,0x10L,active1,0x0L);
            case 69:
            return jjMoveStringLiteralDfa5_JAVA(active0,0xc0L,active1,0x0L);
            case 78:
            return jjMoveStringLiteralDfa5_JAVA(active0,0x1000L,active1,0x0L);
            case 82:
            return jjMoveStringLiteralDfa5_JAVA(active0,0x20L,active1,0x0L);
            case 97:
            return jjMoveStringLiteralDfa5_JAVA(active0,0x604000000000000L,active1,0x0L);
            case 99:
            return jjMoveStringLiteralDfa5_JAVA(active0,0x0L,active1,0x5L);
            case 101:
            if ((active0&0x20000000000L)!=0L) return jjStartNfaWithStates_JAVA(4,41,99);
            else if ((active1&0x1000L)!=0L) return jjStartNfaWithStates_JAVA(4,76,99);
            return jjMoveStringLiteralDfa5_JAVA(active0,0x801000004000000L,active1,0x0L);
            case 104:
            if ((active0&0x40000000L)!=0L) return jjStartNfaWithStates_JAVA(4,30,99);
            return jjMoveStringLiteralDfa5_JAVA(active0,0x0L,active1,0x8L);
            case 105:
            return jjMoveStringLiteralDfa5_JAVA(active0,0x9000000400000000L,active1,0x0L);
            case 107:
            if ((active0&0x8000000L)!=0L) return jjStartNfaWithStates_JAVA(4,27,99);
            break;
            case 108:
            if ((active0&0x40000000000L)!=0L) {
                jjmatchedKind=42;
                jjmatchedPos=4;
            }
            return jjMoveStringLiteralDfa5_JAVA(active0,0x82000000000L,active1,0x0L);
            case 110:
            return jjMoveStringLiteralDfa5_JAVA(active0,0x10000000000L,active1,0x0L);
            case 114:
            if ((active1&0x2L)!=0L) return jjStartNfaWithStates_JAVA(4,65,99);
            return jjMoveStringLiteralDfa5_JAVA(active0,0x2012000003000000L,active1,0x0L);
            case 115:
            if ((active0&0x100000000L)!=0L) return jjStartNfaWithStates_JAVA(4,32,99);
            return jjMoveStringLiteralDfa5_JAVA(active0,0x0L,active1,0x80L);
            case 116:
            if ((active0&0x200000000L)!=0L) return jjStartNfaWithStates_JAVA(4,33,99);
            else if ((active0&0x100000000000L)!=0L) return jjStartNfaWithStates_JAVA(4,44,99);
            else if ((active0&0x4000000000000000L)!=0L) return jjStartNfaWithStates_JAVA(4,62,99);
            return jjMoveStringLiteralDfa5_JAVA(active0,0x0L,active1,0x800L);
            case 117:
            return jjMoveStringLiteralDfa5_JAVA(active0,0x800000000L,active1,0x0L);
            case 118:
            return jjMoveStringLiteralDfa5_JAVA(active0,0x40000000000000L,active1,0x0L);
            case 119:
            if ((active1&0x20L)!=0L) {
                jjmatchedKind=69;
                jjmatchedPos=4;
            }
            return jjMoveStringLiteralDfa5_JAVA(active0,0x0L,active1,0x40L);
            default:
            if (trace_enabled) LOGGER.info("   No string literal matches possible.");
            break;
        }
        return jjStartNfa_JAVA(3,active0,active1,0L);
    }

    private int jjMoveStringLiteralDfa5_JAVA(long old0,long active0,long old1,long active1) {
        active0=active0&old0;
        active1=active1&old1;
        if ((active0|active1)==0L) return jjStartNfa_JAVA(3,old0,old1,0L);
        int retval=input_stream.readChar();
        if (retval>=0) {
            curChar=(char) retval;
        }
        else {
            jjStopStringLiteralDfa_JAVA(4,active0,active1,0L);
            if (trace_enabled&&jjmatchedKind!=0&&jjmatchedKind!=0x7fffffff) {
                LOGGER.info("    Currently matched the first "+(jjmatchedPos+1)+" characters as a "+tokenImage[jjmatchedKind]+" token. ");
            }
            return 5;
        }
        if (trace_enabled) LOGGER.info(""+"<JAVA>"+"Current character : "+ParseException.addEscapes(String.valueOf(curChar))+" ("+(int) curChar+") at line "+input_stream.getEndLine()+" column "+input_stream.getEndColumn());
        switch(curChar) {
            case 69:
            return jjMoveStringLiteralDfa6_JAVA(active0,0x20L,active1,0x0L);
            case 72:
            return jjMoveStringLiteralDfa6_JAVA(active0,0x10L,active1,0x0L);
            case 82:
            return jjMoveStringLiteralDfa6_JAVA(active0,0xc0L,active1,0x0L);
            case 95:
            return jjMoveStringLiteralDfa6_JAVA(active0,0x1000L,active1,0x0L);
            case 97:
            return jjMoveStringLiteralDfa6_JAVA(active0,0x5000000L,active1,0x0L);
            case 99:
            if ((active0&0x1000000000000000L)!=0L) return jjStartNfaWithStates_JAVA(5,60,99);
            else if ((active0&0x8000000000000000L)!=0L) return jjStartNfaWithStates_JAVA(5,63,99);
            return jjMoveStringLiteralDfa6_JAVA(active0,0x800000000000000L,active1,0x0L);
            case 100:
            return jjMoveStringLiteralDfa6_JAVA(active0,0x10000000000L,active1,0x0L);
            case 101:
            if ((active0&0x2000000000L)!=0L) return jjStartNfaWithStates_JAVA(5,37,99);
            else if ((active0&0x40000000000000L)!=0L) return jjStartNfaWithStates_JAVA(5,54,99);
            break;
            case 102:
            return jjMoveStringLiteralDfa6_JAVA(active0,0x10000000000000L,active1,0x0L);
            case 103:
            return jjMoveStringLiteralDfa6_JAVA(active0,0x200000000000000L,active1,0x0L);
            case 104:
            if ((active1&0x4L)!=0L) return jjStartNfaWithStates_JAVA(5,66,99);
            break;
            case 105:
            return jjMoveStringLiteralDfa6_JAVA(active0,0x0L,active1,0x880L);
            case 108:
            return jjMoveStringLiteralDfa6_JAVA(active0,0x80800000000L,active1,0x0L);
            case 109:
            return jjMoveStringLiteralDfa6_JAVA(active0,0x1000000000000L,active1,0x0L);
            case 110:
            if ((active0&0x2000000000000000L)!=0L) return jjStartNfaWithStates_JAVA(5,61,99);
            return jjMoveStringLiteralDfa6_JAVA(active0,0x4000400000000L,active1,0x0L);
            case 114:
            return jjMoveStringLiteralDfa6_JAVA(active0,0x0L,active1,0x8L);
            case 115:
            if ((active1&0x40L)!=0L) return jjStartNfaWithStates_JAVA(5,70,99);
            break;
            case 116:
            if ((active0&0x2000000L)!=0L) return jjStartNfaWithStates_JAVA(5,25,99);
            else if ((active0&0x2000000000000L)!=0L) return jjStartNfaWithStates_JAVA(5,49,99);
            return jjMoveStringLiteralDfa6_JAVA(active0,0x400000000000000L,active1,0x1L);
            default:
            if (trace_enabled) LOGGER.info("   No string literal matches possible.");
            break;
        }
        return jjStartNfa_JAVA(4,active0,active1,0L);
    }

    private int jjMoveStringLiteralDfa6_JAVA(long old0,long active0,long old1,long active1) {
        active0=active0&old0;
        active1=active1&old1;
        if ((active0|active1)==0L) return jjStartNfa_JAVA(4,old0,old1,0L);
        int retval=input_stream.readChar();
        if (retval>=0) {
            curChar=(char) retval;
        }
        else {
            jjStopStringLiteralDfa_JAVA(5,active0,active1,0L);
            if (trace_enabled&&jjmatchedKind!=0&&jjmatchedKind!=0x7fffffff) {
                LOGGER.info("    Currently matched the first "+(jjmatchedPos+1)+" characters as a "+tokenImage[jjmatchedKind]+" token. ");
            }
            return 6;
        }
        if (trace_enabled) LOGGER.info(""+"<JAVA>"+"Current character : "+ParseException.addEscapes(String.valueOf(curChar))+" ("+(int) curChar+") at line "+input_stream.getEndLine()+" column "+input_stream.getEndColumn());
        switch(curChar) {
            case 69:
            return jjMoveStringLiteralDfa7_JAVA(active0,0x10L,active1,0x0L);
            case 77:
            return jjMoveStringLiteralDfa7_JAVA(active0,0x1000L,active1,0x0L);
            case 95:
            return jjMoveStringLiteralDfa7_JAVA(active0,0xe0L,active1,0x0L);
            case 97:
            return jjMoveStringLiteralDfa7_JAVA(active0,0x10000000000000L,active1,0x0L);
            case 99:
            return jjMoveStringLiteralDfa7_JAVA(active0,0x4000001000000L,active1,0x0L);
            case 101:
            if ((active0&0x200000000000000L)!=0L) return jjStartNfaWithStates_JAVA(6,57,99);
            else if ((active0&0x400000000000000L)!=0L) return jjStartNfaWithStates_JAVA(6,58,99);
            return jjMoveStringLiteralDfa7_JAVA(active0,0x1000000000000L,active1,0x80L);
            case 102:
            return jjMoveStringLiteralDfa7_JAVA(active0,0x0L,active1,0x1L);
            case 108:
            return jjMoveStringLiteralDfa7_JAVA(active0,0x0L,active1,0x800L);
            case 110:
            if ((active0&0x4000000L)!=0L) return jjStartNfaWithStates_JAVA(6,26,99);
            break;
            case 111:
            return jjMoveStringLiteralDfa7_JAVA(active0,0x0L,active1,0x8L);
            case 115:
            if ((active0&0x10000000000L)!=0L) return jjStartNfaWithStates_JAVA(6,40,99);
            break;
            case 116:
            if ((active0&0x800000000L)!=0L) return jjStartNfaWithStates_JAVA(6,35,99);
            return jjMoveStringLiteralDfa7_JAVA(active0,0x800000000000000L,active1,0x0L);
            case 117:
            return jjMoveStringLiteralDfa7_JAVA(active0,0x400000000L,active1,0x0L);
            case 121:
            if ((active0&0x80000000000L)!=0L) return jjStartNfaWithStates_JAVA(6,43,99);
            break;
            default:
            if (trace_enabled) LOGGER.info("   No string literal matches possible.");
            break;
        }
        return jjStartNfa_JAVA(5,active0,active1,0L);
    }

    private int jjMoveStringLiteralDfa7_JAVA(long old0,long active0,long old1,long active1) {
        active0=active0&old0;
        active1=active1&old1;
        if ((active0|active1)==0L) return jjStartNfa_JAVA(5,old0,old1,0L);
        int retval=input_stream.readChar();
        if (retval>=0) {
            curChar=(char) retval;
        }
        else {
            jjStopStringLiteralDfa_JAVA(6,active0,active1,0L);
            if (trace_enabled&&jjmatchedKind!=0&&jjmatchedKind!=0x7fffffff) {
                LOGGER.info("    Currently matched the first "+(jjmatchedPos+1)+" characters as a "+tokenImage[jjmatchedKind]+" token. ");
            }
            return 7;
        }
        if (trace_enabled) LOGGER.info(""+"<JAVA>"+"Current character : "+ParseException.addEscapes(String.valueOf(curChar))+" ("+(int) curChar+") at line "+input_stream.getEndLine()+" column "+input_stream.getEndColumn());
        switch(curChar) {
            case 65:
            return jjMoveStringLiteralDfa8_JAVA(active0,0x10L,active1,0x0L);
            case 66:
            return jjMoveStringLiteralDfa8_JAVA(active0,0x40L,active1,0x0L);
            case 67:
            return jjMoveStringLiteralDfa8_JAVA(active0,0x20L,active1,0x0L);
            case 69:
            return jjMoveStringLiteralDfa8_JAVA(active0,0x80L,active1,0x0L);
            case 71:
            return jjMoveStringLiteralDfa8_JAVA(active0,0x1000L,active1,0x0L);
            case 99:
            return jjMoveStringLiteralDfa8_JAVA(active0,0x10000000000000L,active1,0x0L);
            case 101:
            if ((active0&0x400000000L)!=0L) return jjStartNfaWithStates_JAVA(7,34,99);
            else if ((active1&0x800L)!=0L) return jjStartNfaWithStates_JAVA(7,75,99);
            return jjMoveStringLiteralDfa8_JAVA(active0,0x804000000000000L,active1,0x0L);
            case 110:
            return jjMoveStringLiteralDfa8_JAVA(active0,0x1000000000000L,active1,0x88L);
            case 112:
            if ((active1&0x1L)!=0L) return jjStartNfaWithStates_JAVA(7,64,99);
            break;
            case 116:
            if ((active0&0x1000000L)!=0L) return jjStartNfaWithStates_JAVA(7,24,99);
            break;
            default:
            if (trace_enabled) LOGGER.info("   No string literal matches possible.");
            break;
        }
        return jjStartNfa_JAVA(6,active0,active1,0L);
    }

    private int jjMoveStringLiteralDfa8_JAVA(long old0,long active0,long old1,long active1) {
        active0=active0&old0;
        active1=active1&old1;
        if ((active0|active1)==0L) return jjStartNfa_JAVA(6,old0,old1,0L);
        int retval=input_stream.readChar();
        if (retval>=0) {
            curChar=(char) retval;
        }
        else {
            jjStopStringLiteralDfa_JAVA(7,active0,active1,0L);
            if (trace_enabled&&jjmatchedKind!=0&&jjmatchedKind!=0x7fffffff) {
                LOGGER.info("    Currently matched the first "+(jjmatchedPos+1)+" characters as a "+tokenImage[jjmatchedKind]+" token. ");
            }
            return 8;
        }
        if (trace_enabled) LOGGER.info(""+"<JAVA>"+"Current character : "+ParseException.addEscapes(String.valueOf(curChar))+" ("+(int) curChar+") at line "+input_stream.getEndLine()+" column "+input_stream.getEndColumn());
        switch(curChar) {
            case 65:
            return jjMoveStringLiteralDfa9_JAVA(active0,0x20L,active1,0x0L);
            case 68:
            if ((active0&0x10L)!=0L) return jjStartNfaWithStates_JAVA(8,4,99);
            break;
            case 69:
            return jjMoveStringLiteralDfa9_JAVA(active0,0x40L,active1,0x0L);
            case 78:
            return jjMoveStringLiteralDfa9_JAVA(active0,0x80L,active1,0x0L);
            case 82:
            return jjMoveStringLiteralDfa9_JAVA(active0,0x1000L,active1,0x0L);
            case 100:
            if ((active0&0x800000000000000L)!=0L) return jjStartNfaWithStates_JAVA(8,59,99);
            break;
            case 101:
            if ((active0&0x10000000000000L)!=0L) return jjStartNfaWithStates_JAVA(8,52,99);
            break;
            case 105:
            return jjMoveStringLiteralDfa9_JAVA(active0,0x0L,active1,0x8L);
            case 111:
            return jjMoveStringLiteralDfa9_JAVA(active0,0x4000000000000L,active1,0x0L);
            case 116:
            if ((active1&0x80L)!=0L) return jjStartNfaWithStates_JAVA(8,71,99);
            return jjMoveStringLiteralDfa9_JAVA(active0,0x1000000000000L,active1,0x0L);
            default:
            if (trace_enabled) LOGGER.info("   No string literal matches possible.");
            break;
        }
        return jjStartNfa_JAVA(7,active0,active1,0L);
    }

    private int jjMoveStringLiteralDfa9_JAVA(long old0,long active0,long old1,long active1) {
        active0=active0&old0;
        active1=active1&old1;
        if ((active0|active1)==0L) return jjStartNfa_JAVA(7,old0,old1,0L);
        int retval=input_stream.readChar();
        if (retval>=0) {
            curChar=(char) retval;
        }
        else {
            jjStopStringLiteralDfa_JAVA(8,active0,active1,0L);
            if (trace_enabled&&jjmatchedKind!=0&&jjmatchedKind!=0x7fffffff) {
                LOGGER.info("    Currently matched the first "+(jjmatchedPos+1)+" characters as a "+tokenImage[jjmatchedKind]+" token. ");
            }
            return 9;
        }
        if (trace_enabled) LOGGER.info(""+"<JAVA>"+"Current character : "+ParseException.addEscapes(String.valueOf(curChar))+" ("+(int) curChar+") at line "+input_stream.getEndLine()+" column "+input_stream.getEndColumn());
        switch(curChar) {
            case 68:
            if ((active0&0x80L)!=0L) return jjStartNfaWithStates_JAVA(9,7,99);
            break;
            case 71:
            return jjMoveStringLiteralDfa10_JAVA(active0,0x40L,active1,0x0L);
            case 83:
            return jjMoveStringLiteralDfa10_JAVA(active0,0x20L,active1,0x0L);
            case 95:
            return jjMoveStringLiteralDfa10_JAVA(active0,0x1000L,active1,0x0L);
            case 102:
            if ((active0&0x4000000000000L)!=0L) return jjStartNfaWithStates_JAVA(9,50,99);
            break;
            case 115:
            if ((active0&0x1000000000000L)!=0L) return jjStartNfaWithStates_JAVA(9,48,99);
            break;
            case 122:
            return jjMoveStringLiteralDfa10_JAVA(active0,0x0L,active1,0x8L);
            default:
            if (trace_enabled) LOGGER.info("   No string literal matches possible.");
            break;
        }
        return jjStartNfa_JAVA(8,active0,active1,0L);
    }

    private int jjMoveStringLiteralDfa10_JAVA(long old0,long active0,long old1,long active1) {
        active0=active0&old0;
        active1=active1&old1;
        if ((active0|active1)==0L) return jjStartNfa_JAVA(8,old0,old1,0L);
        int retval=input_stream.readChar();
        if (retval>=0) {
            curChar=(char) retval;
        }
        else {
            jjStopStringLiteralDfa_JAVA(9,active0,active1,0L);
            if (trace_enabled&&jjmatchedKind!=0&&jjmatchedKind!=0x7fffffff) {
                LOGGER.info("    Currently matched the first "+(jjmatchedPos+1)+" characters as a "+tokenImage[jjmatchedKind]+" token. ");
            }
            return 10;
        }
        if (trace_enabled) LOGGER.info(""+"<JAVA>"+"Current character : "+ParseException.addEscapes(String.valueOf(curChar))+" ("+(int) curChar+") at line "+input_stream.getEndLine()+" column "+input_stream.getEndColumn());
        switch(curChar) {
            case 68:
            return jjMoveStringLiteralDfa11_JAVA(active0,0x1000L,active1,0x0L);
            case 69:
            if ((active0&0x20L)!=0L) return jjStartNfaWithStates_JAVA(10,5,99);
            break;
            case 73:
            return jjMoveStringLiteralDfa11_JAVA(active0,0x40L,active1,0x0L);
            case 101:
            return jjMoveStringLiteralDfa11_JAVA(active0,0x0L,active1,0x8L);
            default:
            if (trace_enabled) LOGGER.info("   No string literal matches possible.");
            break;
        }
        return jjStartNfa_JAVA(9,active0,active1,0L);
    }

    private int jjMoveStringLiteralDfa11_JAVA(long old0,long active0,long old1,long active1) {
        active0=active0&old0;
        active1=active1&old1;
        if ((active0|active1)==0L) return jjStartNfa_JAVA(9,old0,old1,0L);
        int retval=input_stream.readChar();
        if (retval>=0) {
            curChar=(char) retval;
        }
        else {
            jjStopStringLiteralDfa_JAVA(10,active0,active1,0L);
            if (trace_enabled&&jjmatchedKind!=0&&jjmatchedKind!=0x7fffffff) {
                LOGGER.info("    Currently matched the first "+(jjmatchedPos+1)+" characters as a "+tokenImage[jjmatchedKind]+" token. ");
            }
            return 11;
        }
        if (trace_enabled) LOGGER.info(""+"<JAVA>"+"Current character : "+ParseException.addEscapes(String.valueOf(curChar))+" ("+(int) curChar+") at line "+input_stream.getEndLine()+" column "+input_stream.getEndColumn());
        switch(curChar) {
            case 69:
            return jjMoveStringLiteralDfa12_JAVA(active0,0x1000L,active1,0x0L);
            case 78:
            if ((active0&0x40L)!=0L) return jjStartNfaWithStates_JAVA(11,6,99);
            break;
            case 100:
            if ((active1&0x8L)!=0L) return jjStartNfaWithStates_JAVA(11,67,99);
            break;
            default:
            if (trace_enabled) LOGGER.info("   No string literal matches possible.");
            break;
        }
        return jjStartNfa_JAVA(10,active0,active1,0L);
    }

    private int jjMoveStringLiteralDfa12_JAVA(long old0,long active0,long old1,long active1) {
        active0=active0&old0;
        active1=active1&old1;
        if ((active0|active1)==0L) return jjStartNfa_JAVA(10,old0,old1,0L);
        int retval=input_stream.readChar();
        if (retval>=0) {
            curChar=(char) retval;
        }
        else {
            jjStopStringLiteralDfa_JAVA(11,active0,0L,0L);
            if (trace_enabled&&jjmatchedKind!=0&&jjmatchedKind!=0x7fffffff) {
                LOGGER.info("    Currently matched the first "+(jjmatchedPos+1)+" characters as a "+tokenImage[jjmatchedKind]+" token. ");
            }
            return 12;
        }
        if (trace_enabled) LOGGER.info(""+"<JAVA>"+"Current character : "+ParseException.addEscapes(String.valueOf(curChar))+" ("+(int) curChar+") at line "+input_stream.getEndLine()+" column "+input_stream.getEndColumn());
        switch(curChar) {
            case 67:
            return jjMoveStringLiteralDfa13_JAVA(active0,0x1000L);
            default:
            if (trace_enabled) LOGGER.info("   No string literal matches possible.");
            break;
        }
        return jjStartNfa_JAVA(11,active0,0L,0L);
    }

    private int jjMoveStringLiteralDfa13_JAVA(long old0,long active0) {
        active0=active0&old0;
        if ((active0)==0L) return jjStartNfa_JAVA(11,old0,0L,0L);
        int retval=input_stream.readChar();
        if (retval>=0) {
            curChar=(char) retval;
        }
        else {
            jjStopStringLiteralDfa_JAVA(12,active0,0L,0L);
            if (trace_enabled&&jjmatchedKind!=0&&jjmatchedKind!=0x7fffffff) {
                LOGGER.info("    Currently matched the first "+(jjmatchedPos+1)+" characters as a "+tokenImage[jjmatchedKind]+" token. ");
            }
            return 13;
        }
        if (trace_enabled) LOGGER.info(""+"<JAVA>"+"Current character : "+ParseException.addEscapes(String.valueOf(curChar))+" ("+(int) curChar+") at line "+input_stream.getEndLine()+" column "+input_stream.getEndColumn());
        switch(curChar) {
            case 76:
            return jjMoveStringLiteralDfa14_JAVA(active0,0x1000L);
            default:
            if (trace_enabled) LOGGER.info("   No string literal matches possible.");
            break;
        }
        return jjStartNfa_JAVA(12,active0,0L,0L);
    }

    private int jjMoveStringLiteralDfa14_JAVA(long old0,long active0) {
        active0=active0&old0;
        if ((active0)==0L) return jjStartNfa_JAVA(12,old0,0L,0L);
        int retval=input_stream.readChar();
        if (retval>=0) {
            curChar=(char) retval;
        }
        else {
            jjStopStringLiteralDfa_JAVA(13,active0,0L,0L);
            if (trace_enabled&&jjmatchedKind!=0&&jjmatchedKind!=0x7fffffff) {
                LOGGER.info("    Currently matched the first "+(jjmatchedPos+1)+" characters as a "+tokenImage[jjmatchedKind]+" token. ");
            }
            return 14;
        }
        if (trace_enabled) LOGGER.info(""+"<JAVA>"+"Current character : "+ParseException.addEscapes(String.valueOf(curChar))+" ("+(int) curChar+") at line "+input_stream.getEndLine()+" column "+input_stream.getEndColumn());
        switch(curChar) {
            case 83:
            if ((active0&0x1000L)!=0L) return jjStartNfaWithStates_JAVA(14,12,99);
            break;
            default:
            if (trace_enabled) LOGGER.info("   No string literal matches possible.");
            break;
        }
        return jjStartNfa_JAVA(13,active0,0L,0L);
    }

    private int jjMoveNfa_JAVA(int startState,int curPos) {
        int startsAt=0;
        jjnewStateCnt=231;
        int i=1;
        jjstateSet[0]=startState;
        int kind=0x7fffffff;
        while (true) {
            if (++jjround==0x7fffffff) {
                ReInitRounds();
            }
            if (curChar<64) {
                long l=1L<<curChar;
                do {
                    switch(jjstateSet[--i]) {
                        case 6:
                        if ((0x3ff000000000000L&l)!=0L) {
                            if (kind>78) kind=78;
                            jjAddStates(0,14);
                        }
                        else if ((0x100003600L&l)!=0L) {
                            if (kind>16) kind=16;
                            jjCheckNAdd(64);
                        }
                        else if (curChar==36) {
                            if (kind>141) kind=141;
                            jjCheckNAdd(99);
                        }
                        else if (curChar==34) jjCheckNAddStates(15,17);
                        else if (curChar==39) jjAddStates(18,19);
                        else if (curChar==46) jjstateSet[jjnewStateCnt++]=70;
                        else if (curChar==47) jjstateSet[jjnewStateCnt++]=67;
                        else if (curChar==35) jjstateSet[jjnewStateCnt++]=62;
                        if (curChar==48) jjAddStates(20,27);
                        break;
                        case 17:
                        case 99:
                        if ((0x3ff00100fffc1ffL&l)==0L) break;
                        if (kind>141) kind=141;
                        jjCheckNAdd(99);
                        break;
                        case 16:
                        if ((0x3ff00100fffc1ffL&l)==0L) break;
                        if (kind>141) kind=141;
                        jjCheckNAdd(99);
                        break;
                        case 15:
                        if ((0x3ff00100fffc1ffL&l)==0L) break;
                        if (kind>141) kind=141;
                        jjCheckNAdd(99);
                        break;
                        case 231:
                        if ((0x3ff00100fffc1ffL&l)==0L) break;
                        if (kind>141) kind=141;
                        jjCheckNAdd(99);
                        break;
                        case 105:
                        if ((0x3ff00100fffc1ffL&l)==0L) break;
                        if (kind>141) kind=141;
                        jjCheckNAdd(99);
                        break;
                        case 42:
                        if ((0x3ff00100fffc1ffL&l)==0L) break;
                        if (kind>141) kind=141;
                        jjCheckNAdd(99);
                        break;
                        case 61:
                        if (curChar==35) jjCheckNAdd(62);
                        break;
                        case 62:
                        if (curChar!=36) break;
                        if (kind>15) kind=15;
                        jjCheckNAdd(63);
                        break;
                        case 63:
                        if ((0x3ff00100fffc1ffL&l)==0L) break;
                        if (kind>15) kind=15;
                        jjCheckNAdd(63);
                        break;
                        case 64:
                        if ((0x100003600L&l)==0L) break;
                        if (kind>16) kind=16;
                        jjCheckNAdd(64);
                        break;
                        case 65:
                        if (curChar==42) jjstateSet[jjnewStateCnt++]=66;
                        break;
                        case 66:
                        if ((0xffff7fffffffffffL&l)!=0L&&kind>18) kind=18;
                        break;
                        case 67:
                        if (curChar==42) jjstateSet[jjnewStateCnt++]=65;
                        break;
                        case 68:
                        if (curChar==47) jjCheckNAdd(67);
                        break;
                        case 69:
                        if (curChar==46) jjCheckNAdd(70);
                        break;
                        case 70:
                        if ((0x3ff000000000000L&l)==0L) break;
                        if (kind>83) kind=83;
                        jjAddStates(28,31);
                        break;
                        case 71:
                        if ((0x3ff000000000000L&l)!=0L) jjCheckNAddTwoStates(71,72);
                        break;
                        case 72:
                        if ((0x3ff000000000000L&l)==0L) break;
                        if (kind>83) kind=83;
                        jjAddStates(32,33);
                        break;
                        case 74:
                        if ((0x280000000000L&l)!=0L) jjstateSet[jjnewStateCnt++]=75;
                        break;
                        case 75:
                        if ((0x3ff000000000000L&l)==0L) break;
                        if (kind>83) kind=83;
                        jjAddStates(34,36);
                        break;
                        case 76:
                        if ((0x3ff000000000000L&l)!=0L) jjCheckNAddTwoStates(76,77);
                        break;
                        case 77:
                        if ((0x3ff000000000000L&l)==0L) break;
                        if (kind>83) kind=83;
                        jjAddStates(37,38);
                        break;
                        case 79:
                        if ((0x3ff000000000000L&l)==0L) break;
                        if (kind>83) kind=83;
                        jjCheckNAddStates(39,42);
                        break;
                        case 80:
                        if (curChar==39) jjCheckNAddTwoStates(81,88);
                        break;
                        case 82:
                        if ((0xff000000000000L&l)!=0L) jjCheckNAddTwoStates(83,84);
                        break;
                        case 83:
                        if ((0xff000000000000L&l)!=0L) jjCheckNAdd(84);
                        break;
                        case 84:
                        if (curChar==39&&kind>89) kind=89;
                        break;
                        case 85:
                        if ((0xf000000000000L&l)!=0L) jjstateSet[jjnewStateCnt++]=86;
                        break;
                        case 86:
                        if ((0xff000000000000L&l)!=0L) jjstateSet[jjnewStateCnt++]=83;
                        break;
                        case 87:
                        if ((0x8400000000L&l)!=0L) jjCheckNAdd(84);
                        break;
                        case 88:
                        if ((0xffffff7fffffdbffL&l)!=0L) jjstateSet[jjnewStateCnt++]=84;
                        break;
                        case 89:
                        if (curChar==34) jjCheckNAddStates(15,17);
                        break;
                        case 91:
                        if ((0xff000000000000L&l)!=0L) jjCheckNAddStates(43,46);
                        break;
                        case 92:
                        if ((0xff000000000000L&l)!=0L) jjCheckNAddStates(15,17);
                        break;
                        case 93:
                        if ((0xfffffffbffffdbffL&l)!=0L) jjCheckNAddStates(15,17);
                        break;
                        case 94:
                        if (curChar==34&&kind>90) kind=90;
                        break;
                        case 95:
                        if ((0xf000000000000L&l)!=0L) jjstateSet[jjnewStateCnt++]=96;
                        break;
                        case 96:
                        if ((0xff000000000000L&l)!=0L) jjstateSet[jjnewStateCnt++]=92;
                        break;
                        case 97:
                        if ((0x8400000000L&l)!=0L) jjCheckNAddStates(15,17);
                        break;
                        case 98:
                        if (curChar!=36) break;
                        if (kind>141) kind=141;
                        jjCheckNAdd(99);
                        break;
                        case 151:
                        if ((0x3ff000000000000L&l)==0L) break;
                        if (kind>78) kind=78;
                        jjCheckNAddStates(0,14);
                        break;
                        case 152:
                        if ((0x3ff000000000000L&l)!=0L) jjCheckNAddTwoStates(152,153);
                        break;
                        case 153:
                        if ((0x3ff000000000000L&l)!=0L) jjstateSet[jjnewStateCnt++]=154;
                        break;
                        case 155:
                        if ((0x3ff000000000000L&l)!=0L) jjCheckNAddTwoStates(155,156);
                        break;
                        case 156:
                        if ((0x3ff000000000000L&l)!=0L&&kind>78) kind=78;
                        break;
                        case 157:
                        if ((0x3ff000000000000L&l)!=0L) jjCheckNAddTwoStates(157,158);
                        break;
                        case 158:
                        if ((0x3ff000000000000L&l)!=0L) jjstateSet[jjnewStateCnt++]=159;
                        break;
                        case 159:
                        if (curChar!=46) break;
                        if (kind>83) kind=83;
                        jjAddStates(47,49);
                        break;
                        case 160:
                        if ((0x3ff000000000000L&l)==0L) break;
                        if (kind>83) kind=83;
                        jjAddStates(50,53);
                        break;
                        case 161:
                        if ((0x3ff000000000000L&l)!=0L) jjCheckNAddTwoStates(161,162);
                        break;
                        case 162:
                        if ((0x3ff000000000000L&l)==0L) break;
                        if (kind>83) kind=83;
                        jjAddStates(54,55);
                        break;
                        case 164:
                        if ((0x280000000000L&l)!=0L) jjstateSet[jjnewStateCnt++]=165;
                        break;
                        case 165:
                        if ((0x3ff000000000000L&l)==0L) break;
                        if (kind>83) kind=83;
                        jjAddStates(56,58);
                        break;
                        case 166:
                        if ((0x3ff000000000000L&l)!=0L) jjCheckNAddTwoStates(166,167);
                        break;
                        case 167:
                        if ((0x3ff000000000000L&l)==0L) break;
                        if (kind>83) kind=83;
                        jjAddStates(59,60);
                        break;
                        case 168:
                        if ((0x3ff000000000000L&l)==0L) break;
                        if (kind>83) kind=83;
                        jjCheckNAddStates(61,64);
                        break;
                        case 169:
                        if ((0x3ff000000000000L&l)!=0L) jjCheckNAddTwoStates(169,170);
                        break;
                        case 170:
                        if ((0x3ff000000000000L&l)!=0L) jjstateSet[jjnewStateCnt++]=171;
                        break;
                        case 172:
                        if ((0x280000000000L&l)!=0L) jjstateSet[jjnewStateCnt++]=173;
                        break;
                        case 173:
                        if ((0x3ff000000000000L&l)==0L) break;
                        if (kind>83) kind=83;
                        jjAddStates(65,67);
                        break;
                        case 174:
                        if ((0x3ff000000000000L&l)!=0L) jjCheckNAddTwoStates(174,175);
                        break;
                        case 175:
                        if ((0x3ff000000000000L&l)==0L) break;
                        if (kind>83) kind=83;
                        jjAddStates(68,69);
                        break;
                        case 176:
                        if ((0x3ff000000000000L&l)==0L) break;
                        if (kind>83) kind=83;
                        jjCheckNAddStates(70,73);
                        break;
                        case 177:
                        if ((0x3ff000000000000L&l)!=0L) jjCheckNAddTwoStates(177,178);
                        break;
                        case 178:
                        if ((0x3ff000000000000L&l)!=0L) jjAddStates(74,75);
                        break;
                        case 180:
                        if ((0x280000000000L&l)!=0L) jjstateSet[jjnewStateCnt++]=181;
                        break;
                        case 181:
                        if ((0x3ff000000000000L&l)!=0L) jjAddStates(76,78);
                        break;
                        case 182:
                        if ((0x3ff000000000000L&l)!=0L) jjCheckNAddTwoStates(182,183);
                        break;
                        case 183:
                        if ((0x3ff000000000000L&l)!=0L) jjAddStates(79,80);
                        break;
                        case 184:
                        if ((0x3ff000000000000L&l)!=0L) jjCheckNAddStates(81,84);
                        break;
                        case 185:
                        if (curChar==48) jjCheckNAddStates(20,27);
                        break;
                        case 187:
                        if ((0x3ff000000000000L&l)!=0L) jjAddStates(85,87);
                        break;
                        case 188:
                        if ((0x3ff000000000000L&l)!=0L) jjCheckNAddTwoStates(188,189);
                        break;
                        case 189:
                        if ((0x3ff000000000000L&l)!=0L) jjstateSet[jjnewStateCnt++]=154;
                        break;
                        case 190:
                        if ((0xff000000000000L&l)!=0L) jjAddStates(88,90);
                        break;
                        case 191:
                        if ((0xff000000000000L&l)!=0L) jjCheckNAddTwoStates(191,192);
                        break;
                        case 192:
                        if ((0xff000000000000L&l)!=0L) jjstateSet[jjnewStateCnt++]=154;
                        break;
                        case 194:
                        if ((0x3000000000000L&l)!=0L) jjAddStates(91,93);
                        break;
                        case 195:
                        if ((0x3000000000000L&l)!=0L) jjCheckNAddTwoStates(195,196);
                        break;
                        case 196:
                        if ((0x3000000000000L&l)!=0L) jjstateSet[jjnewStateCnt++]=154;
                        break;
                        case 198:
                        if ((0x3ff000000000000L&l)==0L) break;
                        if (kind>78) kind=78;
                        jjAddStates(94,95);
                        break;
                        case 199:
                        if ((0x3ff000000000000L&l)!=0L) jjCheckNAddTwoStates(199,200);
                        break;
                        case 200:
                        if ((0x3ff000000000000L&l)!=0L&&kind>78) kind=78;
                        break;
                        case 201:
                        if ((0xff000000000000L&l)==0L) break;
                        if (kind>78) kind=78;
                        jjAddStates(96,97);
                        break;
                        case 202:
                        if ((0xff000000000000L&l)!=0L) jjCheckNAddTwoStates(202,203);
                        break;
                        case 203:
                        if ((0xff000000000000L&l)!=0L&&kind>78) kind=78;
                        break;
                        case 205:
                        if ((0x3000000000000L&l)==0L) break;
                        if (kind>78) kind=78;
                        jjAddStates(98,99);
                        break;
                        case 206:
                        if ((0x3000000000000L&l)!=0L) jjCheckNAddTwoStates(206,207);
                        break;
                        case 207:
                        if ((0x3000000000000L&l)!=0L&&kind>78) kind=78;
                        break;
                        case 209:
                        if ((0x3ff000000000000L&l)!=0L) jjAddStates(100,103);
                        break;
                        case 210:
                        if ((0x3ff000000000000L&l)!=0L) jjCheckNAddTwoStates(210,211);
                        break;
                        case 211:
                        if ((0x3ff000000000000L&l)!=0L) jjAddStates(104,105);
                        break;
                        case 212:
                        if (curChar==46) jjstateSet[jjnewStateCnt++]=213;
                        break;
                        case 214:
                        if ((0x280000000000L&l)!=0L) jjstateSet[jjnewStateCnt++]=215;
                        break;
                        case 215:
                        if ((0x3ff000000000000L&l)==0L) break;
                        if (kind>83) kind=83;
                        jjAddStates(106,108);
                        break;
                        case 216:
                        if ((0x3ff000000000000L&l)!=0L) jjCheckNAddTwoStates(216,217);
                        break;
                        case 217:
                        if ((0x3ff000000000000L&l)==0L) break;
                        if (kind>83) kind=83;
                        jjstateSet[jjnewStateCnt++]=78;
                        break;
                        case 219:
                        if ((0x3ff000000000000L&l)!=0L) jjAddStates(109,111);
                        break;
                        case 220:
                        if ((0x3ff000000000000L&l)!=0L) jjCheckNAddTwoStates(220,221);
                        break;
                        case 221:
                        if ((0x3ff000000000000L&l)!=0L) jjstateSet[jjnewStateCnt++]=222;
                        break;
                        case 222:
                        if (curChar==46) jjstateSet[jjnewStateCnt++]=223;
                        break;
                        case 223:
                        if ((0x3ff000000000000L&l)!=0L) jjAddStates(112,114);
                        break;
                        case 224:
                        if ((0x3ff000000000000L&l)!=0L) jjCheckNAddTwoStates(224,225);
                        break;
                        case 225:
                        if ((0x3ff000000000000L&l)!=0L) jjstateSet[jjnewStateCnt++]=226;
                        break;
                        case 227:
                        if ((0x280000000000L&l)!=0L) jjstateSet[jjnewStateCnt++]=228;
                        break;
                        case 228:
                        if ((0x3ff000000000000L&l)==0L) break;
                        if (kind>83) kind=83;
                        jjAddStates(115,117);
                        break;
                        case 229:
                        if ((0x3ff000000000000L&l)!=0L) jjCheckNAddTwoStates(229,230);
                        break;
                        case 230:
                        if ((0x3ff000000000000L&l)==0L) break;
                        if (kind>83) kind=83;
                        jjstateSet[jjnewStateCnt++]=78;
                        break;
                        default:
                        break;
                    }
                }
                while (i!=startsAt);
            }
            else if (curChar<128) {
                long l=1L<<(curChar&077);
                do {
                    switch(jjstateSet[--i]) {
                        case 6:
                        if ((0x7fffffe87fffffeL&l)!=0L) {
                            if (kind>141) kind=141;
                            jjCheckNAdd(99);
                        }
                        if (curChar==73) jjAddStates(118,122);
                        else if (curChar==77) jjstateSet[jjnewStateCnt++]=59;
                        else if (curChar==85) jjstateSet[jjnewStateCnt++]=55;
                        else if (curChar==83) jjstateSet[jjnewStateCnt++]=42;
                        else if (curChar==82) jjstateSet[jjnewStateCnt++]=29;
                        else if (curChar==84) jjstateSet[jjnewStateCnt++]=17;
                        else if (curChar==79) jjstateSet[jjnewStateCnt++]=12;
                        else if (curChar==111) jjstateSet[jjnewStateCnt++]=5;
                        break;
                        case 17:
                        if ((0x87fffffe87fffffeL&l)!=0L) {
                            if (kind>141) kind=141;
                            jjCheckNAdd(99);
                        }
                        if (curChar==79) jjstateSet[jjnewStateCnt++]=16;
                        break;
                        case 16:
                        if ((0x87fffffe87fffffeL&l)!=0L) {
                            if (kind>141) kind=141;
                            jjCheckNAdd(99);
                        }
                        if (curChar==75) jjstateSet[jjnewStateCnt++]=15;
                        break;
                        case 15:
                        if ((0x87fffffe87fffffeL&l)!=0L) {
                            if (kind>141) kind=141;
                            jjCheckNAdd(99);
                        }
                        if (curChar==69) jjstateSet[jjnewStateCnt++]=14;
                        break;
                        case 231:
                        if ((0x87fffffe87fffffeL&l)!=0L) {
                            if (kind>141) kind=141;
                            jjCheckNAdd(99);
                        }
                        if (curChar==78) {
                            if (kind>8) kind=8;
                        }
                        break;
                        case 105:
                        if ((0x87fffffe87fffffeL&l)!=0L) {
                            if (kind>141) kind=141;
                            jjCheckNAdd(99);
                        }
                        if (curChar==78) jjstateSet[jjnewStateCnt++]=149;
                        if (curChar==78) jjstateSet[jjnewStateCnt++]=134;
                        if (curChar==78) jjstateSet[jjnewStateCnt++]=120;
                        if (curChar==78) jjstateSet[jjnewStateCnt++]=114;
                        if (curChar==78) jjstateSet[jjnewStateCnt++]=104;
                        break;
                        case 42:
                        if ((0x87fffffe87fffffeL&l)!=0L) {
                            if (kind>141) kind=141;
                            jjCheckNAdd(99);
                        }
                        if (curChar==80) jjstateSet[jjnewStateCnt++]=41;
                        break;
                        case 0:
                        if (curChar==115&&kind>1) kind=1;
                        break;
                        case 1:
                        if (curChar==110) jjstateSet[jjnewStateCnt++]=0;
                        break;
                        case 2:
                        if (curChar==111) jjstateSet[jjnewStateCnt++]=1;
                        break;
                        case 3:
                        if (curChar==105) jjstateSet[jjnewStateCnt++]=2;
                        break;
                        case 4:
                        if (curChar==116) jjstateSet[jjnewStateCnt++]=3;
                        break;
                        case 5:
                        if (curChar==112) jjstateSet[jjnewStateCnt++]=4;
                        break;
                        case 7:
                        if (curChar==83&&kind>1) kind=1;
                        break;
                        case 8:
                        if (curChar==78) jjstateSet[jjnewStateCnt++]=7;
                        break;
                        case 9:
                        if (curChar==79) jjstateSet[jjnewStateCnt++]=8;
                        break;
                        case 10:
                        if (curChar==73) jjstateSet[jjnewStateCnt++]=9;
                        break;
                        case 11:
                        if (curChar==84) jjstateSet[jjnewStateCnt++]=10;
                        break;
                        case 12:
                        if (curChar==80) jjstateSet[jjnewStateCnt++]=11;
                        break;
                        case 13:
                        if (curChar==79) jjCheckNAdd(12);
                        break;
                        case 14:
                        if (curChar==78&&kind>8) kind=8;
                        break;
                        case 18:
                        if (curChar==84) jjCheckNAdd(17);
                        break;
                        case 19:
                        if (curChar==69) jjstateSet[jjnewStateCnt++]=14;
                        break;
                        case 20:
                        if (curChar==75) jjstateSet[jjnewStateCnt++]=19;
                        break;
                        case 21:
                        if (curChar==79) jjstateSet[jjnewStateCnt++]=20;
                        break;
                        case 22:
                        if (curChar==84) jjstateSet[jjnewStateCnt++]=21;
                        break;
                        case 23:
                        if (curChar==95) jjstateSet[jjnewStateCnt++]=22;
                        break;
                        case 24:
                        if (curChar==82) jjstateSet[jjnewStateCnt++]=23;
                        break;
                        case 25:
                        if (curChar==65) jjstateSet[jjnewStateCnt++]=24;
                        break;
                        case 26:
                        if (curChar==76) jjstateSet[jjnewStateCnt++]=25;
                        break;
                        case 27:
                        if (curChar==85) jjstateSet[jjnewStateCnt++]=26;
                        break;
                        case 28:
                        if (curChar==71) jjstateSet[jjnewStateCnt++]=27;
                        break;
                        case 29:
                        if (curChar==69) jjstateSet[jjnewStateCnt++]=28;
                        break;
                        case 30:
                        if (curChar==82) jjCheckNAdd(29);
                        break;
                        case 31:
                        if (curChar==78&&kind>9) kind=9;
                        break;
                        case 32:
                        if (curChar==69) jjstateSet[jjnewStateCnt++]=31;
                        break;
                        case 33:
                        if (curChar==75) jjstateSet[jjnewStateCnt++]=32;
                        break;
                        case 34:
                        if (curChar==79) jjstateSet[jjnewStateCnt++]=33;
                        break;
                        case 35:
                        if (curChar==84) jjstateSet[jjnewStateCnt++]=34;
                        break;
                        case 36:
                        if (curChar==95) jjstateSet[jjnewStateCnt++]=35;
                        break;
                        case 37:
                        if (curChar==76) jjstateSet[jjnewStateCnt++]=36;
                        break;
                        case 38:
                        if (curChar==65) jjstateSet[jjnewStateCnt++]=37;
                        break;
                        case 39:
                        if (curChar==73) jjstateSet[jjnewStateCnt++]=38;
                        break;
                        case 40:
                        if (curChar==67) jjstateSet[jjnewStateCnt++]=39;
                        break;
                        case 41:
                        if (curChar==69) jjstateSet[jjnewStateCnt++]=40;
                        break;
                        case 43:
                        if (curChar==83) jjCheckNAdd(42);
                        break;
                        case 44:
                        if (curChar==69) jjstateSet[jjnewStateCnt++]=31;
                        break;
                        case 45:
                        if (curChar==75) jjstateSet[jjnewStateCnt++]=44;
                        break;
                        case 46:
                        if (curChar==79) jjstateSet[jjnewStateCnt++]=45;
                        break;
                        case 47:
                        if (curChar==84) jjstateSet[jjnewStateCnt++]=46;
                        break;
                        case 48:
                        if (curChar==95) jjstateSet[jjnewStateCnt++]=47;
                        break;
                        case 49:
                        if (curChar==68) jjstateSet[jjnewStateCnt++]=48;
                        break;
                        case 50:
                        if (curChar==69) jjstateSet[jjnewStateCnt++]=49;
                        break;
                        case 51:
                        if (curChar==83) jjstateSet[jjnewStateCnt++]=50;
                        break;
                        case 52:
                        if (curChar==82) jjstateSet[jjnewStateCnt++]=51;
                        break;
                        case 53:
                        if (curChar==65) jjstateSet[jjnewStateCnt++]=52;
                        break;
                        case 54:
                        if (curChar==80) jjstateSet[jjnewStateCnt++]=53;
                        break;
                        case 55:
                        if (curChar==78) jjstateSet[jjnewStateCnt++]=54;
                        break;
                        case 56:
                        if (curChar==85) jjCheckNAdd(55);
                        break;
                        case 57:
                        if (curChar==69&&kind>10) kind=10;
                        break;
                        case 58:
                        if (curChar==82) jjstateSet[jjnewStateCnt++]=57;
                        break;
                        case 59:
                        if (curChar==79) jjstateSet[jjnewStateCnt++]=58;
                        break;
                        case 60:
                        if (curChar==77) jjCheckNAdd(59);
                        break;
                        case 62:
                        if ((0x7fffffe87fffffeL&l)==0L) break;
                        if (kind>15) kind=15;
                        jjCheckNAdd(63);
                        break;
                        case 63:
                        if ((0x87fffffe87fffffeL&l)==0L) break;
                        if (kind>15) kind=15;
                        jjCheckNAdd(63);
                        break;
                        case 66:
                        if (kind>18) kind=18;
                        break;
                        case 71:
                        if (curChar==95) jjCheckNAddTwoStates(71,72);
                        break;
                        case 73:
                        if ((0x2000000020L&l)!=0L) jjAddStates(123,124);
                        break;
                        case 76:
                        if (curChar==95) jjCheckNAddTwoStates(76,77);
                        break;
                        case 78:
                        if ((0x5000000050L&l)!=0L&&kind>83) kind=83;
                        break;
                        case 81:
                        if (curChar==92) jjAddStates(125,127);
                        break;
                        case 87:
                        if ((0x14404410000000L&l)!=0L) jjCheckNAdd(84);
                        break;
                        case 88:
                        if ((0xffffffffefffffffL&l)!=0L) jjstateSet[jjnewStateCnt++]=84;
                        break;
                        case 90:
                        if (curChar==92) jjAddStates(128,130);
                        break;
                        case 93:
                        if ((0xffffffffefffffffL&l)!=0L) jjCheckNAddStates(15,17);
                        break;
                        case 97:
                        if ((0x14404410000000L&l)!=0L) jjCheckNAddStates(15,17);
                        break;
                        case 98:
                        if ((0x7fffffe87fffffeL&l)==0L) break;
                        if (kind>141) kind=141;
                        jjCheckNAdd(99);
                        break;
                        case 99:
                        if ((0x87fffffe87fffffeL&l)==0L) break;
                        if (kind>141) kind=141;
                        jjCheckNAdd(99);
                        break;
                        case 100:
                        if (curChar==73) jjCheckNAddStates(118,122);
                        break;
                        case 101:
                        if (curChar==84&&kind>2) kind=2;
                        break;
                        case 102:
                        if (curChar==67) jjstateSet[jjnewStateCnt++]=101;
                        break;
                        case 103:
                        if (curChar==69) jjstateSet[jjnewStateCnt++]=102;
                        break;
                        case 104:
                        if (curChar==74) jjstateSet[jjnewStateCnt++]=103;
                        break;
                        case 106:
                        if (curChar==69&&kind>2) kind=2;
                        break;
                        case 107:
                        if (curChar==68) jjstateSet[jjnewStateCnt++]=106;
                        break;
                        case 108:
                        if (curChar==79) jjstateSet[jjnewStateCnt++]=107;
                        break;
                        case 109:
                        if (curChar==67) jjstateSet[jjnewStateCnt++]=108;
                        break;
                        case 110:
                        if (curChar==95) jjstateSet[jjnewStateCnt++]=109;
                        break;
                        case 111:
                        if (curChar==84) jjstateSet[jjnewStateCnt++]=110;
                        break;
                        case 112:
                        if (curChar==67) jjstateSet[jjnewStateCnt++]=111;
                        break;
                        case 113:
                        if (curChar==69) jjstateSet[jjnewStateCnt++]=112;
                        break;
                        case 114:
                        if (curChar==74) jjstateSet[jjnewStateCnt++]=113;
                        break;
                        case 115:
                        if (curChar==78) jjCheckNAdd(114);
                        break;
                        case 116:
                        if (curChar==69&&kind>3) kind=3;
                        break;
                        case 117:
                        if (curChar==68) jjstateSet[jjnewStateCnt++]=116;
                        break;
                        case 118:
                        if (curChar==85) jjstateSet[jjnewStateCnt++]=117;
                        break;
                        case 119:
                        if (curChar==76) jjstateSet[jjnewStateCnt++]=118;
                        break;
                        case 120:
                        if (curChar==67) jjstateSet[jjnewStateCnt++]=119;
                        break;
                        case 121:
                        if (curChar==78) jjCheckNAdd(120);
                        break;
                        case 122:
                        if (curChar==82&&kind>3) kind=3;
                        break;
                        case 123:
                        if (curChar==65) jjstateSet[jjnewStateCnt++]=122;
                        break;
                        case 124:
                        if (curChar==77) jjstateSet[jjnewStateCnt++]=123;
                        break;
                        case 125:
                        if (curChar==77) jjstateSet[jjnewStateCnt++]=124;
                        break;
                        case 126:
                        if (curChar==65) jjstateSet[jjnewStateCnt++]=125;
                        break;
                        case 127:
                        if (curChar==82) jjstateSet[jjnewStateCnt++]=126;
                        break;
                        case 128:
                        if (curChar==71) jjstateSet[jjnewStateCnt++]=127;
                        break;
                        case 129:
                        if (curChar==95) jjstateSet[jjnewStateCnt++]=128;
                        break;
                        case 130:
                        if (curChar==69) jjstateSet[jjnewStateCnt++]=129;
                        break;
                        case 131:
                        if (curChar==68) jjstateSet[jjnewStateCnt++]=130;
                        break;
                        case 132:
                        if (curChar==85) jjstateSet[jjnewStateCnt++]=131;
                        break;
                        case 133:
                        if (curChar==76) jjstateSet[jjnewStateCnt++]=132;
                        break;
                        case 134:
                        if (curChar==67) jjstateSet[jjnewStateCnt++]=133;
                        break;
                        case 135:
                        if (curChar==78) jjCheckNAdd(134);
                        break;
                        case 136:
                        if (curChar==78&&kind>10) kind=10;
                        break;
                        case 137:
                        if (curChar==69) jjstateSet[jjnewStateCnt++]=136;
                        break;
                        case 138:
                        if (curChar==75) jjstateSet[jjnewStateCnt++]=137;
                        break;
                        case 139:
                        if (curChar==79) jjstateSet[jjnewStateCnt++]=138;
                        break;
                        case 140:
                        if (curChar==84) jjstateSet[jjnewStateCnt++]=139;
                        break;
                        case 141:
                        if (curChar==95) jjstateSet[jjnewStateCnt++]=140;
                        break;
                        case 142:
                        if (curChar==69) jjstateSet[jjnewStateCnt++]=141;
                        break;
                        case 143:
                        if (curChar==84) jjstateSet[jjnewStateCnt++]=142;
                        break;
                        case 144:
                        if (curChar==69) jjstateSet[jjnewStateCnt++]=143;
                        break;
                        case 145:
                        if (curChar==76) jjstateSet[jjnewStateCnt++]=144;
                        break;
                        case 146:
                        if (curChar==80) jjstateSet[jjnewStateCnt++]=145;
                        break;
                        case 147:
                        if (curChar==77) jjstateSet[jjnewStateCnt++]=146;
                        break;
                        case 148:
                        if (curChar==79) jjstateSet[jjnewStateCnt++]=147;
                        break;
                        case 149:
                        if (curChar==67) jjstateSet[jjnewStateCnt++]=148;
                        break;
                        case 150:
                        if (curChar==78) jjCheckNAdd(149);
                        break;
                        case 152:
                        if (curChar==95) jjCheckNAddTwoStates(152,153);
                        break;
                        case 154:
                        if ((0x100000001000L&l)!=0L&&kind>77) kind=77;
                        break;
                        case 155:
                        if (curChar==95) jjCheckNAddTwoStates(155,156);
                        break;
                        case 157:
                        if (curChar==95) jjCheckNAddTwoStates(157,158);
                        break;
                        case 161:
                        if (curChar==95) jjCheckNAddTwoStates(161,162);
                        break;
                        case 163:
                        if ((0x2000000020L&l)!=0L) jjAddStates(131,132);
                        break;
                        case 166:
                        if (curChar==95) jjCheckNAddTwoStates(166,167);
                        break;
                        case 169:
                        if (curChar==95) jjCheckNAddTwoStates(169,170);
                        break;
                        case 171:
                        if ((0x2000000020L&l)!=0L) jjAddStates(133,134);
                        break;
                        case 174:
                        if (curChar==95) jjCheckNAddTwoStates(174,175);
                        break;
                        case 177:
                        if (curChar==95) jjCheckNAddTwoStates(177,178);
                        break;
                        case 179:
                        if ((0x2000000020L&l)!=0L) jjAddStates(135,136);
                        break;
                        case 182:
                        if (curChar==95) jjCheckNAddTwoStates(182,183);
                        break;
                        case 186:
                        if ((0x100000001000000L&l)!=0L) jjstateSet[jjnewStateCnt++]=187;
                        break;
                        case 187:
                        if ((0x7e0000007eL&l)!=0L) jjAddStates(85,87);
                        break;
                        case 188:
                        if ((0x7e8000007eL&l)!=0L) jjCheckNAddTwoStates(188,189);
                        break;
                        case 189:
                        if ((0x7e0000007eL&l)!=0L) jjstateSet[jjnewStateCnt++]=154;
                        break;
                        case 191:
                        if (curChar==95) jjCheckNAddTwoStates(191,192);
                        break;
                        case 193:
                        if ((0x400000004L&l)!=0L) jjstateSet[jjnewStateCnt++]=194;
                        break;
                        case 195:
                        if (curChar==95) jjCheckNAddTwoStates(195,196);
                        break;
                        case 197:
                        if ((0x100000001000000L&l)!=0L) jjstateSet[jjnewStateCnt++]=198;
                        break;
                        case 198:
                        if ((0x7e0000007eL&l)==0L) break;
                        if (kind>78) kind=78;
                        jjAddStates(94,95);
                        break;
                        case 199:
                        if ((0x7e8000007eL&l)!=0L) jjCheckNAddTwoStates(199,200);
                        break;
                        case 200:
                        if ((0x7e0000007eL&l)!=0L&&kind>78) kind=78;
                        break;
                        case 202:
                        if (curChar==95) jjCheckNAddTwoStates(202,203);
                        break;
                        case 204:
                        if ((0x400000004L&l)!=0L) jjstateSet[jjnewStateCnt++]=205;
                        break;
                        case 206:
                        if (curChar==95) jjCheckNAddTwoStates(206,207);
                        break;
                        case 208:
                        if ((0x100000001000000L&l)!=0L) jjstateSet[jjnewStateCnt++]=209;
                        break;
                        case 209:
                        if ((0x7e0000007eL&l)!=0L) jjAddStates(100,103);
                        break;
                        case 210:
                        if ((0x7e8000007eL&l)!=0L) jjCheckNAddTwoStates(210,211);
                        break;
                        case 211:
                        if ((0x7e0000007eL&l)!=0L) jjAddStates(104,105);
                        break;
                        case 213:
                        if ((0x1000000010000L&l)!=0L) jjAddStates(137,138);
                        break;
                        case 216:
                        if (curChar==95) jjCheckNAddTwoStates(216,217);
                        break;
                        case 218:
                        if ((0x100000001000000L&l)!=0L) jjAddStates(139,140);
                        break;
                        case 219:
                        if ((0x7e0000007eL&l)!=0L) jjAddStates(109,111);
                        break;
                        case 220:
                        if ((0x7e8000007eL&l)!=0L) jjCheckNAddTwoStates(220,221);
                        break;
                        case 221:
                        if ((0x7e0000007eL&l)!=0L) jjstateSet[jjnewStateCnt++]=222;
                        break;
                        case 223:
                        if ((0x7e0000007eL&l)!=0L) jjAddStates(112,114);
                        break;
                        case 224:
                        if ((0x7e8000007eL&l)!=0L) jjCheckNAddTwoStates(224,225);
                        break;
                        case 225:
                        if ((0x7e0000007eL&l)!=0L) jjstateSet[jjnewStateCnt++]=226;
                        break;
                        case 226:
                        if ((0x1000000010000L&l)!=0L) jjAddStates(141,142);
                        break;
                        case 229:
                        if (curChar==95) jjCheckNAddTwoStates(229,230);
                        break;
                        default:
                        break;
                    }
                }
                while (i!=startsAt);
            }
            else {
                int hiByte=(int)(curChar>>8);
                int i1=hiByte>>6;
                long l1=1L<<(hiByte&077);
                int i2=(curChar&0xff)>>6;
                long l2=1L<<(curChar&077);
                do {
                    switch(jjstateSet[--i]) {
                        case 6:
                        if (!jjCanMove_0(hiByte,i1,i2,l1,l2)) break;
                        if (kind>141) kind=141;
                        jjCheckNAdd(99);
                        break;
                        case 17:
                        case 99:
                        if (!jjCanMove_1(hiByte,i1,i2,l1,l2)) break;
                        if (kind>141) kind=141;
                        jjCheckNAdd(99);
                        break;
                        case 16:
                        if (!jjCanMove_1(hiByte,i1,i2,l1,l2)) break;
                        if (kind>141) kind=141;
                        jjCheckNAdd(99);
                        break;
                        case 15:
                        if (!jjCanMove_1(hiByte,i1,i2,l1,l2)) break;
                        if (kind>141) kind=141;
                        jjCheckNAdd(99);
                        break;
                        case 231:
                        if (!jjCanMove_1(hiByte,i1,i2,l1,l2)) break;
                        if (kind>141) kind=141;
                        jjCheckNAdd(99);
                        break;
                        case 105:
                        if (!jjCanMove_1(hiByte,i1,i2,l1,l2)) break;
                        if (kind>141) kind=141;
                        jjCheckNAdd(99);
                        break;
                        case 42:
                        if (!jjCanMove_1(hiByte,i1,i2,l1,l2)) break;
                        if (kind>141) kind=141;
                        jjCheckNAdd(99);
                        break;
                        case 62:
                        if (!jjCanMove_0(hiByte,i1,i2,l1,l2)) break;
                        if (kind>15) kind=15;
                        jjCheckNAdd(63);
                        break;
                        case 63:
                        if (!jjCanMove_1(hiByte,i1,i2,l1,l2)) break;
                        if (kind>15) kind=15;
                        jjCheckNAdd(63);
                        break;
                        case 66:
                        if (jjCanMove_2(hiByte,i1,i2,l1,l2)&&kind>18) kind=18;
                        break;
                        case 88:
                        if (jjCanMove_2(hiByte,i1,i2,l1,l2)) jjstateSet[jjnewStateCnt++]=84;
                        break;
                        case 93:
                        if (jjCanMove_2(hiByte,i1,i2,l1,l2)) jjCheckNAddStates(15,17);
                        break;
                        default:
                        break;
                    }
                }
                while (i!=startsAt);
            }
            if (kind!=0x7fffffff) {
                jjmatchedKind=kind;
                jjmatchedPos=curPos;
                kind=0x7fffffff;
            }
            ++curPos;
            if (jjmatchedKind!=0&&jjmatchedKind!=0x7fffffff) {
                if (trace_enabled) LOGGER.info("   Currently matched the first "+(jjmatchedPos+1)+" characters as a "+tokenImage[jjmatchedKind]+" token.");
            }
            if ((i=jjnewStateCnt)==(startsAt=231-(jjnewStateCnt=startsAt))) return curPos;
            int retval=input_stream.readChar();
            if (retval>=0) {
                curChar=(char) retval;
            }
            else {
                return curPos;
            }
            if (trace_enabled) LOGGER.info(""+"<"+lexicalState+">"+ParseException.addEscapes(String.valueOf(curChar))+" ("+(int) curChar+") "+"at line "+input_stream.getEndLine()+" column "+input_stream.getEndColumn());
        }
    }

    private int jjStartNfaWithStates_IN_SINGLE_LINE_COMMENT(int pos,int kind,int state) {
        jjmatchedKind=kind;
        jjmatchedPos=pos;
        if (trace_enabled) LOGGER.info("   No more string literal token matches are possible.");
        if (trace_enabled) LOGGER.info("   Currently matched the first "+(jjmatchedPos+1)+" characters as a "+tokenImage[jjmatchedKind]+" token.");
        int retval=input_stream.readChar();
        if (retval>=0) {
            curChar=(char) retval;
        }
        else {
            return pos+1;
        }
        if (trace_enabled) LOGGER.info(""+"<IN_SINGLE_LINE_COMMENT>"+"Current character : "+ParseException.addEscapes(String.valueOf(curChar))+" ("+(int) curChar+") "+"at line "+input_stream.getEndLine()+" column "+input_stream.getEndColumn());
        return jjMoveNfa_IN_SINGLE_LINE_COMMENT(state,pos+1);
    }

    private int jjMoveStringLiteralDfa0_IN_SINGLE_LINE_COMMENT() {
        return jjMoveNfa_IN_SINGLE_LINE_COMMENT(1,0);
    }

    private int jjMoveNfa_IN_SINGLE_LINE_COMMENT(int startState,int curPos) {
        int startsAt=0;
        jjnewStateCnt=4;
        int i=1;
        jjstateSet[0]=startState;
        int kind=0x7fffffff;
        while (true) {
            if (++jjround==0x7fffffff) {
                ReInitRounds();
            }
            if (curChar<64) {
                long l=1L<<curChar;
                do {
                    switch(jjstateSet[--i]) {
                        case 1:
                         {
                            if (kind>23) kind=23;
                        }
                        if ((0x2400L&l)!=0L) {
                            if (kind>20) kind=20;
                        }
                        if (curChar==13) jjstateSet[jjnewStateCnt++]=0;
                        break;
                        case 0:
                        if (curChar==10&&kind>20) kind=20;
                        break;
                        case 2:
                        if ((0x2400L&l)!=0L&&kind>20) kind=20;
                        break;
                        case 3:
                        if (kind>23) kind=23;
                        break;
                        default:
                        break;
                    }
                }
                while (i!=startsAt);
            }
            else if (curChar<128) {
                long l=1L<<(curChar&077);
                do {
                    switch(jjstateSet[--i]) {
                        case 1:
                        kind=23;
                        break;
                        default:
                        break;
                    }
                }
                while (i!=startsAt);
            }
            else {
                int hiByte=(int)(curChar>>8);
                int i1=hiByte>>6;
                long l1=1L<<(hiByte&077);
                int i2=(curChar&0xff)>>6;
                long l2=1L<<(curChar&077);
                do {
                    switch(jjstateSet[--i]) {
                        case 1:
                        if (jjCanMove_2(hiByte,i1,i2,l1,l2)&&kind>23) kind=23;
                        break;
                        default:
                        break;
                    }
                }
                while (i!=startsAt);
            }
            if (kind!=0x7fffffff) {
                jjmatchedKind=kind;
                jjmatchedPos=curPos;
                kind=0x7fffffff;
            }
            ++curPos;
            if (jjmatchedKind!=0&&jjmatchedKind!=0x7fffffff) {
                if (trace_enabled) LOGGER.info("   Currently matched the first "+(jjmatchedPos+1)+" characters as a "+tokenImage[jjmatchedKind]+" token.");
            }
            if ((i=jjnewStateCnt)==(startsAt=4-(jjnewStateCnt=startsAt))) return curPos;
            int retval=input_stream.readChar();
            if (retval>=0) {
                curChar=(char) retval;
            }
            else {
                return curPos;
            }
            if (trace_enabled) LOGGER.info(""+"<"+lexicalState+">"+ParseException.addEscapes(String.valueOf(curChar))+" ("+(int) curChar+") "+"at line "+input_stream.getEndLine()+" column "+input_stream.getEndColumn());
        }
    }

    private int jjStartNfa_IN_FORMAL_COMMENT(int pos,long active0) {
        return jjMoveNfa_IN_FORMAL_COMMENT(jjStopStringLiteralDfa_IN_FORMAL_COMMENT(pos,active0),pos+1);
    }

    private final int jjStopStringLiteralDfa_IN_FORMAL_COMMENT(int pos,long active0) {
        if (trace_enabled) LOGGER.info("   No more string literal token matches are possible.");
        switch(pos) {
            case 0:
            if ((active0&0x200000L)!=0L) {
                jjmatchedKind=23;
                return-1;
            }
            return-1;
            case 1:
            if ((active0&0x200000L)!=0L) {
                if (jjmatchedPos==0) {
                    jjmatchedKind=23;
                    jjmatchedPos=0;
                }
                return-1;
            }
            return-1;
            default:
            return-1;
        }
    }

    private int jjStartNfaWithStates_IN_FORMAL_COMMENT(int pos,int kind,int state) {
        jjmatchedKind=kind;
        jjmatchedPos=pos;
        if (trace_enabled) LOGGER.info("   No more string literal token matches are possible.");
        if (trace_enabled) LOGGER.info("   Currently matched the first "+(jjmatchedPos+1)+" characters as a "+tokenImage[jjmatchedKind]+" token.");
        int retval=input_stream.readChar();
        if (retval>=0) {
            curChar=(char) retval;
        }
        else {
            return pos+1;
        }
        if (trace_enabled) LOGGER.info(""+"<IN_FORMAL_COMMENT>"+"Current character : "+ParseException.addEscapes(String.valueOf(curChar))+" ("+(int) curChar+") "+"at line "+input_stream.getEndLine()+" column "+input_stream.getEndColumn());
        return jjMoveNfa_IN_FORMAL_COMMENT(state,pos+1);
    }

    private int jjMoveStringLiteralDfa0_IN_FORMAL_COMMENT() {
        switch(curChar) {
            case 42:
            return jjMoveStringLiteralDfa1_IN_FORMAL_COMMENT(0x200000L);
            default:
            if (trace_enabled) LOGGER.info("   No string literal matches possible.");
            return jjMoveNfa_IN_FORMAL_COMMENT(0,0);
        }
    }

    private int jjMoveStringLiteralDfa1_IN_FORMAL_COMMENT(long active0) {
        int retval=input_stream.readChar();
        if (retval>=0) {
            curChar=(char) retval;
        }
        else {
            jjStopStringLiteralDfa_IN_FORMAL_COMMENT(0,active0);
            if (trace_enabled&&jjmatchedKind!=0&&jjmatchedKind!=0x7fffffff) {
                LOGGER.info("    Currently matched the first "+(jjmatchedPos+1)+" characters as a "+tokenImage[jjmatchedKind]+" token. ");
            }
            return 1;
        }
        if (trace_enabled) LOGGER.info(""+"<IN_FORMAL_COMMENT>"+"Current character : "+ParseException.addEscapes(String.valueOf(curChar))+" ("+(int) curChar+") at line "+input_stream.getEndLine()+" column "+input_stream.getEndColumn());
        switch(curChar) {
            case 47:
            if ((active0&0x200000L)!=0L) return jjStopAtPos(1,21);
            break;
            default:
            if (trace_enabled) LOGGER.info("   No string literal matches possible.");
            break;
        }
        return jjStartNfa_IN_FORMAL_COMMENT(0,active0);
    }

    private int jjMoveNfa_IN_FORMAL_COMMENT(int startState,int curPos) {
        int startsAt=0;
        jjnewStateCnt=1;
        int i=1;
        jjstateSet[0]=startState;
        int kind=0x7fffffff;
        while (true) {
            if (++jjround==0x7fffffff) {
                ReInitRounds();
            }
            if (curChar<64) {
                long l=1L<<curChar;
                do {
                    switch(jjstateSet[--i]) {
                        case 0:
                        kind=23;
                        break;
                        default:
                        break;
                    }
                }
                while (i!=startsAt);
            }
            else if (curChar<128) {
                long l=1L<<(curChar&077);
                do {
                    switch(jjstateSet[--i]) {
                        case 0:
                        kind=23;
                        break;
                        default:
                        break;
                    }
                }
                while (i!=startsAt);
            }
            else {
                int hiByte=(int)(curChar>>8);
                int i1=hiByte>>6;
                long l1=1L<<(hiByte&077);
                int i2=(curChar&0xff)>>6;
                long l2=1L<<(curChar&077);
                do {
                    switch(jjstateSet[--i]) {
                        case 0:
                        if (jjCanMove_2(hiByte,i1,i2,l1,l2)&&kind>23) kind=23;
                        break;
                        default:
                        break;
                    }
                }
                while (i!=startsAt);
            }
            if (kind!=0x7fffffff) {
                jjmatchedKind=kind;
                jjmatchedPos=curPos;
                kind=0x7fffffff;
            }
            ++curPos;
            if (jjmatchedKind!=0&&jjmatchedKind!=0x7fffffff) {
                if (trace_enabled) LOGGER.info("   Currently matched the first "+(jjmatchedPos+1)+" characters as a "+tokenImage[jjmatchedKind]+" token.");
            }
            if ((i=jjnewStateCnt)==(startsAt=1-(jjnewStateCnt=startsAt))) return curPos;
            int retval=input_stream.readChar();
            if (retval>=0) {
                curChar=(char) retval;
            }
            else {
                return curPos;
            }
            if (trace_enabled) LOGGER.info(""+"<"+lexicalState+">"+ParseException.addEscapes(String.valueOf(curChar))+" ("+(int) curChar+") "+"at line "+input_stream.getEndLine()+" column "+input_stream.getEndColumn());
        }
    }

    private int jjStartNfa_IN_MULTI_LINE_COMMENT(int pos,long active0) {
        return jjMoveNfa_IN_MULTI_LINE_COMMENT(jjStopStringLiteralDfa_IN_MULTI_LINE_COMMENT(pos,active0),pos+1);
    }

    private final int jjStopStringLiteralDfa_IN_MULTI_LINE_COMMENT(int pos,long active0) {
        if (trace_enabled) LOGGER.info("   No more string literal token matches are possible.");
        switch(pos) {
            case 0:
            if ((active0&0x400000L)!=0L) {
                jjmatchedKind=23;
                return-1;
            }
            return-1;
            case 1:
            if ((active0&0x400000L)!=0L) {
                if (jjmatchedPos==0) {
                    jjmatchedKind=23;
                    jjmatchedPos=0;
                }
                return-1;
            }
            return-1;
            default:
            return-1;
        }
    }

    private int jjStartNfaWithStates_IN_MULTI_LINE_COMMENT(int pos,int kind,int state) {
        jjmatchedKind=kind;
        jjmatchedPos=pos;
        if (trace_enabled) LOGGER.info("   No more string literal token matches are possible.");
        if (trace_enabled) LOGGER.info("   Currently matched the first "+(jjmatchedPos+1)+" characters as a "+tokenImage[jjmatchedKind]+" token.");
        int retval=input_stream.readChar();
        if (retval>=0) {
            curChar=(char) retval;
        }
        else {
            return pos+1;
        }
        if (trace_enabled) LOGGER.info(""+"<IN_MULTI_LINE_COMMENT>"+"Current character : "+ParseException.addEscapes(String.valueOf(curChar))+" ("+(int) curChar+") "+"at line "+input_stream.getEndLine()+" column "+input_stream.getEndColumn());
        return jjMoveNfa_IN_MULTI_LINE_COMMENT(state,pos+1);
    }

    private int jjMoveStringLiteralDfa0_IN_MULTI_LINE_COMMENT() {
        switch(curChar) {
            case 42:
            return jjMoveStringLiteralDfa1_IN_MULTI_LINE_COMMENT(0x400000L);
            default:
            if (trace_enabled) LOGGER.info("   No string literal matches possible.");
            return jjMoveNfa_IN_MULTI_LINE_COMMENT(0,0);
        }
    }

    private int jjMoveStringLiteralDfa1_IN_MULTI_LINE_COMMENT(long active0) {
        int retval=input_stream.readChar();
        if (retval>=0) {
            curChar=(char) retval;
        }
        else {
            jjStopStringLiteralDfa_IN_MULTI_LINE_COMMENT(0,active0);
            if (trace_enabled&&jjmatchedKind!=0&&jjmatchedKind!=0x7fffffff) {
                LOGGER.info("    Currently matched the first "+(jjmatchedPos+1)+" characters as a "+tokenImage[jjmatchedKind]+" token. ");
            }
            return 1;
        }
        if (trace_enabled) LOGGER.info(""+"<IN_MULTI_LINE_COMMENT>"+"Current character : "+ParseException.addEscapes(String.valueOf(curChar))+" ("+(int) curChar+") at line "+input_stream.getEndLine()+" column "+input_stream.getEndColumn());
        switch(curChar) {
            case 47:
            if ((active0&0x400000L)!=0L) return jjStopAtPos(1,22);
            break;
            default:
            if (trace_enabled) LOGGER.info("   No string literal matches possible.");
            break;
        }
        return jjStartNfa_IN_MULTI_LINE_COMMENT(0,active0);
    }

    private int jjMoveNfa_IN_MULTI_LINE_COMMENT(int startState,int curPos) {
        int startsAt=0;
        jjnewStateCnt=1;
        int i=1;
        jjstateSet[0]=startState;
        int kind=0x7fffffff;
        while (true) {
            if (++jjround==0x7fffffff) {
                ReInitRounds();
            }
            if (curChar<64) {
                long l=1L<<curChar;
                do {
                    switch(jjstateSet[--i]) {
                        case 0:
                        kind=23;
                        break;
                        default:
                        break;
                    }
                }
                while (i!=startsAt);
            }
            else if (curChar<128) {
                long l=1L<<(curChar&077);
                do {
                    switch(jjstateSet[--i]) {
                        case 0:
                        kind=23;
                        break;
                        default:
                        break;
                    }
                }
                while (i!=startsAt);
            }
            else {
                int hiByte=(int)(curChar>>8);
                int i1=hiByte>>6;
                long l1=1L<<(hiByte&077);
                int i2=(curChar&0xff)>>6;
                long l2=1L<<(curChar&077);
                do {
                    switch(jjstateSet[--i]) {
                        case 0:
                        if (jjCanMove_2(hiByte,i1,i2,l1,l2)&&kind>23) kind=23;
                        break;
                        default:
                        break;
                    }
                }
                while (i!=startsAt);
            }
            if (kind!=0x7fffffff) {
                jjmatchedKind=kind;
                jjmatchedPos=curPos;
                kind=0x7fffffff;
            }
            ++curPos;
            if (jjmatchedKind!=0&&jjmatchedKind!=0x7fffffff) {
                if (trace_enabled) LOGGER.info("   Currently matched the first "+(jjmatchedPos+1)+" characters as a "+tokenImage[jjmatchedKind]+" token.");
            }
            if ((i=jjnewStateCnt)==(startsAt=1-(jjnewStateCnt=startsAt))) return curPos;
            int retval=input_stream.readChar();
            if (retval>=0) {
                curChar=(char) retval;
            }
            else {
                return curPos;
            }
            if (trace_enabled) LOGGER.info(""+"<"+lexicalState+">"+ParseException.addEscapes(String.valueOf(curChar))+" ("+(int) curChar+") "+"at line "+input_stream.getEndLine()+" column "+input_stream.getEndColumn());
        }
    }

    private int jjMoveStringLiteralDfa0_PHONY() {
        switch(curChar) {
            case 62:
            return jjMoveStringLiteralDfa1_PHONY(0x1800L);
            default:
            if (trace_enabled) LOGGER.info("   No string literal matches possible.");
            return 1;
        }
    }

    private int jjMoveStringLiteralDfa1_PHONY(long active2) {
        int retval=input_stream.readChar();
        if (retval>=0) {
            curChar=(char) retval;
        }
        else {
            return 1;
        }
        if (trace_enabled) LOGGER.info(""+"<PHONY>"+"Current character : "+ParseException.addEscapes(String.valueOf(curChar))+" ("+(int) curChar+") at line "+input_stream.getEndLine()+" column "+input_stream.getEndColumn());
        switch(curChar) {
            case 62:
            if ((active2&0x800L)!=0L) {
                jjmatchedKind=139;
                jjmatchedPos=1;
            }
            return jjMoveStringLiteralDfa2_PHONY(active2,0x1000L);
            default:
            if (trace_enabled) LOGGER.info("   No string literal matches possible.");
            return 2;
        }
    }

    private int jjMoveStringLiteralDfa2_PHONY(long old2,long active2) {
        active2=active2&old2;
        if ((active2)==0L) return 2;
        int retval=input_stream.readChar();
        if (retval>=0) {
            curChar=(char) retval;
        }
        else {
            return 2;
        }
        if (trace_enabled) LOGGER.info(""+"<PHONY>"+"Current character : "+ParseException.addEscapes(String.valueOf(curChar))+" ("+(int) curChar+") at line "+input_stream.getEndLine()+" column "+input_stream.getEndColumn());
        switch(curChar) {
            case 62:
            if ((active2&0x1000L)!=0L) return jjStopAtPos(2,140);
            break;
            default:
            if (trace_enabled) LOGGER.info("   No string literal matches possible.");
            return 3;
        }
        return 3;
    }

    private int jjMoveNfa_PHONY(int startState,int curPos) {
        return curPos;
    }

    static final int[] jjnextStates={152,153,154,155,156,157,158,159,169,170,171,177,178,179,78,90,93,94,81,88,186,190,193,197,201,204,208,218,71,72,73,78,73,78,76,78,79,75,78,75,76,78,79,90,92,93,94,160,163,78,161,162,163,78,163,78,166,78,168,165,78,165,166,78,168,174,78,176,173,78,173,174,78,176,179,78,182,78,184,181,78,181,182,78,184,188,189,154,191,192,154,195,196,154,199,200,202,203,206,207,210,211,212,213,212,213,216,217,78,220,221,222,224,225,226,229,230,78,105,115,121,135,150,74,75,82,85,87,91,95,97,164,165,172,173,180,181,214,215,219,222,227,228};
    private int tabSize=8;
    /**
     * sets the size of a tab for location reporting 
     * purposes, default value is 8.
     */
    public void setTabSize(int tabSize) {
        this.tabSize=tabSize;
    }

    /**
     * returns the size of a tab for location reporting 
     * purposes, default value is 8.
     */
    public int getTabSize() {
        return tabSize;
    }

}
