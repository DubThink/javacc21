/* Generated by: JavaCC 21 Parser Generator. Do not edit. BaseNode.java */
package com.javacc.parser;

import freemarker.template.*;
import java.util.*;

import com.javacc.Grammar;

import java.lang.reflect.*;
@SuppressWarnings("rawtypes")
public class BaseNode implements Node,JavaCCConstants,TemplateHashModel {
    protected String getLiteralText() {
        StringBuilder buf=new StringBuilder();
        for (Token t : Nodes.getAllTokens(this,true,true)) {
            buf.append(t);
        }
        return buf.toString();
    }

    protected String getInnerText() {
        StringBuilder buf=new StringBuilder();
        List<Token>tokens=Nodes.getAllTokens(this,true,true);
        boolean outputOpeningBrace=false;
        for (int i=0; i<tokens.size()-1; i++) {
            Token t=tokens.get(i);
            if (outputOpeningBrace) {
                buf.append(t);
            }
            else if (t.getId()==LBRACE) {
                outputOpeningBrace=true;
            }
        }
        return buf.toString();
    }

    public ListIterator<Node>iterator() {
        return Nodes.iterator(this);
    }

    public void prepend(Node n) {
        ListIterator<Node>iterator=iterator();
        iterator.add(n);
    }

    public String getAsString() {
        return getLiteralText();
    }

    public boolean isEmpty() {
        return Nodes.getRealTokens(this).size()==0;
    }

    public TemplateModel get(String key) throws TemplateModelException {
        Method method=null;
        String methodName="get"+key.substring(0,1).toUpperCase()+key.substring(1);
        try {
            method=this.getClass().getMethod(methodName);
        }
        catch(NoSuchMethodException e) {
            return null;
        }
        try {
            Object result=method.invoke(this);
            return Configuration.getCurrentObjectWrapper().wrap(result);
        }
        catch(IllegalAccessException e) {
            throw new TemplateModelException(e);
        }
        catch(InvocationTargetException e) {
            Throwable cause=e.getCause();
            if (cause instanceof TemplateModelException) {
                throw(TemplateModelException) cause;
            }
            if (cause instanceof Exception) {
                throw new TemplateModelException((Exception) cause);
            }
            throw(Error) cause;
        }
    }

    private Grammar grammar;
    public Grammar getGrammar() {
        if (grammar==null) {
            if (parent!=null) {
                grammar=parent.getGrammar();
            }
            if (grammar==null&&!children.isEmpty()) {
                grammar=children.get(0).getGrammar();
            }
        }
        return grammar;
    }

    public void setGrammar(Grammar grammar) {
        this.grammar=grammar;
    }

    static private Class listClass=ArrayList.class;
    static public void setListClass(Class<?extends List>listClass) {
        BaseNode.listClass=listClass;
    }

    @SuppressWarnings("unchecked")
    private List<Node>newList() {
        try {
            return(List<Node>) listClass.newInstance();
        }
        catch(Exception e) {
            throw new RuntimeException(e);
        }
    }

    protected Node parent;
    protected List<Node>children=newList();
    private int beginLine,beginColumn,endLine,endColumn;
    private String inputSource;
    private Map<String,Object>attributes;
    public void open() {
    }

    public void close() {
    }

    public void setParent(Node n) {
        parent=n;
    }

    public Node getParent() {
        return parent;
    }

    public void addChild(Node n) {
        children.add(n);
        n.setParent(this);
    }

    public void addChild(int i,Node n) {
        children.add(i,n);
        n.setParent(this);
    }

    public Node getChild(int i) {
        return children.get(i);
    }

    public void setChild(int i,Node n) {
        children.set(i,n);
        n.setParent(this);
    }

    public Node removeChild(int i) {
        return children.remove(i);
    }

    public boolean removeChild(Node n) {
        return children.remove(n);
    }

    public void clearChildren() {
        children.clear();
    }

    public int getChildCount() {
        return children.size();
    }

    public List<Node>children() {
        return Collections.unmodifiableList(children);
    }

    public Object getAttribute(String name) {
        return attributes==null?null:
        attributes.get(name);
    }

    public void setAttribute(String name,Object value) {
        if (attributes==null) {
            attributes=new HashMap<String,Object>();
        }
        attributes.put(name,value);
    }

    public boolean hasAttribute(String name) {
        return attributes==null?false:
        attributes.containsKey(name);
    }

    public Set<String>getAttributeNames() {
        if (attributes==null) return Collections.emptySet();
        return attributes.keySet();
    }

    public void setInputSource(String inputSource) {
        this.inputSource=inputSource;
    }

    public String getInputSource() {
        return inputSource;
    }

    public int getBeginLine() {
        if (beginLine<=0) {
            if (!children.isEmpty()) {
                beginLine=children.get(0).getBeginLine();
                beginColumn=children.get(0).getBeginColumn();
            }
        }
        return beginLine;
    }

    public int getEndLine() {
        if (endLine<=0) {
            if (!children.isEmpty()) {
                Node last=children.get(children.size()-1);
                endLine=last.getEndLine();
                endColumn=last.getEndColumn();
            }
        }
        return endLine;
    }

    public int getBeginColumn() {
        if (beginColumn<=0) {
            if (!children.isEmpty()) {
                beginLine=children.get(0).getBeginLine();
                beginColumn=children.get(0).getBeginColumn();
            }
        }
        return beginColumn;
    }

    public int getEndColumn() {
        if (endColumn<=0) {
            if (!children.isEmpty()) {
                Node last=children.get(children.size()-1);
                endLine=last.getEndLine();
                endColumn=last.getEndColumn();
            }
        }
        return endColumn;
    }

    public void setBeginLine(int beginLine) {
        this.beginLine=beginLine;
    }

    public void setEndLine(int endLine) {
        this.endLine=endLine;
    }

    public void setBeginColumn(int beginColumn) {
        this.beginColumn=beginColumn;
    }

    public void setEndColumn(int endColumn) {
        this.endColumn=endColumn;
    }

    public TemplateSequenceModel getChildNodes() {
        SimpleSequence seq=new SimpleSequence();
        for (Node child : children) {
            seq.add(child);
        }
        return seq;
    }

    public TemplateNodeModel getParentNode() {
        return this.parent;
    }

    public String getNodeName() {
        return this.getClass().getSimpleName();
    }

    public String getNodeType() {
        return"";
    }

    public String getNodeNamespace() {
        return null;
    }

    public String toString() {
        StringBuilder buf=new StringBuilder();
        for (Token t : Nodes.getRealTokens(this)) {
            buf.append(t);
        }
        return buf.toString();
    }

}
