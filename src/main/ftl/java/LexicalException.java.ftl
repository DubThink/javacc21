/* Generated by: ${generated_by}. ${filename} */
[#if grammar.parserPackage?has_content]
package ${grammar.parserPackage};
[/#if]
 

@SuppressWarnings("serial")
public class LexicalException extends RuntimeException
{
 
   /**
    * Replaces unprintable characters by their escaped (or unicode escaped)
    * equivalents in the given string
    */
  
   /**
    * Returns a detailed message for the Error when it is thrown by the
    * token manager to indicate a lexical error.
    * Parameters : 
    *    EOFSeen     : indicates if EOF caused the lexical error
    *    curLexState : lexical state in which this error occurred
    *    errorLine   : line number when the error occurred
    *    errorColumn : column number when the error occurred
    *    errorAfter  : prefix that was seen before this error occurred
    *    curChar     : the offending character
    * Note: You can customize the lexical error message by modifying this method.
    */
   protected static String lexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar, String inputSource) {
[#--      return("Lexical error at line " +
           errorLine + ", column " +
           errorColumn + " in " + inputSource + ".  Encountered: " +
           (EOFSeen ? "<EOF> " : ("\"" + addEscapes(String.valueOf(curChar)) + "\"") + " (" + (int)curChar + "), ") +
           "after : \"" + addEscapes(errorAfter) + "\""); --]
         String oops = "Lexical error. Encountered: ";
         String encountered = EOFSeen ? "<EOF>" : "\"" + addEscapes(String.valueOf(curChar)) + "\" (" + (int) curChar + ") ";
         String location = " at line " + errorLine + ", column " + errorColumn + " in " + inputSource + ". ";
         return oops + encountered + location;
   }


   /*
    * Constructors of various flavors follow.
    */

   public LexicalException(String message) {
      super(message);
   }

   /** Full Constructor. */
   public LexicalException(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar, String inputSource) {
      this(lexicalError(EOFSeen, lexState, errorLine, errorColumn, errorAfter, curChar, inputSource));
   }
   
   static public String addEscapes(String s) {
       return ParseException.addEscapes(s);
   }
   
}
