/* Generated by: ${generated_by}. ${filename} */
[#if grammar.parserPackage?has_content]
   package ${grammar.parserPackage};
[/#if]

   import java.util.EnumSet;


/**
 * This exception is thrown when parse errors are encountered.
 * You can explicitly create objects of this exception type by
 * calling the method generateParseException in the generated
 * parser.
 *
 * You can modify this class to customize your error reporting
 * mechanisms so long as you retain the public fields.
 */

@SuppressWarnings("serial")
public class ParseException extends Exception implements ${grammar.constantsClassName} {

  // The token we tripped up on.
  private Token token;
  //We were expecting one of these token types
  private EnumSet<TokenType> expectedTypes;

  public ParseException() {
    super();
  }
  
  
  public ParseException(Token token, EnumSet<TokenType> expectedTypes) {
      this.token = token;
      this.expectedTypes = expectedTypes;
  }
  
  public ParseException(String message) {
    super(message);
  }
  
  public ParseException(Token token) {
     this.token = token;
  }
  
  
  public String getMessage() {
     String msg = super.getMessage();
     if (token == null && expectedTypes == null) {
        return msg;
     }
     StringBuilder buf = new StringBuilder();
     if (msg != null) buf.append(msg);
     buf.append("\nEncountered an error on (or somewhere around) " + token.getLocation());
     if (expectedTypes != null) {
         buf.append("\nWas expecting one of the following:\n");
         boolean isFirst = true;
         for (TokenType type : expectedTypes) {
             if (!isFirst) buf.append(", ");
             isFirst = false;
             buf.append(type);
         }
     }
     buf.append("\nFound: " + token + " of type " + token.getType());
     return buf.toString();
  }
  
 static public String addEscapes(String str) {
      StringBuilder retval = new StringBuilder();
      char ch;
      for (int i = 0; i < str.length(); i++) {
        switch (str.charAt(i))
        {
           case 0 :
              continue;
           case '\b':
              retval.append("\\b");
              continue;
           case '\t':
              retval.append("\\t");
              continue;
           case '\n':
              retval.append("\\n");
              continue;
           case '\f':
              retval.append("\\f");
              continue;
           case '\r':
              retval.append("\\r");
              continue;
           case '\"':
              retval.append("\\\"");
              continue;
           case '\'':
              retval.append("\\\'");
              continue;
           case '\\':
              retval.append("\\\\");
              continue;
           default:
              if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {
                 String s = "0000" + java.lang.Integer.toString(ch, 16);
                 retval.append("\\u" + s.substring(s.length() - 4, s.length()));
              } else {
                 retval.append(ch);
              }
              continue;
        }
      }
      return retval.toString();
   }
  
}
