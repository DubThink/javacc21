[#ftl strict_vars=true]
[#--
/* Copyright (c) 2008-2020 Jonathan Revusky, revusky@javacc.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notices,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary formnt must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name Jonathan Revusky, Sun Microsystems, Inc.
 *       nor the names of any contributors may be used to endorse 
 *       or promote products derived from this software without specific prior written 
 *       permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */
 --]
/* Generated by: ${generated_by}. ${filename} */

[#import "ParserProductions.java.ftl" as parserCode ]
[#var parserData=grammar.parserData]
[#var hasPhase2=parserData.phase2Expansions?size != 0]
[#var tokenCount=grammar.lexerData.tokenCount]

[#if grammar.parserPackage?has_content]
package ${grammar.parserPackage};
[/#if]

[#if grammar.nodePackage?has_content && grammar.parserPackage! != grammar.nodePackage]
import ${grammar.nodePackage}.*;  
[/#if]
import java.util.*;
import java.util.concurrent.CancellationException;
import java.util.logging.*;
import java.io.*;

@SuppressWarnings("unused")
public class ${grammar.parserClassName} implements ${grammar.constantsClassName} {

    private static final java.util.logging.Logger LOGGER = Logger.getLogger(${grammar.parserClassName}.class.getName());
    
[#if grammar.options.debugParser]
     static {
         LOGGER.setLevel(Level.FINEST);
     }
[/#if]    

    public static void setLogLevel(Level level) {
        LOGGER.setLevel(level);
        Logger.getGlobal().getParent().getHandlers()[0].setLevel(level);
    }
    
private boolean cancelled;
public void cancel() {cancelled = true;}
public boolean isCancelled() {return cancelled;}
[#if grammar.options.faultTolerant]
    private boolean tolerantParsing= true;
    private List<ParsingProblem> parsingProblems;
    
    public void addParsingProblem(ParsingProblem problem) {
        if (parsingProblems == null) {
            parsingProblems = new ArrayList<>();
        }
        parsingProblems.add(problem);
    }
    
    public List<ParsingProblem> getParsingProblems() {
        return parsingProblems;
    }
    
    public boolean hasParsingProblems() {
        return parsingProblems != null && !parsingProblems.isEmpty();
    }

[#else]
    private final boolean tolerantParsing = false;
[/#if]
    public boolean isParserTolerant() {return tolerantParsing;}
    
    public void setParserTolerant(boolean tolerantParsing) {
      [#if grammar.options.faultTolerant]
        this.tolerantParsing = tolerantParsing;
      [#else]
        if (tolerantParsing) {
            throw new UnsupportedOperationException("This parser was not built with that feature!");
        } 
      [/#if]
    }

[#if grammar.options.userDefinedLexer]
  /** User defined Lexer. */
  public Lexer token_source;
  String inputSource = "input";
[#else]
  /** Generated Lexer. */
  public ${grammar.lexerClassName} token_source;
  
  public void setInputSource(String inputSource) {
      token_source.setInputSource(inputSource);
  }
  
[/#if]

  String getInputSource() {
      return token_source.getInputSource();
  }
  
  [#if grammar.options.treeBuildingEnabled]
   [#embed "TreeBuildingCode.java.ftl"]
[/#if]

[@parserCode.ProductionsCode /]

[#if hasPhase2]
   [@parserCode.Phase2Code /]
   [@parserCode.Phase3Code /]
[/#if]

  

  Token current_token;
[#if hasPhase2] 
  private Token currentLookaheadToken, lastScannedToken;
  private int remainingLookahead;
  private boolean indefiniteLookahead;
  private boolean semanticLookahead; 
[/#if]


[#if !grammar.options.userDefinedLexer]
 [#if !grammar.options.hugeFileSupport]
   public ${grammar.parserClassName}(String inputSource, CharSequence content) {
       this(new ${grammar.lexerClassName}(inputSource, content));
      [#if grammar.options.lexerUsesParser]
      token_source.parser = this;
      [/#if]
  }
 [/#if]
  public ${grammar.parserClassName}(java.io.InputStream stream) {
      this(new InputStreamReader(stream));
  }
  
  public ${grammar.parserClassName}(Reader reader) {
    this(new ${grammar.lexerClassName}(reader));
      [#if grammar.options.lexerUsesParser]
      token_source.parser = this;
      [/#if]
  }
[/#if]

[#if grammar.options.userDefinedLexer]
  /** Constructor with user supplied Lexer. */
  public ${grammar.parserClassName}(Lexer lexer) {
[#else]
  /** Constructor with user supplied Lexer. */
  public ${grammar.parserClassName}(${grammar.lexerClassName} lexer) {
[/#if]
    token_source = lexer;
      [#if grammar.options.lexerUsesParser]
      token_source.parser = this;
      [/#if]
     current_token = new Token();
  }
  
 
[#if grammar.options.faultTolerant]

    private Token insertVirtualToken(TokenType tokenType) {
        Token virtualToken = Token.newToken(tokenType, "VIRTUAL " + tokenType);
        virtualToken.setUnparsed(true);
        virtualToken.setVirtual(true);
        int line = current_token.getEndLine();
        int column = current_token.getEndColumn();
        virtualToken.setBeginLine(line);
        virtualToken.setEndLine(line);
        virtualToken.setBeginColumn(column);
        virtualToken.setEndColumn(column);
     [#if grammar.lexerData.numLexicalStates >1]
            token_source.doLexicalStateSwitch(tokenType);
     [/#if]
        if (tokensAreNodes && buildTree) {
             currentNodeScope.add(virtualToken);           
        }
        return virtualToken;
    }
  

     private Token consumeToken(TokenType expectedType) throws ParseException {
        return consumeToken(expectedType, false);
     }
 
     private Token consumeToken(TokenType expectedType, boolean forced) throws ParseException {
 [#else]
      private Token consumeToken(TokenType expectedType) throws ParseException {
        boolean forced = false;
 [/#if]
  
        Token oldToken = current_token;
        current_token = current_token.getNext();
        if (current_token == null ) {
           current_token = token_source.getNextToken();
        }
[#if grammar.options.faultTolerant]        
        if (!tolerantParsing) {
        	throw new ParseException(current_token);
        }
[/#if]        
        if (current_token.getType() != expectedType) {
            handleUnexpectedTokenType(expectedType, forced, oldToken) ;
        }      
[#if grammar.options.treeBuildingEnabled]
      if (buildTree && tokensAreNodes) {
  [#if grammar.options.userDefinedLexer]
          current_token.setInputSource(inputSource);
  [/#if]
  [#if grammar.usesjjtreeOpenNodeScope]
   	      jjtreeOpenNodeScope(current_token);
  [/#if]
  [#if grammar.usesOpenNodeScopeHook]
          openNodeScopeHook(current_token);
  [/#if]          
          pushNode(current_token);
  [#if grammar.usesjjtreeCloseNodeScope]
   	      jjtreeCloseNodeScope(current_token);
  [/#if]
  [#if grammar.usesCloseNodeScopeHook]
   	      closeNodeScopeHook(current_token);
  [/#if]
      }
[/#if]
      if (trace_enabled) LOGGER.info("Consumed token of type " + current_token.getType() + " from " + current_token.getLocation());
      return current_token;
  }
  
  private void handleUnexpectedTokenType(TokenType expectedType,  boolean forced, Token oldToken) throws ParseException {
        if (!tolerantParsing) {
  		    throw new ParseException(current_token);
	   } 
[#if grammar.options.faultTolerant]	   
       if (forced && tolerantParsing) {
           Token nextToken = current_token;
           current_token = oldToken;
           Token virtualToken = insertVirtualToken(expectedType);
           virtualToken.setNext(nextToken);
           current_token = virtualToken;
           String message = "Expecting token type "+ expectedType + " but encountered " + nextToken.getType();
           message += "\nInserting virtual token to continue parsing";
           addParsingProblem(new ParsingProblem(message, virtualToken));
       } else {
          throw new ParseException(current_token);
      }
[/#if]      
  }
  
  
  private String generateErrorMessage(Token t) {
[#if grammar.options.faultTolerant] 
[/#if]      
      return "Encountered an error on (or somewhere around) line "
                + t.getBeginLine() 
                + ", column " + t.getBeginColumn() 
                + " of " + t.getInputSource();
   }
   
  
[#if hasPhase2]
  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess LOOKAHEAD_SUCCESS = new LookaheadSuccess();
  private boolean scanToken(TokenType type) {
    if (currentLookaheadToken == lastScannedToken) {
     if (!indefiniteLookahead) {
         --remainingLookahead;
      }
      if (currentLookaheadToken.getNext() == null) {
        Token nextToken = token_source.getNextToken();
        currentLookaheadToken.setNext(nextToken);
        currentLookaheadToken = nextToken;
        lastScannedToken = nextToken;
      } else {
        lastScannedToken = currentLookaheadToken = currentLookaheadToken.getNext();
      }
    } else {
      currentLookaheadToken = currentLookaheadToken.getNext();
    }
     if (currentLookaheadToken.getType() != type) return true;
     if (!indefiniteLookahead) {
         if (remainingLookahead == 0 && currentLookaheadToken == lastScannedToken) throw LOOKAHEAD_SUCCESS;
     }
     return false;
  }
[/#if]

  final public Token getNextToken() {
    if (current_token.getNext() != null) current_token = current_token.getNext();
    else {
       Token nextToken = token_source.getNextToken();
       current_token.setNext(nextToken);
       current_token = nextToken;
    }
    return current_token;
  }

/** Get the specific Token index ahead in the stream. */
  final public Token getToken(int index) {
    Token t = current_token;
    for (int i = 0; i < index; i++) {
      if (t.getNext() != null) t = t.getNext();
      else {
         Token nextToken = token_source.getNextToken();
         t.setNext(nextToken);
         t = nextToken;
       }
    }
    return t;
  }
/*  
  private int nextTokenKind() {
    if (current_token.getNext() == null) {
        Token nextToken = token_source.getNextToken();
        current_token.setNext(nextToken);
    }
    return current_token.getNext().getKind();
  }*/
  
  private TokenType nextTokenType() {
    if (current_token.getNext() == null) {
        Token nextToken = token_source.getNextToken();
        current_token.setNext(nextToken);
    }
    return current_token.getNext().getType();
  }
   
[#if grammar.options.debugParser]
  private boolean trace_enabled = true;
 [#else]
  private boolean trace_enabled = false;
 [/#if]
 
  public void setTracingEnabled(boolean tracingEnabled) {trace_enabled = tracingEnabled;}
  
 /**
 * @deprecated Use #setTracingEnabled
 */
   @Deprecated
  public void enable_tracing() {
    setTracingEnabled(true);
  }

/**
 * @deprecated Use #setTracingEnabled
 */
@Deprecated
 public void disable_tracing() {
    setTracingEnabled(false);
  }
  
  
  }
}

[#list grammar.otherParserCodeDeclarations as decl]
   ${decl}
[/#list]

