/*
 * Unfinished work on a Python grammar. I am working from the information in
 * following two web pages:
 * https://docs.python.org/3/reference/grammar.html
 * https://docs.python.org/3/reference/lexical_analysis.html#indentation
 * This is Python 3.9.5, which I presume is the latest spec. 
 * (I do not anticipate supporting any older versions of the language.)
 */

PARSER_PACKAGE = org.parsers.python;
NODE_PACKAGE = org.parsers.python.ast;
DEFAULT_LEXICAL_STATE = PYTHON;
TABS_TO_SPACES=8;
ENSURE_FINAL_EOL;
PRESERVE_LINE_ENDINGS=false;

INCLUDE "PythonLexer.javacc" 

PythonFile : (Statement)+ <EOF> ;

Number#void : <HEXNUMBER> | <BINNUMBER> | <OCTNUMBER> | <DECNUMBER> | <FLOAT> | <COMPLEX> ;

Strings : (<STRING_LITERAL>)+ ;

AtomicExpression : 
    <NAME> 
    | 
    Number 
    | 
    Strings
    | 
    "True" 
    | 
    "False" 
    | 
    "None" 
    | 
    "__peg_parser__" 
    |
    (Tuple | Group | GenExp)
    |
    (PyList | ListComp)
    |
    (PyDict | PySet | DictComp | SetComp)
    |
    "..."
;

Slice :
    Expression 
    |
    [Expression] ":" [Expression] [":" [Expression]]
;

Slices : Slice ("," Slice)* [","] ;

Statement : SimpleStatement | CompoundStatement ;
           
SimpleStatement : 
   ReturnStatement 
   |
   GlobalStatement
   |
   NonlocalStatement
   |
   "break"
   |
   "continue"
   |
   "pass"
   |
   AssertStatement
   |
   RaiseStatement
   |
   YieldStatement
;

CompoundStatement :
    IfStatement
    |
    WhileStatement
    |
    TryStatement
    |
    ClassDefinition
    |
    FunctionDefinition
;    

ReturnStatement : "return" [StarExpressions] ;

GlobalStatement : "global" <NAME> ("," <NAME>)* ;

NonlocalStatement : "nonlocal" <NAME> ("," <NAME>)* ;

AssertStatement : "assert" Expression ("," Expression)* ;

RaiseStatement : "raise" [ Expression ["from" Expression ] ];

Block :
    SimpleStatement
    |
    <NEWLINE><INDENT>(Statement)+<DEDENT>
;    

ElseBlock : "else" ":" Block ;

ExceptBlock : "except" [ Expression ["as" <NAME>] ] ":" Block ;

IfStatement : 
    "if" NamedExpression ":" Block 
     ("elif" NamedExpression ":" Block)* 
     ["else" NamedExpression ":" Block]
;     

FinallyBlock : "finally" ":" Block ;

WhileStatement : "while" NamedExpression ":" Block [ElseBlock] ;

TryStatement : 
   "try" ":" Block 
   (
       FinallyBlock
       | 
       ((ExceptBlock)+ [ElseBlock] [FinallyBlock])
   )
;

NamedExpression : [ <NAME> ":=" ] Expression ;

DottedName : <NAME> (=> "." <NAME>)* ;

ImportName : "import" DottedName ("," DottedName)* ;

StarNamedExpression : 
     "*" BitwiseOr
     |
     NamedExpression 
;

StarExpression :
    "*" BitwiseOr
    |
    Expression
;

StarExpressions : StarExpression ("," StarExpression)* [","] ;

StarNamedExpressions : StarNamedExpression ("," StarNamedExpression)* [","] ;

BitwiseOr : BitwiseXor ("|" BitwiseXor)* ;

BitwiseXor : BitwiseAnd ("^" BitwiseAnd)* ;

BitwiseAnd : ShiftExpression ("&" ShiftExpression)* ;

ShiftExpression : Sum (("<<" | ">>") Sum)* ;

Sum : Term (("+"|"-") Term)* ;

Term : Factor (("*"|"/"|"//"|"%"|"@") Factor)* ;

Factor : Power (("+"|"-"|"~") Power)* ;

Power : AwaitPrimary ["**" Factor] ;

Tuple : "(" [StarNamedExpression "," [StarNamedExpressions]] ")" ;

Group : "(" (YieldExpression | NamedExpression) ")" ;

AwaitPrimary : ["await"] PrimaryExpression ;

PrimaryExpression : AtomicExpression ; // TODO

Expression : Disjunction ["if" Disjunction "else" Expression] ; //TODO lambdas

YieldExpression : 
    "yield" "from" =>|| Expression 
    |
    "yield" [StarExpressions]
;    

YieldStatement# : YieldExpression ;

AnnotatedRhs : YieldExpression | StarExpressions ;

Decorators : "@" NamedExpression <NEWLINE> ;

Annotation : ":" Expression ;

Default : "=" Expression ;

InvocationArguments : "(" [Args] ")" ;

Args : 
   (StarExpression | NamedExpression) ("," (StarExpression | NamedExpression))* ["," KeywordArgs]
   |
   KeywordArgs
;

KeywordArgs : 
     KeywordOrStarred ("," KeywordOrStarred)* ["," KeywordOrDoubleStarred ("," KeywordOrDoubleStarred)*] 
     |
     KeywordOrDoubleStarred ("," KeywordOrDoubleStarred)* 
;


KeywordOrStarred : ((<NAME> "=") | "*") Expression;

KeywordOrDoubleStarred : ((<NAME> "=") | "**") Expression;

KeyValuePair : Expression ":" Expression ;

DoubleStarredKeyValuePair : 
    "*" BitwiseOr
    |
    KeyValuePair
;

DoubleStarredKeyValuePairs : DoubleStarredKeyValuePair ("," DoubleStarredKeyValuePair)* [","] ;

PyDict : "{" [DoubleStarredKeyValuePairs] "}" ;

DictComp : "{" KeyValuePair (ForIfClause)+ "}" ;

PySet : "{" StarNamedExpressions "}" ;

SetComp : "{" NamedExpression (ForIfClause)+ "}" ;

ClassDefinition :
    [Decorators] "class" =>||
    <NAME> [InvocationArguments] 
    ":"
    Block
;

FunctionDefinition :
    [Decorators]
    ["async"]
    "def" =>||
    <NAME>
    "("
    // Params TODO
    ")"
    ["->" Expression]
    ":" Block
;

//LambdaDefinition : "lambda" ":" [LambdaParameters] ":" Expression ;

//LambdaParameters : Params ; //TODO

Disjunction : Conjunction ("or" Conjunction)* ;

Conjunction : Inversion ("and" Inversion)* ;

Inversion : ("not")* Comparison ;

Comparison : BitwiseOr ; // TODO

StarTarget : ["*"] TargetWithStarAtom ;

StarTargets : StarTarget ("," StarTarget)* ;

ForIfClause : ["async"] "for" StarTargets "in" Disjunction ("if" Disjunction)* ;

GenExp : "(" NamedExpression (ForIfClause)+ ")" ;

PyList : "[" [StarNamedExpressions] "]" ;

ListComp : "[" NamedExpression (ForIfClause)+ "]" ;

TargetWithStarAtom : 
     // TODO
     StarAtom 
;

StarAtom :
    <NAME>
    |
    "(" TargetWithStarAtom ")"
    // | TODO
;

PrimarySuffix :
   "." <NAME>
   // | TODO
;

PrimaryExpression : AtomicExpression (PrimarySuffix)* ;
