/*
 * Unfinished work on a Python grammar. I am working from the information in
 * following two web pages:
 * https://docs.python.org/3/reference/grammar.html
 * https://docs.python.org/3/reference/lexical_analysis.html#indentation
 * This is Python 3.9.5, which I presume is the latest spec. 
 * (I do not anticipate supporting any older versions of the language.)
 */

PARSER_PACKAGE = org.parsers.python;
NODE_PACKAGE = org.parsers.python.ast;
DEFAULT_LEXICAL_STATE = PYTHON;
TABS_TO_SPACES=8;
ENSURE_FINAL_EOL;
PRESERVE_LINE_ENDINGS=false;

INCLUDE "PythonLexer.javacc" 

PythonFile : (Statement)+ <EOF> ;

Number#void : <HEXNUMBER> | <BINNUMBER> | <OCTNUMBER> | <DECNUMBER> | <FLOAT> | <COMPLEX> ;

Strings : (<STRING_LITERAL>)+ ;

AtomicExpression : 
    <NAME> 
    | 
    Number 
    | 
    Strings
    | 
    "True" 
    | 
    "False" 
    | 
    "None" 
    | 
    "__peg_parser__" 
    |
    "..."
 // | (tuple | group | genexp)
 //   | (list | listcomp)
//    | (dict | set | dictcomp | setcomp);
;

Expression : AtomicExpression ;

Statement : SimpleStatement | CompoundStatement ;
           
SimpleStatement : 
   ReturnStatement 
   |
   GlobalStatement
   |
   NonlocalStatement
   |
   "break"
   |
   "continue"
   |
   "pass"
   |
   AssertStatement
   |
   RaiseStatement
;

CompoundStatement :
    WhileStatement
    |
    TryStatement
;    

ReturnStatement : "return" ;

GlobalStatement : "global" <NAME> ("," <NAME>)* ;

NonlocalStatement : "nonlocal" <NAME> ("," <NAME>)* ;

AssertStatement : "assert" Expression ("," Expression)* ;

RaiseStatement : "raise" [ Expression ["from" Expression ] ];

Block :
    SimpleStatement
    |
    <NEWLINE><INDENT>(Statement)+<DEDENT>
;    

ElseBlock : "else" ":" Block ;

ExceptBlock : "except" [ Expression ["as" <NAME>] ] ":" Block ;

FinallyBlock : "finally" ":" Block ;

TryStatement : 
   "try" ":" Block 
   (
       FinallyBlock
       | 
       ((ExceptBlock)+ [ElseBlock] [FinallyBlock])
   )
;

NamedExpression : [ <NAME> ":=" ] Expression ;

WhileStatement : "while" NamedExpression ":" Block [ElseBlock] ;