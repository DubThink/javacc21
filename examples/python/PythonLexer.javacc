/*
 * The lexical grammar of the still unfunished Python parser
 */

PARSER_PACKAGE = org.parsers.pylexer;
DEFAULT_LEXICAL_STATE = PYTHON;
TABS_TO_SPACES=8;
PRESERVE_LINE_ENDINGS=false;
ENSURE_FINAL_EOL;
EXTRA_TOKENS=INDENT,DEDENT;

INJECT LEXER_CLASS : {
   private int indentation=1;
   private int bracketNesting, parenthesesNesting, braceNesting;
   private List<Integer> indentationStack = new ArrayList<>();

   void indent(int offset) {
	    indentationStack.add(indentation);
	    indentation = offset;
      //TODO: Check whether the offset is greater than the last
      // indentation
   }

   void dedent(int offset) {
	    indentation = indentationStack.remove(indentationStack.size()-1);
      //TODO deal with invalid dedentation, also multiple dedents
   }

   Token TOKEN_HOOK(Token tok) {
      TokenType type = tok.getType();
      Token prevToken = tok.getPreviousToken();

      switch (type) {
         case LBRACE : braceNesting++; break;
         case RBRACE : braceNesting--; break;
         case LPAREN : parenthesesNesting++; break;
         case RPAREN : parenthesesNesting--; break;
         case LBRACKET : bracketNesting++; break;
         case RBRACKET : bracketNesting--; break;
         case NEWLINE : return handleNewline(tok);
         default : if (!tok.isUnparsed() && startsLine(tok)) {
             return handleIndentation(tok);
         }
      }
      return tok;
   }

   Token handleIndentation(Token tok) {
       int offset = tok.getBeginColumn();
       if (offset > indentation) {
         indent(offset);
       } 
       else if (offset < indentation) {
         dedent(offset);
       }
    return tok; // TODO: various stuff
   }

   Token handleNewline(Token tok) {
       if (lineJoiningOn()) {
         tok.setUnparsed(true);
       }
       return tok;
   }

   boolean lineJoiningOn() {
       return braceNesting >0 || parenthesesNesting >0 || bracketNesting >0;
   }

   boolean startsLine(Token tok) {
       if (lineJoiningOn()) return false;
       Token prevToken = tok.getPreviousToken();
       if (prevToken == null) return true;
       if (prevToken.getType() == CONTINUE_LINE) return false;
       return prevToken.getEndLine() != tok.getBeginLine();
   }
}


SKIP : <SPACE : " " | "\f"> ;

UNPARSED : 
   <CONTINUE_LINE : "\\\n"> #Whitespace
   |
   <COMMENT: "#" (~["\n"])* "\n" > #Comment  
;

TOKEN : 
   <NEWLINE : "\n"> #Newline
;

INCLUDE "PythonIdentifierDef.javacc"

TOKEN :
  <NAME : <PYTHON_IDENTIFIER_START> (<PYTHON_IDENTIFIER_PART>)* > #Name
;

TOKEN #Delimiter :
   <ASSIGN : "=">
   |
   <AT : "@">
   |
   <COLON : ":" >
   |
   <COMMA : ",">
   |
   <EQ : "==">
   | 
   <LBRACE: "{" > 
   | 
   <RBRACE: "}" > 
   |
   <LBRACKET : "[">
   |
   <RBRACKET : "]">
   |
   <LPAREN : "(">
   |
   <RPAREN : ")" >
   |
   <SEMICOLON : ";">
   |
   <STAR : "*"> 
   |
   <STAR_STAR : "**">
   |
   <MINUSASSIGN : "-=">
   |
   <PLUSASSIGN : "+=">
   |
   <STARASSIGN : "*=">
   |
   <ATASSIGN : "@=">
   |
   <SLASHASSIGN : "/=">
   |
   <REMASSIGN : "%=">
   |
   <ANDASSIGN : "&=">
   |
   <ORASSIGN : "|=">
   |
   <XORASSIGN : "^=">
   |
   <LSHIFTASSIGN : "<<=">
   |
   <RSHIFTASSIGN : ">>=">
   |
   <STARSTARASSIGN : "**=">
   |
   <SLASHSLASHASSIGN : "//=">
;

TOKEN #Operator :
   <BIT_AND : "&">
   |
   <BIT_OR : "|">
   |
   <XOR : "^">
   |
   <TILDE : "~">
   |
   <COLONEQUALS : ":=">
   |
   <DOT : ".">
   |
   <ELLIPSIS : "...">
   |
   <LE: "<=" > 
   | 
   <GE: ">=" > 
   | 
   <NE: "!=" > 
   |
   <GT: ">" > 
   | 
   <LT: "<" > 
   |
   <MINUS : "-">
   |
   <PLUS : "+">
   |
   <SLASH : "/">
   |
   <PERCENT : "%">
   |
   <LSHIFT : "<<">
   |
   <RSHIFT : ">>">
   |
   <HOOK : "? ">
   |
   <RARROW : "->">
;

TOKEN #Keyword :
   <AND : "and">
   |
   <AS : "as">
   |
   <_ASSERT : "assert">
   |
   <ASYNC : "async">
   |
   <AWAIT : "await">
   |
   <BREAK : "break">
   |
   <CLASS : "class">
   |
   <CONTINUE : "continue">
   |
   <DEF : "def">
   |
   <DEL : "del">
   |
   <EXCEPT : "except">
   |
   <FINALLY : "finally">
   |
   <FOR : "for">
   |
   <FROM : "from">
   |
   <GLOBAL : "global">
   |
   <IF : "if">
   |
   <IN : "in">
   |
   <IS : "is">
   |
   <ELIF : "elif">
   |
   <ELSE : "else">
   |
   <FALSE : "False">
   |
   <IMPORT : "import">
   |
   <LAMBDA : "lambda">
   |
   <NONLOCAL : "nonlocal">
   |
   <NONE : "None">
   |
   <NOT : "not">
   |
   <OR : "or">
   |
   <PASS : "pass">
   |
   <PEG_PARSER : "__peg_parser__">
   |
   <RAISE : "raise">
   |
   <RETURN : "return">
   |
   <TRUE : "True">   
   |
   <TRY : "try">
   |
   <WHILE : "while">
   |
   <WITH : "with">
   |
   <YIELD : "yield">
;   

// The following is lifted from the Pydev code. See:
// https://github.com/fabioz/Pydev/blob/master/plugins/org.python.pydev.parser/src/org/python/pydev/parser/grammar38/python.jjt#L392-L411
// I think this is fair use. I don't anticipate anybody complaining. Besides, they most likely lifted this 
// from somewhere else!
TOKEN #NumericalLiteral : 
    <DECNUMBER:
        ["1"-"9"] ((["_"])?["0"-"9"])* (["l", "L"])?
      | "0"
      >
    |   
    <HEXNUMBER: "0" ["x","X"] ((["_"])? ["0"-"9","a"-"f","A"-"F"])+ (["l","L"])? >
    |   
    <OCTNUMBER: "0" ["o","O"] ((["_"])? ["0"-"7"])* (["l","L"])? >
    |   
    <BINNUMBER: "0" (["b","B"])? ((["_"])? ["0"-"1"])* (["l","L"])? >
    |
    <FLOAT:
        ["0"-"9"]((["_"])?["0"-"9"])* "." ((["_"])?["0"-"9"])* (<EXPONENT>)?
      | "." ["0"-"9"]((["_"])?["0"-"9"])* (<EXPONENT>)?
      | ["0"-"9"]((["_"])?["0"-"9"])* <EXPONENT>
      >
    |
    <COMPLEX: (<DECNUMBER> | <FLOAT> | "0" <DECNUMBER> ) ["j", "J"]>
    |
    <#EXPONENT: ["e","E"] (["+","-"])? ["0"-"9"]((["_"])?["0"-"9"])* >
;

TOKEN #StringLiteral :
   <STRING_LITERAL : <STRING_LITERAL1> | <STRING_LITERAL2> | <STRING_LITERAL3> | <STRING_LITERAL4>
                     | <BYTES_LITERAL_1> | <BYTES_LITERAL_2> | <BYTES_LITERAL_3> | <BYTES_LITERAL_4>>
   |
   <#STRING_LITERAL1 : (<STRING_PREFIX>)? "\"" ((~["\"", "\\", "\n"])|<STRING_ESCAPE>)* "\"">
   |
   <#STRING_LITERAL2 : (<STRING_PREFIX>)? "'" ((~["'", "\\", "\n"])|<STRING_ESCAPE>)* "'">
   |
   <#STRING_LITERAL3 : (<STRING_PREFIX>)? "'''" (~["'","\\"] | ("'" ~["'"]) | ("''" ~["'"])|<STRING_ESCAPE>)* "'''">
   |
   <#STRING_LITERAL4 : (<STRING_PREFIX>)? "\"\"\"" (~["\"","\\"] | ("\"" ~["\""]) | ("\"\"" ~["\""])|<STRING_ESCAPE>)* "\"\"\"">
   |
   <#BYTES_LITERAL_1 : <BYTES_PREFIX> "'" ((~["\n","'"])|<BYTES_ESCAPE>)* "'">
   |
   <#BYTES_LITERAL_2 : <BYTES_PREFIX> "\"" ((~["\n","\""])|<BYTES_ESCAPE>)* "\"">
   |
   <#BYTES_LITERAL_3 : <BYTES_PREFIX> "'''" (~["'","\\"] | ("'" ~["'"]) | ("''" ~["'"])|<BYTES_ESCAPE>)* "'''">
   |
   <#BYTES_LITERAL_4 : <BYTES_PREFIX> "\"\"\"" (~["\"","\\"] | ("\"" ~["\""]) | ("\"\"" ~["\""])|<BYTES_ESCAPE>)* "\"\"\"">
   |
   <#STRING_PREFIX : "r" | "u" | "R" | "U" | "f" | "F"
                     | "fr" | "Fr" | "fR" | "FR" | "rf" | "rF" | "Rf" | "RF">
   |                  
   <#BYTES_PREFIX :  "b" | "B" | "br" | "Br" | "bR" | "BR" | "rb" | "rB" | "Rb" | "RB">
   |
   <#STRING_ESCAPE: "\\" ~[] >
   |
   <#BYTES_ESCAPE : "\\" ["\u0000"-"\u00FF"]>
;
